

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Nov 22 19:56:22 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   124                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   125  0000                     
   126 ;; Function _INT1_DefaultInterruptHandler is unused but had its address taken
   127  0000                     
   128 ;; Function _INT2_DefaultInterruptHandler is unused but had its address taken
   129  0000                     
   130 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   131  0000                     
   132                           	psect	idataCOMRAM
   133  002A16                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _PWM_Value
   137  002A16  00C8               	dw	200
   138                           
   139                           ;initializer for _ADC_Step
   140  002A18  06                 	db	6
   141                           
   142                           ;initializer for _Battery_Percent
   143  002A19  64                 	db	100
   144                           
   145                           ;initializer for _status
   146  002A1A  02                 	db	2
   147                           
   148                           	psect	idataBANK0
   149  002A10                     __pidataBANK0:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _MAX_ADC
   153  002A10  FC                 	db	252
   154                           
   155                           ;initializer for _MAX_VOLUME
   156  002A11  0A                 	db	10
   157                           
   158                           ;initializer for _MIN_ADC
   159  002A12  42                 	db	66
   160                           
   161                           ;initializer for _MIN_VOLUME
   162  002A13  E2                 	db	226
   163                           
   164                           ;initializer for _SENSITIVITY
   165  002A14  05                 	db	5
   166                           
   167                           ;initializer for _Volume_Step
   168  002A15  01                 	db	1
   169                           
   170                           	psect	idataBANK1
   171  00291C                     __pidataBANK1:
   172                           	opt stack 0
   173                           
   174                           ;initializer for Read_Commands@F18504
   175  00291C  20                 	db	32
   176  00291D  2C                 	db	44
   177  00291E  2D                 	db	45
   178  00291F  00                 	db	0
   179                           
   180                           ;initializer for Update_X_Offset@F18450
   181  002920  58                 	db	88
   182  002921  00                 	db	0
   183  002922  00                 	db	0
   184  002923  51                 	db	81
   185                           
   186                           ;initializer for Update_Y_Offset@F18455
   187  002924  59                 	db	89
   188  002925  00                 	db	0
   189  002926  00                 	db	0
   190  002927  51                 	db	81
   191                           
   192                           ;initializer for Update_Battery_Display@F18447
   193  002928  44                 	db	68
   194  002929  00                 	db	0
   195  00292A  51                 	db	81
   196                           
   197                           ;initializer for Update_Battery_Icon@F18444
   198  00292B  49                 	db	73
   199  00292C  00                 	db	0
   200  00292D  51                 	db	81
   201                           
   202                           ;initializer for Battery_Display@F18498
   203  00292E  45                 	db	69
   204  00292F  51                 	db	81
   205                           
   206                           ;initializer for LED_Control@F18486
   207  002930  20                 	db	32
   208  002931  00                 	db	0
   209                           
   210                           ;initializer for PI_UART_SYNC@F18305
   211  002932  45                 	db	69
   212  002933  51                 	db	81
   213                           
   214                           	psect	mediumconst
   215  007A62                     __pmediumconst:
   216                           	opt stack 0
   217  007A62  00                 	db	0
   218  007A63                     _Linearized_Volume_Array:
   219                           	opt stack 0
   220  007A63  C4                 	db	196
   221  007A64  C4                 	db	196
   222  007A65  C4                 	db	196
   223  007A66  C4                 	db	196
   224  007A67  C4                 	db	196
   225  007A68  C4                 	db	196
   226  007A69  C4                 	db	196
   227  007A6A  C4                 	db	196
   228  007A6B  C4                 	db	196
   229  007A6C  C4                 	db	196
   230  007A6D  C4                 	db	196
   231  007A6E  C4                 	db	196
   232  007A6F  C4                 	db	196
   233  007A70  C4                 	db	196
   234  007A71  C4                 	db	196
   235  007A72  C4                 	db	196
   236  007A73  C4                 	db	196
   237  007A74  C4                 	db	196
   238  007A75  C4                 	db	196
   239  007A76  C4                 	db	196
   240  007A77  C4                 	db	196
   241  007A78  C4                 	db	196
   242  007A79  C4                 	db	196
   243  007A7A  C4                 	db	196
   244  007A7B  C4                 	db	196
   245  007A7C  C4                 	db	196
   246  007A7D  C4                 	db	196
   247  007A7E  C4                 	db	196
   248  007A7F  C4                 	db	196
   249  007A80  C4                 	db	196
   250  007A81  C4                 	db	196
   251  007A82  C4                 	db	196
   252  007A83  C4                 	db	196
   253  007A84  C4                 	db	196
   254  007A85  C4                 	db	196
   255  007A86  C4                 	db	196
   256  007A87  C4                 	db	196
   257  007A88  C4                 	db	196
   258  007A89  C4                 	db	196
   259  007A8A  C4                 	db	196
   260  007A8B  C4                 	db	196
   261  007A8C  C4                 	db	196
   262  007A8D  C4                 	db	196
   263  007A8E  C4                 	db	196
   264  007A8F  C4                 	db	196
   265  007A90  C4                 	db	196
   266  007A91  C4                 	db	196
   267  007A92  C4                 	db	196
   268  007A93  C4                 	db	196
   269  007A94  C4                 	db	196
   270  007A95  C4                 	db	196
   271  007A96  C4                 	db	196
   272  007A97  C4                 	db	196
   273  007A98  C4                 	db	196
   274  007A99  C4                 	db	196
   275  007A9A  C4                 	db	196
   276  007A9B  C4                 	db	196
   277  007A9C  C4                 	db	196
   278  007A9D  C4                 	db	196
   279  007A9E  C4                 	db	196
   280  007A9F  C4                 	db	196
   281  007AA0  C4                 	db	196
   282  007AA1  C5                 	db	197
   283  007AA2  C5                 	db	197
   284  007AA3  C6                 	db	198
   285  007AA4  C6                 	db	198
   286  007AA5  C7                 	db	199
   287  007AA6  C8                 	db	200
   288  007AA7  C8                 	db	200
   289  007AA8  C9                 	db	201
   290  007AA9  C9                 	db	201
   291  007AAA  CA                 	db	202
   292  007AAB  CB                 	db	203
   293  007AAC  CB                 	db	203
   294  007AAD  CC                 	db	204
   295  007AAE  CC                 	db	204
   296  007AAF  CD                 	db	205
   297  007AB0  CD                 	db	205
   298  007AB1  CE                 	db	206
   299  007AB2  CF                 	db	207
   300  007AB3  CF                 	db	207
   301  007AB4  D0                 	db	208
   302  007AB5  D0                 	db	208
   303  007AB6  D1                 	db	209
   304  007AB7  D2                 	db	210
   305  007AB8  D2                 	db	210
   306  007AB9  D3                 	db	211
   307  007ABA  D3                 	db	211
   308  007ABB  D4                 	db	212
   309  007ABC  D5                 	db	213
   310  007ABD  D5                 	db	213
   311  007ABE  D6                 	db	214
   312  007ABF  D6                 	db	214
   313  007AC0  D7                 	db	215
   314  007AC1  D8                 	db	216
   315  007AC2  D8                 	db	216
   316  007AC3  D9                 	db	217
   317  007AC4  D9                 	db	217
   318  007AC5  DA                 	db	218
   319  007AC6  DA                 	db	218
   320  007AC7  DB                 	db	219
   321  007AC8  DB                 	db	219
   322  007AC9  DC                 	db	220
   323  007ACA  DC                 	db	220
   324  007ACB  DD                 	db	221
   325  007ACC  DD                 	db	221
   326  007ACD  DE                 	db	222
   327  007ACE  DE                 	db	222
   328  007ACF  DF                 	db	223
   329  007AD0  DF                 	db	223
   330  007AD1  E0                 	db	224
   331  007AD2  E0                 	db	224
   332  007AD3  E1                 	db	225
   333  007AD4  E1                 	db	225
   334  007AD5  E2                 	db	226
   335  007AD6  E2                 	db	226
   336  007AD7  E3                 	db	227
   337  007AD8  E3                 	db	227
   338  007AD9  E4                 	db	228
   339  007ADA  E4                 	db	228
   340  007ADB  E5                 	db	229
   341  007ADC  E6                 	db	230
   342  007ADD  E6                 	db	230
   343  007ADE  E7                 	db	231
   344  007ADF  E7                 	db	231
   345  007AE0  E8                 	db	232
   346  007AE1  E8                 	db	232
   347  007AE2  E9                 	db	233
   348  007AE3  E9                 	db	233
   349  007AE4  EA                 	db	234
   350  007AE5  EA                 	db	234
   351  007AE6  EA                 	db	234
   352  007AE7  EB                 	db	235
   353  007AE8  EB                 	db	235
   354  007AE9  EC                 	db	236
   355  007AEA  EC                 	db	236
   356  007AEB  ED                 	db	237
   357  007AEC  ED                 	db	237
   358  007AED  EE                 	db	238
   359  007AEE  EE                 	db	238
   360  007AEF  EE                 	db	238
   361  007AF0  EF                 	db	239
   362  007AF1  EF                 	db	239
   363  007AF2  F0                 	db	240
   364  007AF3  F0                 	db	240
   365  007AF4  F1                 	db	241
   366  007AF5  F1                 	db	241
   367  007AF6  F1                 	db	241
   368  007AF7  F2                 	db	242
   369  007AF8  F2                 	db	242
   370  007AF9  F3                 	db	243
   371  007AFA  F3                 	db	243
   372  007AFB  F4                 	db	244
   373  007AFC  F4                 	db	244
   374  007AFD  F5                 	db	245
   375  007AFE  F5                 	db	245
   376  007AFF  F5                 	db	245
   377  007B00  F6                 	db	246
   378  007B01  F6                 	db	246
   379  007B02  F7                 	db	247
   380  007B03  F7                 	db	247
   381  007B04  F7                 	db	247
   382  007B05  F8                 	db	248
   383  007B06  F8                 	db	248
   384  007B07  F8                 	db	248
   385  007B08  F8                 	db	248
   386  007B09  F9                 	db	249
   387  007B0A  F9                 	db	249
   388  007B0B  F9                 	db	249
   389  007B0C  F9                 	db	249
   390  007B0D  F9                 	db	249
   391  007B0E  FA                 	db	250
   392  007B0F  FA                 	db	250
   393  007B10  FA                 	db	250
   394  007B11  FA                 	db	250
   395  007B12  FB                 	db	251
   396  007B13  FB                 	db	251
   397  007B14  FB                 	db	251
   398  007B15  FB                 	db	251
   399  007B16  FB                 	db	251
   400  007B17  FC                 	db	252
   401  007B18  FC                 	db	252
   402  007B19  FC                 	db	252
   403  007B1A  FC                 	db	252
   404  007B1B  FD                 	db	253
   405  007B1C  FD                 	db	253
   406  007B1D  FD                 	db	253
   407  007B1E  FD                 	db	253
   408  007B1F  FD                 	db	253
   409  007B20  FE                 	db	254
   410  007B21  FE                 	db	254
   411  007B22  FE                 	db	254
   412  007B23  FE                 	db	254
   413  007B24  FF                 	db	255
   414  007B25  FF                 	db	255
   415  007B26  FF                 	db	255
   416  007B27  FF                 	db	255
   417  007B28  FF                 	db	255
   418  007B29  FF                 	db	255
   419  007B2A  FF                 	db	255
   420  007B2B  00                 	db	0
   421  007B2C  00                 	db	0
   422  007B2D  00                 	db	0
   423  007B2E  00                 	db	0
   424  007B2F  00                 	db	0
   425  007B30  00                 	db	0
   426  007B31  01                 	db	1
   427  007B32  01                 	db	1
   428  007B33  01                 	db	1
   429  007B34  01                 	db	1
   430  007B35  01                 	db	1
   431  007B36  01                 	db	1
   432  007B37  01                 	db	1
   433  007B38  02                 	db	2
   434  007B39  02                 	db	2
   435  007B3A  02                 	db	2
   436  007B3B  02                 	db	2
   437  007B3C  02                 	db	2
   438  007B3D  02                 	db	2
   439  007B3E  02                 	db	2
   440  007B3F  03                 	db	3
   441  007B40  03                 	db	3
   442  007B41  03                 	db	3
   443  007B42  03                 	db	3
   444  007B43  03                 	db	3
   445  007B44  03                 	db	3
   446  007B45  03                 	db	3
   447  007B46  04                 	db	4
   448  007B47  04                 	db	4
   449  007B48  04                 	db	4
   450  007B49  04                 	db	4
   451  007B4A  04                 	db	4
   452  007B4B  04                 	db	4
   453  007B4C  04                 	db	4
   454  007B4D  04                 	db	4
   455  007B4E  04                 	db	4
   456  007B4F  04                 	db	4
   457  007B50  04                 	db	4
   458  007B51  04                 	db	4
   459  007B52  04                 	db	4
   460  007B53  05                 	db	5
   461  007B54  05                 	db	5
   462  007B55  05                 	db	5
   463  007B56  05                 	db	5
   464  007B57  05                 	db	5
   465  007B58  05                 	db	5
   466  007B59  05                 	db	5
   467  007B5A  05                 	db	5
   468  007B5B  05                 	db	5
   469  007B5C  05                 	db	5
   470  007B5D  05                 	db	5
   471  007B5E  05                 	db	5
   472  007B5F  05                 	db	5
   473  007B60  05                 	db	5
   474  007B61  06                 	db	6
   475  007B62  06                 	db	6
   476  007B63                     __end_of_Linearized_Volume_Array:
   477                           	opt stack 0
   478  007B63                     _dpowers:
   479                           	opt stack 0
   480  007B63  0001               	dw	1
   481  007B65  000A               	dw	10
   482  007B67  0064               	dw	100
   483  007B69  03E8               	dw	1000
   484  007B6B  2710               	dw	10000
   485  007B6D                     __end_of_dpowers:
   486                           	opt stack 0
   487  007B6D                     _hexpowers:
   488                           	opt stack 0
   489  007B6D  0001               	dw	1
   490  007B6F  0010               	dw	16
   491  007B71  0100               	dw	256
   492  007B73  1000               	dw	4096
   493  007B75                     __end_of_hexpowers:
   494                           	opt stack 0
   495  007B75                     STR_24:
   496  007B75  0A                 	db	10
   497  007B76  43                 	db	67	;'C'
   498  007B77  6F                 	db	111	;'o'
   499  007B78  6D                 	db	109	;'m'
   500  007B79  6D                 	db	109	;'m'
   501  007B7A  61                 	db	97	;'a'
   502  007B7B  6E                 	db	110	;'n'
   503  007B7C  64                 	db	100	;'d'
   504  007B7D  20                 	db	32
   505  007B7E  53                 	db	83	;'S'
   506  007B7F  79                 	db	121	;'y'
   507  007B80  6E                 	db	110	;'n'
   508  007B81  74                 	db	116	;'t'
   509  007B82  61                 	db	97	;'a'
   510  007B83  78                 	db	120	;'x'
   511  007B84  20                 	db	32
   512  007B85  28                 	db	40
   513  007B86  73                 	db	115	;'s'
   514  007B87  69                 	db	105	;'i'
   515  007B88  6E                 	db	110	;'n'
   516  007B89  67                 	db	103	;'g'
   517  007B8A  6C                 	db	108	;'l'
   518  007B8B  65                 	db	101	;'e'
   519  007B8C  20                 	db	32
   520  007B8D  73                 	db	115	;'s'
   521  007B8E  70                 	db	112	;'p'
   522  007B8F  61                 	db	97	;'a'
   523  007B90  63                 	db	99	;'c'
   524  007B91  65                 	db	101	;'e'
   525  007B92  73                 	db	115	;'s'
   526  007B93  29                 	db	41
   527  007B94  3A                 	db	58	;':'
   528  007B95  20                 	db	32
   529  007B96  43                 	db	67	;'C'
   530  007B97  6F                 	db	111	;'o'
   531  007B98  6D                 	db	109	;'m'
   532  007B99  6D                 	db	109	;'m'
   533  007B9A  61                 	db	97	;'a'
   534  007B9B  6E                 	db	110	;'n'
   535  007B9C  64                 	db	100	;'d'
   536  007B9D  20                 	db	32
   537  007B9E  52                 	db	82	;'R'
   538  007B9F  65                 	db	101	;'e'
   539  007BA0  67                 	db	103	;'g'
   540  007BA1  5F                 	db	95	;'_'
   541  007BA2  41                 	db	65	;'A'
   542  007BA3  64                 	db	100	;'d'
   543  007BA4  64                 	db	100	;'d'
   544  007BA5  72                 	db	114	;'r'
   545  007BA6  65                 	db	101	;'e'
   546  007BA7  73                 	db	115	;'s'
   547  007BA8  73                 	db	115	;'s'
   548  007BA9  20                 	db	32
   549  007BAA  52                 	db	82	;'R'
   550  007BAB  65                 	db	101	;'e'
   551  007BAC  67                 	db	103	;'g'
   552  007BAD  5F                 	db	95	;'_'
   553  007BAE  56                 	db	86	;'V'
   554  007BAF  61                 	db	97	;'a'
   555  007BB0  6C                 	db	108	;'l'
   556  007BB1  75                 	db	117	;'u'
   557  007BB2  65                 	db	101	;'e'
   558  007BB3  00                 	db	0
   559  007BB4                     STR_26:
   560  007BB4  0A                 	db	10
   561  007BB5  43                 	db	67	;'C'
   562  007BB6  6F                 	db	111	;'o'
   563  007BB7  6D                 	db	109	;'m'
   564  007BB8  6D                 	db	109	;'m'
   565  007BB9  61                 	db	97	;'a'
   566  007BBA  6E                 	db	110	;'n'
   567  007BBB  64                 	db	100	;'d'
   568  007BBC  20                 	db	32
   569  007BBD  3D                 	db	61	;'='
   570  007BBE  20                 	db	32
   571  007BBF  57                 	db	87	;'W'
   572  007BC0  72                 	db	114	;'r'
   573  007BC1  69                 	db	105	;'i'
   574  007BC2  74                 	db	116	;'t'
   575  007BC3  65                 	db	101	;'e'
   576  007BC4  2C                 	db	44
   577  007BC5  20                 	db	32
   578  007BC6  52                 	db	82	;'R'
   579  007BC7  65                 	db	101	;'e'
   580  007BC8  61                 	db	97	;'a'
   581  007BC9  64                 	db	100	;'d'
   582  007BCA  2C                 	db	44
   583  007BCB  20                 	db	32
   584  007BCC  45                 	db	69	;'E'
   585  007BCD  78                 	db	120	;'x'
   586  007BCE  69                 	db	105	;'i'
   587  007BCF  74                 	db	116	;'t'
   588  007BD0  2C                 	db	44
   589  007BD1  20                 	db	32
   590  007BD2  45                 	db	69	;'E'
   591  007BD3  6E                 	db	110	;'n'
   592  007BD4  61                 	db	97	;'a'
   593  007BD5  62                 	db	98	;'b'
   594  007BD6  6C                 	db	108	;'l'
   595  007BD7  65                 	db	101	;'e'
   596  007BD8  2C                 	db	44
   597  007BD9  20                 	db	32
   598  007BDA  44                 	db	68	;'D'
   599  007BDB  69                 	db	105	;'i'
   600  007BDC  73                 	db	115	;'s'
   601  007BDD  61                 	db	97	;'a'
   602  007BDE  62                 	db	98	;'b'
   603  007BDF  6C                 	db	108	;'l'
   604  007BE0  65                 	db	101	;'e'
   605  007BE1  2C                 	db	44
   606  007BE2  20                 	db	32
   607  007BE3  49                 	db	73	;'I'
   608  007BE4  6E                 	db	110	;'n'
   609  007BE5  69                 	db	105	;'i'
   610  007BE6  74                 	db	116	;'t'
   611  007BE7  69                 	db	105	;'i'
   612  007BE8  61                 	db	97	;'a'
   613  007BE9  6C                 	db	108	;'l'
   614  007BEA  69                 	db	105	;'i'
   615  007BEB  7A                 	db	122	;'z'
   616  007BEC  65                 	db	101	;'e'
   617  007BED  00                 	db	0
   618  007BEE                     STR_14:
   619  007BEE  43                 	db	67	;'C'
   620  007BEF  6F                 	db	111	;'o'
   621  007BF0  6D                 	db	109	;'m'
   622  007BF1  6D                 	db	109	;'m'
   623  007BF2  61                 	db	97	;'a'
   624  007BF3  6E                 	db	110	;'n'
   625  007BF4  64                 	db	100	;'d'
   626  007BF5  20                 	db	32
   627  007BF6  53                 	db	83	;'S'
   628  007BF7  79                 	db	121	;'y'
   629  007BF8  6E                 	db	110	;'n'
   630  007BF9  74                 	db	116	;'t'
   631  007BFA  61                 	db	97	;'a'
   632  007BFB  78                 	db	120	;'x'
   633  007BFC  20                 	db	32
   634  007BFD  28                 	db	40
   635  007BFE  73                 	db	115	;'s'
   636  007BFF  69                 	db	105	;'i'
   637  007C00  6E                 	db	110	;'n'
   638  007C01  67                 	db	103	;'g'
   639  007C02  6C                 	db	108	;'l'
   640  007C03  65                 	db	101	;'e'
   641  007C04  20                 	db	32
   642  007C05  73                 	db	115	;'s'
   643  007C06  70                 	db	112	;'p'
   644  007C07  61                 	db	97	;'a'
   645  007C08  63                 	db	99	;'c'
   646  007C09  65                 	db	101	;'e'
   647  007C0A  20                 	db	32
   648  007C0B  62                 	db	98	;'b'
   649  007C0C  65                 	db	101	;'e'
   650  007C0D  74                 	db	116	;'t'
   651  007C0E  77                 	db	119	;'w'
   652  007C0F  65                 	db	101	;'e'
   653  007C10  65                 	db	101	;'e'
   654  007C11  6E                 	db	110	;'n'
   655  007C12  29                 	db	41
   656  007C13  3A                 	db	58	;':'
   657  007C14  20                 	db	32
   658  007C15  20                 	db	32
   659  007C16  42                 	db	66	;'B'
   660  007C17  6C                 	db	108	;'l'
   661  007C18  75                 	db	117	;'u'
   662  007C19  65                 	db	101	;'e'
   663  007C1A  20                 	db	32
   664  007C1B  4F                 	db	79	;'O'
   665  007C1C  4E                 	db	78	;'N'
   666  007C1D  0A                 	db	10
   667  007C1E  0A                 	db	10
   668  007C1F  00                 	db	0
   669  007C20                     STR_55:
   670  007C20  41                 	db	65	;'A'
   671  007C21  63                 	db	99	;'c'
   672  007C22  74                 	db	116	;'t'
   673  007C23  75                 	db	117	;'u'
   674  007C24  61                 	db	97	;'a'
   675  007C25  6C                 	db	108	;'l'
   676  007C26  20                 	db	32
   677  007C27  76                 	db	118	;'v'
   678  007C28  6F                 	db	111	;'o'
   679  007C29  6C                 	db	108	;'l'
   680  007C2A  74                 	db	116	;'t'
   681  007C2B  61                 	db	97	;'a'
   682  007C2C  67                 	db	103	;'g'
   683  007C2D  65                 	db	101	;'e'
   684  007C2E  20                 	db	32
   685  007C2F  3D                 	db	61	;'='
   686  007C30  20                 	db	32
   687  007C31  28                 	db	40
   688  007C32  42                 	db	66	;'B'
   689  007C33  61                 	db	97	;'a'
   690  007C34  74                 	db	116	;'t'
   691  007C35  74                 	db	116	;'t'
   692  007C36  20                 	db	32
   693  007C37  56                 	db	86	;'V'
   694  007C38  6F                 	db	111	;'o'
   695  007C39  6C                 	db	108	;'l'
   696  007C3A  74                 	db	116	;'t'
   697  007C3B  61                 	db	97	;'a'
   698  007C3C  67                 	db	103	;'g'
   699  007C3D  65                 	db	101	;'e'
   700  007C3E  20                 	db	32
   701  007C3F  3C                 	db	60	;'<'
   702  007C40  3C                 	db	60	;'<'
   703  007C41  20                 	db	32
   704  007C42  38                 	db	56	;'8'
   705  007C43  29                 	db	41
   706  007C44  20                 	db	32
   707  007C45  2A                 	db	42
   708  007C46  20                 	db	32
   709  007C47  31                 	db	49	;'1'
   710  007C48  35                 	db	53	;'5'
   711  007C49  36                 	db	54	;'6'
   712  007C4A  2E                 	db	46
   713  007C4B  32                 	db	50	;'2'
   714  007C4C  35                 	db	53	;'5'
   715  007C4D  75                 	db	117	;'u'
   716  007C4E  56                 	db	86	;'V'
   717  007C4F  00                 	db	0
   718  007C50                     STR_1:
   719  007C50  0A                 	db	10
   720  007C51  0A                 	db	10
   721  007C52  54                 	db	84	;'T'
   722  007C53  68                 	db	104	;'h'
   723  007C54  69                 	db	105	;'i'
   724  007C55  73                 	db	115	;'s'
   725  007C56  20                 	db	32
   726  007C57  69                 	db	105	;'i'
   727  007C58  73                 	db	115	;'s'
   728  007C59  20                 	db	32
   729  007C5A  74                 	db	116	;'t'
   730  007C5B  68                 	db	104	;'h'
   731  007C5C  65                 	db	101	;'e'
   732  007C5D  20                 	db	32
   733  007C5E  6D                 	db	109	;'m'
   734  007C5F  61                 	db	97	;'a'
   735  007C60  69                 	db	105	;'i'
   736  007C61  6E                 	db	110	;'n'
   737  007C62  20                 	db	32
   738  007C63  6D                 	db	109	;'m'
   739  007C64  65                 	db	101	;'e'
   740  007C65  6E                 	db	110	;'n'
   741  007C66  75                 	db	117	;'u'
   742  007C67  2E                 	db	46
   743  007C68  20                 	db	32
   744  007C69  20                 	db	32
   745  007C6A  4D                 	db	77	;'M'
   746  007C6B  61                 	db	97	;'a'
   747  007C6C  6B                 	db	107	;'k'
   748  007C6D  65                 	db	101	;'e'
   749  007C6E  20                 	db	32
   750  007C6F  61                 	db	97	;'a'
   751  007C70  20                 	db	32
   752  007C71  73                 	db	115	;'s'
   753  007C72  65                 	db	101	;'e'
   754  007C73  6C                 	db	108	;'l'
   755  007C74  65                 	db	101	;'e'
   756  007C75  63                 	db	99	;'c'
   757  007C76  74                 	db	116	;'t'
   758  007C77  69                 	db	105	;'i'
   759  007C78  6F                 	db	111	;'o'
   760  007C79  6E                 	db	110	;'n'
   761  007C7A  3A                 	db	58	;':'
   762  007C7B  20                 	db	32
   763  007C7C  0A                 	db	10
   764  007C7D  00                 	db	0
   765  007C7E                     STR_13:
   766  007C7E  43                 	db	67	;'C'
   767  007C7F  6F                 	db	111	;'o'
   768  007C80  6E                 	db	110	;'n'
   769  007C81  74                 	db	116	;'t'
   770  007C82  72                 	db	114	;'r'
   771  007C83  6F                 	db	111	;'o'
   772  007C84  6C                 	db	108	;'l'
   773  007C85  73                 	db	115	;'s'
   774  007C86  20                 	db	32
   775  007C87  74                 	db	116	;'t'
   776  007C88  68                 	db	104	;'h'
   777  007C89  65                 	db	101	;'e'
   778  007C8A  20                 	db	32
   779  007C8B  73                 	db	115	;'s'
   780  007C8C  74                 	db	116	;'t'
   781  007C8D  61                 	db	97	;'a'
   782  007C8E  74                 	db	116	;'t'
   783  007C8F  65                 	db	101	;'e'
   784  007C90  20                 	db	32
   785  007C91  6F                 	db	111	;'o'
   786  007C92  66                 	db	102	;'f'
   787  007C93  20                 	db	32
   788  007C94  74                 	db	116	;'t'
   789  007C95  68                 	db	104	;'h'
   790  007C96  65                 	db	101	;'e'
   791  007C97  20                 	db	32
   792  007C98  42                 	db	66	;'B'
   793  007C99  6C                 	db	108	;'l'
   794  007C9A  75                 	db	117	;'u'
   795  007C9B  65                 	db	101	;'e'
   796  007C9C  20                 	db	32
   797  007C9D  61                 	db	97	;'a'
   798  007C9E  6E                 	db	110	;'n'
   799  007C9F  64                 	db	100	;'d'
   800  007CA0  20                 	db	32
   801  007CA1  52                 	db	82	;'R'
   802  007CA2  65                 	db	101	;'e'
   803  007CA3  64                 	db	100	;'d'
   804  007CA4  20                 	db	32
   805  007CA5  4C                 	db	76	;'L'
   806  007CA6  45                 	db	69	;'E'
   807  007CA7  44                 	db	68	;'D'
   808  007CA8  73                 	db	115	;'s'
   809  007CA9  0A                 	db	10
   810  007CAA  00                 	db	0
   811  007CAB                     STR_87:
   812  007CAB  0A                 	db	10
   813  007CAC  0A                 	db	10
   814  007CAD  53                 	db	83	;'S'
   815  007CAE  63                 	db	99	;'c'
   816  007CAF  72                 	db	114	;'r'
   817  007CB0  65                 	db	101	;'e'
   818  007CB1  65                 	db	101	;'e'
   819  007CB2  6E                 	db	110	;'n'
   820  007CB3  20                 	db	32
   821  007CB4  42                 	db	66	;'B'
   822  007CB5  72                 	db	114	;'r'
   823  007CB6  69                 	db	105	;'i'
   824  007CB7  67                 	db	103	;'g'
   825  007CB8  68                 	db	104	;'h'
   826  007CB9  74                 	db	116	;'t'
   827  007CBA  6E                 	db	110	;'n'
   828  007CBB  65                 	db	101	;'e'
   829  007CBC  73                 	db	115	;'s'
   830  007CBD  73                 	db	115	;'s'
   831  007CBE  20                 	db	32
   832  007CBF  64                 	db	100	;'d'
   833  007CC0  65                 	db	101	;'e'
   834  007CC1  62                 	db	98	;'b'
   835  007CC2  75                 	db	117	;'u'
   836  007CC3  67                 	db	103	;'g'
   837  007CC4  20                 	db	32
   838  007CC5  28                 	db	40
   839  007CC6  45                 	db	69	;'E'
   840  007CC7  78                 	db	120	;'x'
   841  007CC8  69                 	db	105	;'i'
   842  007CC9  74                 	db	116	;'t'
   843  007CCA  20                 	db	32
   844  007CCB  74                 	db	116	;'t'
   845  007CCC  6F                 	db	111	;'o'
   846  007CCD  20                 	db	32
   847  007CCE  65                 	db	101	;'e'
   848  007CCF  78                 	db	120	;'x'
   849  007CD0  69                 	db	105	;'i'
   850  007CD1  74                 	db	116	;'t'
   851  007CD2  29                 	db	41
   852  007CD3  00                 	db	0
   853  007CD4                     STR_27:
   854  007CD4  0A                 	db	10
   855  007CD5  52                 	db	82	;'R'
   856  007CD6  65                 	db	101	;'e'
   857  007CD7  67                 	db	103	;'g'
   858  007CD8  5F                 	db	95	;'_'
   859  007CD9  41                 	db	65	;'A'
   860  007CDA  64                 	db	100	;'d'
   861  007CDB  64                 	db	100	;'d'
   862  007CDC  72                 	db	114	;'r'
   863  007CDD  65                 	db	101	;'e'
   864  007CDE  73                 	db	115	;'s'
   865  007CDF  73                 	db	115	;'s'
   866  007CE0  20                 	db	32
   867  007CE1  3D                 	db	61	;'='
   868  007CE2  20                 	db	32
   869  007CE3  64                 	db	100	;'d'
   870  007CE4  65                 	db	101	;'e'
   871  007CE5  63                 	db	99	;'c'
   872  007CE6  69                 	db	105	;'i'
   873  007CE7  6D                 	db	109	;'m'
   874  007CE8  61                 	db	97	;'a'
   875  007CE9  6C                 	db	108	;'l'
   876  007CEA  20                 	db	32
   877  007CEB  72                 	db	114	;'r'
   878  007CEC  65                 	db	101	;'e'
   879  007CED  67                 	db	103	;'g'
   880  007CEE  69                 	db	105	;'i'
   881  007CEF  73                 	db	115	;'s'
   882  007CF0  74                 	db	116	;'t'
   883  007CF1  65                 	db	101	;'e'
   884  007CF2  72                 	db	114	;'r'
   885  007CF3  20                 	db	32
   886  007CF4  61                 	db	97	;'a'
   887  007CF5  64                 	db	100	;'d'
   888  007CF6  64                 	db	100	;'d'
   889  007CF7  72                 	db	114	;'r'
   890  007CF8  65                 	db	101	;'e'
   891  007CF9  73                 	db	115	;'s'
   892  007CFA  73                 	db	115	;'s'
   893  007CFB  00                 	db	0
   894  007CFC                     STR_28:
   895  007CFC  0A                 	db	10
   896  007CFD  52                 	db	82	;'R'
   897  007CFE  65                 	db	101	;'e'
   898  007CFF  67                 	db	103	;'g'
   899  007D00  5F                 	db	95	;'_'
   900  007D01  56                 	db	86	;'V'
   901  007D02  61                 	db	97	;'a'
   902  007D03  6C                 	db	108	;'l'
   903  007D04  75                 	db	117	;'u'
   904  007D05  65                 	db	101	;'e'
   905  007D06  20                 	db	32
   906  007D07  3D                 	db	61	;'='
   907  007D08  20                 	db	32
   908  007D09  64                 	db	100	;'d'
   909  007D0A  65                 	db	101	;'e'
   910  007D0B  63                 	db	99	;'c'
   911  007D0C  69                 	db	105	;'i'
   912  007D0D  6D                 	db	109	;'m'
   913  007D0E  61                 	db	97	;'a'
   914  007D0F  6C                 	db	108	;'l'
   915  007D10  20                 	db	32
   916  007D11  72                 	db	114	;'r'
   917  007D12  65                 	db	101	;'e'
   918  007D13  67                 	db	103	;'g'
   919  007D14  69                 	db	105	;'i'
   920  007D15  73                 	db	115	;'s'
   921  007D16  74                 	db	116	;'t'
   922  007D17  65                 	db	101	;'e'
   923  007D18  72                 	db	114	;'r'
   924  007D19  20                 	db	32
   925  007D1A  76                 	db	118	;'v'
   926  007D1B  61                 	db	97	;'a'
   927  007D1C  6C                 	db	108	;'l'
   928  007D1D  75                 	db	117	;'u'
   929  007D1E  65                 	db	101	;'e'
   930  007D1F  00                 	db	0
   931  007D20                     STR_23:
   932  007D20  0A                 	db	10
   933  007D21  0A                 	db	10
   934  007D22  49                 	db	73	;'I'
   935  007D23  32                 	db	50	;'2'
   936  007D24  43                 	db	67	;'C'
   937  007D25  20                 	db	32
   938  007D26  69                 	db	105	;'i'
   939  007D27  6E                 	db	110	;'n'
   940  007D28  74                 	db	116	;'t'
   941  007D29  65                 	db	101	;'e'
   942  007D2A  72                 	db	114	;'r'
   943  007D2B  66                 	db	102	;'f'
   944  007D2C  61                 	db	97	;'a'
   945  007D2D  63                 	db	99	;'c'
   946  007D2E  65                 	db	101	;'e'
   947  007D2F  20                 	db	32
   948  007D30  66                 	db	102	;'f'
   949  007D31  6F                 	db	111	;'o'
   950  007D32  72                 	db	114	;'r'
   951  007D33  20                 	db	32
   952  007D34  74                 	db	116	;'t'
   953  007D35  68                 	db	104	;'h'
   954  007D36  65                 	db	101	;'e'
   955  007D37  20                 	db	32
   956  007D38  54                 	db	84	;'T'
   957  007D39  41                 	db	65	;'A'
   958  007D3A  53                 	db	83	;'S'
   959  007D3B  32                 	db	50	;'2'
   960  007D3C  35                 	db	53	;'5'
   961  007D3D  32                 	db	50	;'2'
   962  007D3E  31                 	db	49	;'1'
   963  007D3F  00                 	db	0
   964  007D40                     STR_59:
   965  007D40  0A                 	db	10
   966  007D41  43                 	db	67	;'C'
   967  007D42  6F                 	db	111	;'o'
   968  007D43  6D                 	db	109	;'m'
   969  007D44  6D                 	db	109	;'m'
   970  007D45  61                 	db	97	;'a'
   971  007D46  6E                 	db	110	;'n'
   972  007D47  64                 	db	100	;'d'
   973  007D48  20                 	db	32
   974  007D49  3D                 	db	61	;'='
   975  007D4A  20                 	db	32
   976  007D4B  52                 	db	82	;'R'
   977  007D4C  65                 	db	101	;'e'
   978  007D4D  61                 	db	97	;'a'
   979  007D4E  64                 	db	100	;'d'
   980  007D4F  2C                 	db	44
   981  007D50  20                 	db	32
   982  007D51  53                 	db	83	;'S'
   983  007D52  74                 	db	116	;'t'
   984  007D53  72                 	db	114	;'r'
   985  007D54  65                 	db	101	;'e'
   986  007D55  61                 	db	97	;'a'
   987  007D56  6D                 	db	109	;'m'
   988  007D57  2C                 	db	44
   989  007D58  20                 	db	32
   990  007D59  45                 	db	69	;'E'
   991  007D5A  78                 	db	120	;'x'
   992  007D5B  69                 	db	105	;'i'
   993  007D5C  74                 	db	116	;'t'
   994  007D5D  00                 	db	0
   995  007D5E                     STR_42:
   996  007D5E  0A                 	db	10
   997  007D5F  43                 	db	67	;'C'
   998  007D60  61                 	db	97	;'a'
   999  007D61  6E                 	db	110	;'n'
  1000  007D62  20                 	db	32
  1001  007D63  52                 	db	82	;'R'
  1002  007D64  65                 	db	101	;'e'
  1003  007D65  61                 	db	97	;'a'
  1004  007D66  64                 	db	100	;'d'
  1005  007D67  20                 	db	32
  1006  007D68  50                 	db	80	;'P'
  1007  007D69  65                 	db	101	;'e'
  1008  007D6A  72                 	db	114	;'r'
  1009  007D6B  63                 	db	99	;'c'
  1010  007D6C  65                 	db	101	;'e'
  1011  007D6D  6E                 	db	110	;'n'
  1012  007D6E  74                 	db	116	;'t'
  1013  007D6F  20                 	db	32
  1014  007D70  6F                 	db	111	;'o'
  1015  007D71  72                 	db	114	;'r'
  1016  007D72  20                 	db	32
  1017  007D73  56                 	db	86	;'V'
  1018  007D74  6F                 	db	111	;'o'
  1019  007D75  6C                 	db	108	;'l'
  1020  007D76  74                 	db	116	;'t'
  1021  007D77  61                 	db	97	;'a'
  1022  007D78  67                 	db	103	;'g'
  1023  007D79  65                 	db	101	;'e'
  1024  007D7A  00                 	db	0
  1025  007D7B                     STR_41:
  1026  007D7B  0A                 	db	10
  1027  007D7C  43                 	db	67	;'C'
  1028  007D7D  6F                 	db	111	;'o'
  1029  007D7E  6D                 	db	109	;'m'
  1030  007D7F  6D                 	db	109	;'m'
  1031  007D80  61                 	db	97	;'a'
  1032  007D81  6E                 	db	110	;'n'
  1033  007D82  64                 	db	100	;'d'
  1034  007D83  20                 	db	32
  1035  007D84  3D                 	db	61	;'='
  1036  007D85  20                 	db	32
  1037  007D86  57                 	db	87	;'W'
  1038  007D87  72                 	db	114	;'r'
  1039  007D88  69                 	db	105	;'i'
  1040  007D89  74                 	db	116	;'t'
  1041  007D8A  65                 	db	101	;'e'
  1042  007D8B  2C                 	db	44
  1043  007D8C  20                 	db	32
  1044  007D8D  52                 	db	82	;'R'
  1045  007D8E  65                 	db	101	;'e'
  1046  007D8F  61                 	db	97	;'a'
  1047  007D90  64                 	db	100	;'d'
  1048  007D91  2C                 	db	44
  1049  007D92  20                 	db	32
  1050  007D93  45                 	db	69	;'E'
  1051  007D94  78                 	db	120	;'x'
  1052  007D95  69                 	db	105	;'i'
  1053  007D96  74                 	db	116	;'t'
  1054  007D97  00                 	db	0
  1055  007D98                     STR_4:
  1056  007D98  33                 	db	51	;'3'
  1057  007D99  3A                 	db	58	;':'
  1058  007D9A  20                 	db	32
  1059  007D9B  4D                 	db	77	;'M'
  1060  007D9C  41                 	db	65	;'A'
  1061  007D9D  58                 	db	88	;'X'
  1062  007D9E  31                 	db	49	;'1'
  1063  007D9F  37                 	db	55	;'7'
  1064  007DA0  30                 	db	48	;'0'
  1065  007DA1  34                 	db	52	;'4'
  1066  007DA2  38                 	db	56	;'8'
  1067  007DA3  20                 	db	32
  1068  007DA4  63                 	db	99	;'c'
  1069  007DA5  6F                 	db	111	;'o'
  1070  007DA6  6D                 	db	109	;'m'
  1071  007DA7  6D                 	db	109	;'m'
  1072  007DA8  75                 	db	117	;'u'
  1073  007DA9  6E                 	db	110	;'n'
  1074  007DAA  69                 	db	105	;'i'
  1075  007DAB  63                 	db	99	;'c'
  1076  007DAC  61                 	db	97	;'a'
  1077  007DAD  74                 	db	116	;'t'
  1078  007DAE  69                 	db	105	;'i'
  1079  007DAF  6F                 	db	111	;'o'
  1080  007DB0  6E                 	db	110	;'n'
  1081  007DB1  0A                 	db	10
  1082  007DB2  00                 	db	0
  1083  007DB3                     STR_3:
  1084  007DB3  32                 	db	50	;'2'
  1085  007DB4  3A                 	db	58	;':'
  1086  007DB5  20                 	db	32
  1087  007DB6  54                 	db	84	;'T'
  1088  007DB7  41                 	db	65	;'A'
  1089  007DB8  53                 	db	83	;'S'
  1090  007DB9  32                 	db	50	;'2'
  1091  007DBA  35                 	db	53	;'5'
  1092  007DBB  32                 	db	50	;'2'
  1093  007DBC  31                 	db	49	;'1'
  1094  007DBD  20                 	db	32
  1095  007DBE  63                 	db	99	;'c'
  1096  007DBF  6F                 	db	111	;'o'
  1097  007DC0  6D                 	db	109	;'m'
  1098  007DC1  6D                 	db	109	;'m'
  1099  007DC2  75                 	db	117	;'u'
  1100  007DC3  6E                 	db	110	;'n'
  1101  007DC4  69                 	db	105	;'i'
  1102  007DC5  63                 	db	99	;'c'
  1103  007DC6  61                 	db	97	;'a'
  1104  007DC7  74                 	db	116	;'t'
  1105  007DC8  69                 	db	105	;'i'
  1106  007DC9  6F                 	db	111	;'o'
  1107  007DCA  6E                 	db	110	;'n'
  1108  007DCB  0A                 	db	10
  1109  007DCC  00                 	db	0
  1110  007DCD                     STR_10:
  1111  007DCD  0A                 	db	10
  1112  007DCE  0A                 	db	10
  1113  007DCF  51                 	db	81	;'Q'
  1114  007DD0  75                 	db	117	;'u'
  1115  007DD1  69                 	db	105	;'i'
  1116  007DD2  74                 	db	116	;'t'
  1117  007DD3  74                 	db	116	;'t'
  1118  007DD4  69                 	db	105	;'i'
  1119  007DD5  6E                 	db	110	;'n'
  1120  007DD6  67                 	db	103	;'g'
  1121  007DD7  20                 	db	32
  1122  007DD8  41                 	db	65	;'A'
  1123  007DD9  70                 	db	112	;'p'
  1124  007DDA  70                 	db	112	;'p'
  1125  007DDB  6C                 	db	108	;'l'
  1126  007DDC  69                 	db	105	;'i'
  1127  007DDD  63                 	db	99	;'c'
  1128  007DDE  61                 	db	97	;'a'
  1129  007DDF  74                 	db	116	;'t'
  1130  007DE0  69                 	db	105	;'i'
  1131  007DE1  6F                 	db	111	;'o'
  1132  007DE2  6E                 	db	110	;'n'
  1133  007DE3  2E                 	db	46
  1134  007DE4  2E                 	db	46
  1135  007DE5  2E                 	db	46
  1136  007DE6  00                 	db	0
  1137  007DE7                     STR_68:
  1138  007DE7  0A                 	db	10
  1139  007DE8  0A                 	db	10
  1140  007DE9  42                 	db	66	;'B'
  1141  007DEA  61                 	db	97	;'a'
  1142  007DEB  74                 	db	116	;'t'
  1143  007DEC  74                 	db	116	;'t'
  1144  007DED  65                 	db	101	;'e'
  1145  007DEE  72                 	db	114	;'r'
  1146  007DEF  79                 	db	121	;'y'
  1147  007DF0  20                 	db	32
  1148  007DF1  44                 	db	68	;'D'
  1149  007DF2  69                 	db	105	;'i'
  1150  007DF3  73                 	db	115	;'s'
  1151  007DF4  70                 	db	112	;'p'
  1152  007DF5  6C                 	db	108	;'l'
  1153  007DF6  61                 	db	97	;'a'
  1154  007DF7  79                 	db	121	;'y'
  1155  007DF8  20                 	db	32
  1156  007DF9  64                 	db	100	;'d'
  1157  007DFA  65                 	db	101	;'e'
  1158  007DFB  62                 	db	98	;'b'
  1159  007DFC  75                 	db	117	;'u'
  1160  007DFD  67                 	db	103	;'g'
  1161  007DFE  00                 	db	0
  1162  007DFF                     STR_11:
  1163  007DFF  0A                 	db	10
  1164  007E00  0A                 	db	10
  1165  007E01  49                 	db	73	;'I'
  1166  007E02  6E                 	db	110	;'n'
  1167  007E03  76                 	db	118	;'v'
  1168  007E04  61                 	db	97	;'a'
  1169  007E05  6C                 	db	108	;'l'
  1170  007E06  69                 	db	105	;'i'
  1171  007E07  64                 	db	100	;'d'
  1172  007E08  20                 	db	32
  1173  007E09  73                 	db	115	;'s'
  1174  007E0A  65                 	db	101	;'e'
  1175  007E0B  6C                 	db	108	;'l'
  1176  007E0C  65                 	db	101	;'e'
  1177  007E0D  63                 	db	99	;'c'
  1178  007E0E  74                 	db	116	;'t'
  1179  007E0F  69                 	db	105	;'i'
  1180  007E10  6F                 	db	111	;'o'
  1181  007E11  6E                 	db	110	;'n'
  1182  007E12  2E                 	db	46
  1183  007E13  2E                 	db	46
  1184  007E14  2E                 	db	46
  1185  007E15  00                 	db	0
  1186  007E16                     STR_22:
  1187  007E16  0A                 	db	10
  1188  007E17  49                 	db	73	;'I'
  1189  007E18  6E                 	db	110	;'n'
  1190  007E19  76                 	db	118	;'v'
  1191  007E1A  61                 	db	97	;'a'
  1192  007E1B  6C                 	db	108	;'l'
  1193  007E1C  69                 	db	105	;'i'
  1194  007E1D  64                 	db	100	;'d'
  1195  007E1E  20                 	db	32
  1196  007E1F  4C                 	db	76	;'L'
  1197  007E20  45                 	db	69	;'E'
  1198  007E21  44                 	db	68	;'D'
  1199  007E22  20                 	db	32
  1200  007E23  73                 	db	115	;'s'
  1201  007E24  65                 	db	101	;'e'
  1202  007E25  6C                 	db	108	;'l'
  1203  007E26  65                 	db	101	;'e'
  1204  007E27  63                 	db	99	;'c'
  1205  007E28  74                 	db	116	;'t'
  1206  007E29  69                 	db	105	;'i'
  1207  007E2A  6F                 	db	111	;'o'
  1208  007E2B  6E                 	db	110	;'n'
  1209  007E2C  00                 	db	0
  1210  007E2D                     STR_56:
  1211  007E2D  0A                 	db	10
  1212  007E2E  0A                 	db	10
  1213  007E2F  52                 	db	82	;'R'
  1214  007E30  65                 	db	101	;'e'
  1215  007E31  67                 	db	103	;'g'
  1216  007E32  69                 	db	105	;'i'
  1217  007E33  73                 	db	115	;'s'
  1218  007E34  74                 	db	116	;'t'
  1219  007E35  65                 	db	101	;'e'
  1220  007E36  72                 	db	114	;'r'
  1221  007E37  20                 	db	32
  1222  007E38  44                 	db	68	;'D'
  1223  007E39  61                 	db	97	;'a'
  1224  007E3A  74                 	db	116	;'t'
  1225  007E3B  61                 	db	97	;'a'
  1226  007E3C  20                 	db	32
  1227  007E3D  3D                 	db	61	;'='
  1228  007E3E  20                 	db	32
  1229  007E3F  30                 	db	48	;'0'
  1230  007E40  78                 	db	120	;'x'
  1231  007E41  25                 	db	37
  1232  007E42  78                 	db	120	;'x'
  1233  007E43  00                 	db	0
  1234  007E44                     STR_52:
  1235  007E44  0A                 	db	10
  1236  007E45  0A                 	db	10
  1237  007E46  42                 	db	66	;'B'
  1238  007E47  61                 	db	97	;'a'
  1239  007E48  74                 	db	116	;'t'
  1240  007E49  74                 	db	116	;'t'
  1241  007E4A  20                 	db	32
  1242  007E4B  50                 	db	80	;'P'
  1243  007E4C  65                 	db	101	;'e'
  1244  007E4D  72                 	db	114	;'r'
  1245  007E4E  63                 	db	99	;'c'
  1246  007E4F  65                 	db	101	;'e'
  1247  007E50  6E                 	db	110	;'n'
  1248  007E51  74                 	db	116	;'t'
  1249  007E52  20                 	db	32
  1250  007E53  3D                 	db	61	;'='
  1251  007E54  20                 	db	32
  1252  007E55  25                 	db	37
  1253  007E56  64                 	db	100	;'d'
  1254  007E57  0A                 	db	10
  1255  007E58  0A                 	db	10
  1256  007E59  00                 	db	0
  1257  007E5A                     STR_7:
  1258  007E5A  36                 	db	54	;'6'
  1259  007E5B  3A                 	db	58	;':'
  1260  007E5C  20                 	db	32
  1261  007E5D  53                 	db	83	;'S'
  1262  007E5E  63                 	db	99	;'c'
  1263  007E5F  72                 	db	114	;'r'
  1264  007E60  65                 	db	101	;'e'
  1265  007E61  65                 	db	101	;'e'
  1266  007E62  6E                 	db	110	;'n'
  1267  007E63  20                 	db	32
  1268  007E64  42                 	db	66	;'B'
  1269  007E65  72                 	db	114	;'r'
  1270  007E66  69                 	db	105	;'i'
  1271  007E67  67                 	db	103	;'g'
  1272  007E68  68                 	db	104	;'h'
  1273  007E69  74                 	db	116	;'t'
  1274  007E6A  6E                 	db	110	;'n'
  1275  007E6B  65                 	db	101	;'e'
  1276  007E6C  73                 	db	115	;'s'
  1277  007E6D  73                 	db	115	;'s'
  1278  007E6E  0A                 	db	10
  1279  007E6F  00                 	db	0
  1280  007E70                     STR_54:
  1281  007E70  0A                 	db	10
  1282  007E71  0A                 	db	10
  1283  007E72  42                 	db	66	;'B'
  1284  007E73  61                 	db	97	;'a'
  1285  007E74  74                 	db	116	;'t'
  1286  007E75  74                 	db	116	;'t'
  1287  007E76  20                 	db	32
  1288  007E77  56                 	db	86	;'V'
  1289  007E78  6F                 	db	111	;'o'
  1290  007E79  6C                 	db	108	;'l'
  1291  007E7A  74                 	db	116	;'t'
  1292  007E7B  61                 	db	97	;'a'
  1293  007E7C  67                 	db	103	;'g'
  1294  007E7D  65                 	db	101	;'e'
  1295  007E7E  20                 	db	32
  1296  007E7F  3D                 	db	61	;'='
  1297  007E80  20                 	db	32
  1298  007E81  25                 	db	37
  1299  007E82  64                 	db	100	;'d'
  1300  007E83  0A                 	db	10
  1301  007E84  00                 	db	0
  1302  007E85                     STR_69:
  1303  007E85  0A                 	db	10
  1304  007E86  41                 	db	65	;'A'
  1305  007E87  6C                 	db	108	;'l'
  1306  007E88  6C                 	db	108	;'l'
  1307  007E89  6F                 	db	111	;'o'
  1308  007E8A  77                 	db	119	;'w'
  1309  007E8B  65                 	db	101	;'e'
  1310  007E8C  64                 	db	100	;'d'
  1311  007E8D  20                 	db	32
  1312  007E8E  63                 	db	99	;'c'
  1313  007E8F  6F                 	db	111	;'o'
  1314  007E90  6D                 	db	109	;'m'
  1315  007E91  6D                 	db	109	;'m'
  1316  007E92  61                 	db	97	;'a'
  1317  007E93  6E                 	db	110	;'n'
  1318  007E94  64                 	db	100	;'d'
  1319  007E95  73                 	db	115	;'s'
  1320  007E96  3A                 	db	58	;':'
  1321  007E97  20                 	db	32
  1322  007E98  20                 	db	32
  1323  007E99  00                 	db	0
  1324  007E9A                     STR_70:
  1325  007E9A  0A                 	db	10
  1326  007E9B  49                 	db	73	;'I'
  1327  007E9C  20                 	db	32
  1328  007E9D  5B                 	db	91	;'['
  1329  007E9E  62                 	db	98	;'b'
  1330  007E9F  61                 	db	97	;'a'
  1331  007EA0  74                 	db	116	;'t'
  1332  007EA1  74                 	db	116	;'t'
  1333  007EA2  65                 	db	101	;'e'
  1334  007EA3  72                 	db	114	;'r'
  1335  007EA4  79                 	db	121	;'y'
  1336  007EA5  20                 	db	32
  1337  007EA6  70                 	db	112	;'p'
  1338  007EA7  65                 	db	101	;'e'
  1339  007EA8  72                 	db	114	;'r'
  1340  007EA9  63                 	db	99	;'c'
  1341  007EAA  65                 	db	101	;'e'
  1342  007EAB  6E                 	db	110	;'n'
  1343  007EAC  74                 	db	116	;'t'
  1344  007EAD  5D                 	db	93	;']'
  1345  007EAE  00                 	db	0
  1346  007EAF                     STR_6:
  1347  007EAF  35                 	db	53	;'5'
  1348  007EB0  3A                 	db	58	;':'
  1349  007EB1  20                 	db	32
  1350  007EB2  42                 	db	66	;'B'
  1351  007EB3  61                 	db	97	;'a'
  1352  007EB4  74                 	db	116	;'t'
  1353  007EB5  74                 	db	116	;'t'
  1354  007EB6  65                 	db	101	;'e'
  1355  007EB7  72                 	db	114	;'r'
  1356  007EB8  79                 	db	121	;'y'
  1357  007EB9  20                 	db	32
  1358  007EBA  44                 	db	68	;'D'
  1359  007EBB  69                 	db	105	;'i'
  1360  007EBC  73                 	db	115	;'s'
  1361  007EBD  70                 	db	112	;'p'
  1362  007EBE  6C                 	db	108	;'l'
  1363  007EBF  61                 	db	97	;'a'
  1364  007EC0  79                 	db	121	;'y'
  1365  007EC1  0A                 	db	10
  1366  007EC2  00                 	db	0
  1367  007EC3                     STR_72:
  1368  007EC3  0A                 	db	10
  1369  007EC4  58                 	db	88	;'X'
  1370  007EC5  20                 	db	32
  1371  007EC6  5B                 	db	91	;'['
  1372  007EC7  78                 	db	120	;'x'
  1373  007EC8  20                 	db	32
  1374  007EC9  70                 	db	112	;'p'
  1375  007ECA  69                 	db	105	;'i'
  1376  007ECB  78                 	db	120	;'x'
  1377  007ECC  65                 	db	101	;'e'
  1378  007ECD  6C                 	db	108	;'l'
  1379  007ECE  20                 	db	32
  1380  007ECF  6F                 	db	111	;'o'
  1381  007ED0  66                 	db	102	;'f'
  1382  007ED1  66                 	db	102	;'f'
  1383  007ED2  73                 	db	115	;'s'
  1384  007ED3  65                 	db	101	;'e'
  1385  007ED4  74                 	db	116	;'t'
  1386  007ED5  5D                 	db	93	;']'
  1387  007ED6  00                 	db	0
  1388  007ED7                     STR_73:
  1389  007ED7  0A                 	db	10
  1390  007ED8  59                 	db	89	;'Y'
  1391  007ED9  20                 	db	32
  1392  007EDA  5B                 	db	91	;'['
  1393  007EDB  79                 	db	121	;'y'
  1394  007EDC  20                 	db	32
  1395  007EDD  70                 	db	112	;'p'
  1396  007EDE  69                 	db	105	;'i'
  1397  007EDF  78                 	db	120	;'x'
  1398  007EE0  65                 	db	101	;'e'
  1399  007EE1  6C                 	db	108	;'l'
  1400  007EE2  20                 	db	32
  1401  007EE3  6F                 	db	111	;'o'
  1402  007EE4  66                 	db	102	;'f'
  1403  007EE5  66                 	db	102	;'f'
  1404  007EE6  73                 	db	115	;'s'
  1405  007EE7  65                 	db	101	;'e'
  1406  007EE8  74                 	db	116	;'t'
  1407  007EE9  5D                 	db	93	;']'
  1408  007EEA  00                 	db	0
  1409  007EEB                     STR_57:
  1410  007EEB  0A                 	db	10
  1411  007EEC  0A                 	db	10
  1412  007EED  41                 	db	65	;'A'
  1413  007EEE  44                 	db	68	;'D'
  1414  007EEF  43                 	db	67	;'C'
  1415  007EF0  20                 	db	32
  1416  007EF1  44                 	db	68	;'D'
  1417  007EF2  65                 	db	101	;'e'
  1418  007EF3  62                 	db	98	;'b'
  1419  007EF4  75                 	db	117	;'u'
  1420  007EF5  67                 	db	103	;'g'
  1421  007EF6  20                 	db	32
  1422  007EF7  6F                 	db	111	;'o'
  1423  007EF8  70                 	db	112	;'p'
  1424  007EF9  74                 	db	116	;'t'
  1425  007EFA  69                 	db	105	;'i'
  1426  007EFB  6F                 	db	111	;'o'
  1427  007EFC  6E                 	db	110	;'n'
  1428  007EFD  73                 	db	115	;'s'
  1429  007EFE  00                 	db	0
  1430  007EFF                     STR_25:
  1431  007EFF  0A                 	db	10
  1432  007F00  41                 	db	65	;'A'
  1433  007F01  6C                 	db	108	;'l'
  1434  007F02  6C                 	db	108	;'l'
  1435  007F03  6F                 	db	111	;'o'
  1436  007F04  77                 	db	119	;'w'
  1437  007F05  65                 	db	101	;'e'
  1438  007F06  64                 	db	100	;'d'
  1439  007F07  20                 	db	32
  1440  007F08  76                 	db	118	;'v'
  1441  007F09  61                 	db	97	;'a'
  1442  007F0A  6C                 	db	108	;'l'
  1443  007F0B  75                 	db	117	;'u'
  1444  007F0C  65                 	db	101	;'e'
  1445  007F0D  73                 	db	115	;'s'
  1446  007F0E  3A                 	db	58	;':'
  1447  007F0F  20                 	db	32
  1448  007F10  20                 	db	32
  1449  007F11  00                 	db	0
  1450  007F12                     STR_92:
  1451  007F12  30                 	db	48	;'0'
  1452  007F13  31                 	db	49	;'1'
  1453  007F14  32                 	db	50	;'2'
  1454  007F15  33                 	db	51	;'3'
  1455  007F16  34                 	db	52	;'4'
  1456  007F17  35                 	db	53	;'5'
  1457  007F18  36                 	db	54	;'6'
  1458  007F19  37                 	db	55	;'7'
  1459  007F1A  38                 	db	56	;'8'
  1460  007F1B  39                 	db	57	;'9'
  1461  007F1C  61                 	db	97	;'a'
  1462  007F1D  62                 	db	98	;'b'
  1463  007F1E  63                 	db	99	;'c'
  1464  007F1F  64                 	db	100	;'d'
  1465  007F20  65                 	db	101	;'e'
  1466  007F21  66                 	db	102	;'f'
  1467  007F22  00                 	db	0
  1468  007F23                     STR_65:
  1469  007F23  0A                 	db	10
  1470  007F24  43                 	db	67	;'C'
  1471  007F25  6F                 	db	111	;'o'
  1472  007F26  6E                 	db	110	;'n'
  1473  007F27  76                 	db	118	;'v'
  1474  007F28  65                 	db	101	;'e'
  1475  007F29  72                 	db	114	;'r'
  1476  007F2A  73                 	db	115	;'s'
  1477  007F2B  69                 	db	105	;'i'
  1478  007F2C  6F                 	db	111	;'o'
  1479  007F2D  6E                 	db	110	;'n'
  1480  007F2E  20                 	db	32
  1481  007F2F  3D                 	db	61	;'='
  1482  007F30  20                 	db	32
  1483  007F31  25                 	db	37
  1484  007F32  75                 	db	117	;'u'
  1485  007F33  00                 	db	0
  1486  007F34                     STR_2:
  1487  007F34  31                 	db	49	;'1'
  1488  007F35  3A                 	db	58	;':'
  1489  007F36  20                 	db	32
  1490  007F37  4C                 	db	76	;'L'
  1491  007F38  45                 	db	69	;'E'
  1492  007F39  44                 	db	68	;'D'
  1493  007F3A  20                 	db	32
  1494  007F3B  43                 	db	67	;'C'
  1495  007F3C  6F                 	db	111	;'o'
  1496  007F3D  6E                 	db	110	;'n'
  1497  007F3E  74                 	db	116	;'t'
  1498  007F3F  72                 	db	114	;'r'
  1499  007F40  6F                 	db	111	;'o'
  1500  007F41  6C                 	db	108	;'l'
  1501  007F42  0A                 	db	10
  1502  007F43  00                 	db	0
  1503  007F44                     STR_88:
  1504  007F44  0A                 	db	10
  1505  007F45  50                 	db	80	;'P'
  1506  007F46  57                 	db	87	;'W'
  1507  007F47  4D                 	db	77	;'M'
  1508  007F48  20                 	db	32
  1509  007F49  56                 	db	86	;'V'
  1510  007F4A  61                 	db	97	;'a'
  1511  007F4B  6C                 	db	108	;'l'
  1512  007F4C  75                 	db	117	;'u'
  1513  007F4D  65                 	db	101	;'e'
  1514  007F4E  3A                 	db	58	;':'
  1515  007F4F  20                 	db	32
  1516  007F50  20                 	db	32
  1517  007F51  00                 	db	0
  1518  007F52                     STR_90:
  1519  007F52  0A                 	db	10
  1520  007F53  56                 	db	86	;'V'
  1521  007F54  6F                 	db	111	;'o'
  1522  007F55  6C                 	db	108	;'l'
  1523  007F56  75                 	db	117	;'u'
  1524  007F57  6D                 	db	109	;'m'
  1525  007F58  65                 	db	101	;'e'
  1526  007F59  20                 	db	32
  1527  007F5A  3D                 	db	61	;'='
  1528  007F5B  20                 	db	32
  1529  007F5C  25                 	db	37
  1530  007F5D  64                 	db	100	;'d'
  1531  007F5E  00                 	db	0
  1532  007F5F                     STR_9:
  1533  007F5F  53                 	db	83	;'S'
  1534  007F60  65                 	db	101	;'e'
  1535  007F61  6C                 	db	108	;'l'
  1536  007F62  65                 	db	101	;'e'
  1537  007F63  63                 	db	99	;'c'
  1538  007F64  74                 	db	116	;'t'
  1539  007F65  69                 	db	105	;'i'
  1540  007F66  6F                 	db	111	;'o'
  1541  007F67  6E                 	db	110	;'n'
  1542  007F68  3A                 	db	58	;':'
  1543  007F69  20                 	db	32
  1544  007F6A  20                 	db	32
  1545  007F6B  00                 	db	0
  1546  007F6C                     STR_31:
  1547  007F6C  0A                 	db	10
  1548  007F6D  0A                 	db	10
  1549  007F6E  43                 	db	67	;'C'
  1550  007F6F  6F                 	db	111	;'o'
  1551  007F70  6D                 	db	109	;'m'
  1552  007F71  6D                 	db	109	;'m'
  1553  007F72  61                 	db	97	;'a'
  1554  007F73  6E                 	db	110	;'n'
  1555  007F74  64                 	db	100	;'d'
  1556  007F75  3A                 	db	58	;':'
  1557  007F76  20                 	db	32
  1558  007F77  00                 	db	0
  1559  007F78                     STR_8:
  1560  007F78  58                 	db	88	;'X'
  1561  007F79  3A                 	db	58	;':'
  1562  007F7A  20                 	db	32
  1563  007F7B  20                 	db	32
  1564  007F7C  45                 	db	69	;'E'
  1565  007F7D  78                 	db	120	;'x'
  1566  007F7E  69                 	db	105	;'i'
  1567  007F7F  74                 	db	116	;'t'
  1568  007F80  0A                 	db	10
  1569  007F81  0A                 	db	10
  1570  007F82  00                 	db	0
  1571  007F83                     STR_17:
  1572  007F83  0A                 	db	10
  1573  007F84  74                 	db	116	;'t'
  1574  007F85  6F                 	db	111	;'o'
  1575  007F86  6B                 	db	107	;'k'
  1576  007F87  65                 	db	101	;'e'
  1577  007F88  6E                 	db	110	;'n'
  1578  007F89  3D                 	db	61	;'='
  1579  007F8A  25                 	db	37
  1580  007F8B  73                 	db	115	;'s'
  1581  007F8C  0A                 	db	10
  1582  007F8D  00                 	db	0
  1583  007F8E                     STR_71:
  1584  007F8E  0A                 	db	10
  1585  007F8F  44                 	db	68	;'D'
  1586  007F90  20                 	db	32
  1587  007F91  5B                 	db	91	;'['
  1588  007F92  31                 	db	49	;'1'
  1589  007F93  2C                 	db	44
  1590  007F94  20                 	db	32
  1591  007F95  30                 	db	48	;'0'
  1592  007F96  5D                 	db	93	;']'
  1593  007F97  00                 	db	0
  1594  007F98                     STR_16:
  1595  007F98  0A                 	db	10
  1596  007F99  74                 	db	116	;'t'
  1597  007F9A  6F                 	db	111	;'o'
  1598  007F9B  6B                 	db	107	;'k'
  1599  007F9C  65                 	db	101	;'e'
  1600  007F9D  6E                 	db	110	;'n'
  1601  007F9E  3D                 	db	61	;'='
  1602  007F9F  25                 	db	37
  1603  007FA0  73                 	db	115	;'s'
  1604  007FA1  00                 	db	0
  1605  007FA2                     STR_5:
  1606  007FA2  34                 	db	52	;'4'
  1607  007FA3  3A                 	db	58	;':'
  1608  007FA4  20                 	db	32
  1609  007FA5  41                 	db	65	;'A'
  1610  007FA6  44                 	db	68	;'D'
  1611  007FA7  43                 	db	67	;'C'
  1612  007FA8  0A                 	db	10
  1613  007FA9  00                 	db	0
  1614  007FAA                     STR_37:
  1615  007FAA  44                 	db	68	;'D'
  1616  007FAB  69                 	db	105	;'i'
  1617  007FAC  73                 	db	115	;'s'
  1618  007FAD  61                 	db	97	;'a'
  1619  007FAE  62                 	db	98	;'b'
  1620  007FAF  6C                 	db	108	;'l'
  1621  007FB0  65                 	db	101	;'e'
  1622  007FB1  00                 	db	0
  1623  007FB2                     STR_51:
  1624  007FB2  50                 	db	80	;'P'
  1625  007FB3  65                 	db	101	;'e'
  1626  007FB4  72                 	db	114	;'r'
  1627  007FB5  63                 	db	99	;'c'
  1628  007FB6  65                 	db	101	;'e'
  1629  007FB7  6E                 	db	110	;'n'
  1630  007FB8  74                 	db	116	;'t'
  1631  007FB9  00                 	db	0
  1632  007FBA                     STR_91:
  1633  007FBA  28                 	db	40
  1634  007FBB  6E                 	db	110	;'n'
  1635  007FBC  75                 	db	117	;'u'
  1636  007FBD  6C                 	db	108	;'l'
  1637  007FBE  6C                 	db	108	;'l'
  1638  007FBF  29                 	db	41
  1639  007FC0  00                 	db	0
  1640  007FC1                     STR_36:
  1641  007FC1  45                 	db	69	;'E'
  1642  007FC2  6E                 	db	110	;'n'
  1643  007FC3  61                 	db	97	;'a'
  1644  007FC4  62                 	db	98	;'b'
  1645  007FC5  6C                 	db	108	;'l'
  1646  007FC6  65                 	db	101	;'e'
  1647  007FC7  00                 	db	0
  1648  007FC8                     STR_66:
  1649  007FC8  53                 	db	83	;'S'
  1650  007FC9  74                 	db	116	;'t'
  1651  007FCA  72                 	db	114	;'r'
  1652  007FCB  65                 	db	101	;'e'
  1653  007FCC  61                 	db	97	;'a'
  1654  007FCD  6D                 	db	109	;'m'
  1655  007FCE  00                 	db	0
  1656  007FCF                     STR_34:
  1657  007FCF  57                 	db	87	;'W'
  1658  007FD0  72                 	db	114	;'r'
  1659  007FD1  69                 	db	105	;'i'
  1660  007FD2  74                 	db	116	;'t'
  1661  007FD3  65                 	db	101	;'e'
  1662  007FD4  00                 	db	0
  1663  007FD5                     STR_74:
  1664  007FD5  0A                 	db	10
  1665  007FD6  45                 	db	69	;'E'
  1666  007FD7  63                 	db	99	;'c'
  1667  007FD8  68                 	db	104	;'h'
  1668  007FD9  6F                 	db	111	;'o'
  1669  007FDA  00                 	db	0
  1670  007FDB                     STR_75:
  1671  007FDB  0A                 	db	10
  1672  007FDC  45                 	db	69	;'E'
  1673  007FDD  78                 	db	120	;'x'
  1674  007FDE  69                 	db	105	;'i'
  1675  007FDF  74                 	db	116	;'t'
  1676  007FE0  00                 	db	0
  1677  007FE1                     STR_35:
  1678  007FE1  52                 	db	82	;'R'
  1679  007FE2  65                 	db	101	;'e'
  1680  007FE3  61                 	db	97	;'a'
  1681  007FE4  64                 	db	100	;'d'
  1682  007FE5  00                 	db	0
  1683  007FE6                     STR_18:
  1684  007FE6  42                 	db	66	;'B'
  1685  007FE7  6C                 	db	108	;'l'
  1686  007FE8  75                 	db	117	;'u'
  1687  007FE9  65                 	db	101	;'e'
  1688  007FEA  00                 	db	0
  1689  007FEB                     STR_12:
  1690  007FEB  0A                 	db	10
  1691  007FEC  0A                 	db	10
  1692  007FED  0A                 	db	10
  1693  007FEE  00                 	db	0
  1694  007FEF                     STR_20:
  1695  007FEF  52                 	db	82	;'R'
  1696  007FF0  65                 	db	101	;'e'
  1697  007FF1  64                 	db	100	;'d'
  1698  007FF2  00                 	db	0
  1699  007FF3                     STR_19:
  1700  007FF3  4F                 	db	79	;'O'
  1701  007FF4  4E                 	db	78	;'N'
  1702  007FF5  00                 	db	0
  1703  007FF6                     STR_81:
  1704  007FF6  44                 	db	68	;'D'
  1705  007FF7  00                 	db	0
  1706  007FF8                     STR_80:
  1707  007FF8  49                 	db	73	;'I'
  1708  007FF9  00                 	db	0
  1709  007FFA                     STR_82:
  1710  007FFA  58                 	db	88	;'X'
  1711  007FFB  00                 	db	0
  1712  007FFC                     STR_83:
  1713  007FFC  59                 	db	89	;'Y'
  1714  007FFD  00                 	db	0
  1715  0000                     
  1716                           ; #config settings
  1717  007FFE  00                 	db	0	; dummy byte at the end
  1718  0000                     
  1719                           	psect	nvCOMRAM
  1720  000048                     __pnvCOMRAM:
  1721                           	opt stack 0
  1722  000048                     _timer1ReloadVal:
  1723                           	opt stack 0
  1724  000048                     	ds	2
  1725  00004A                     _timer3ReloadVal:
  1726                           	opt stack 0
  1727  00004A                     	ds	2
  1728                           
  1729                           	psect	nvBANK1
  1730  0001E9                     __pnvBANK1:
  1731                           	opt stack 0
  1732  0001E9                     _INT0_InterruptHandler:
  1733                           	opt stack 0
  1734  0001E9                     	ds	2
  1735  0001EB                     _INT1_InterruptHandler:
  1736                           	opt stack 0
  1737  0001EB                     	ds	2
  1738  0001ED                     _INT2_InterruptHandler:
  1739                           	opt stack 0
  1740  0001ED                     	ds	2
  1741  0001EF                     _INT3_InterruptHandler:
  1742                           	opt stack 0
  1743  0001EF                     	ds	2
  1744  0001F1                     _TMR1_InterruptHandler:
  1745                           	opt stack 0
  1746  0001F1                     	ds	2
  1747  0001F3                     _TMR3_InterruptHandler:
  1748                           	opt stack 0
  1749  0001F3                     	ds	2
  1750  0001F5                     _Startup_Count_Enable:
  1751                           	opt stack 0
  1752  0001F5                     	ds	1
  1753  0001F6                     _eusart1TxBufferRemaining:
  1754                           	opt stack 0
  1755  0001F6                     	ds	1
  1756  0001F7                     _eusart2TxBufferRemaining:
  1757                           	opt stack 0
  1758  0001F7                     	ds	1
  1759  0000                     _ANCON0	set	3933
  1760  0000                     _ANCON0bits	set	3933
  1761  0000                     _ANCON1	set	3932
  1762  0000                     _WPUB	set	3931
  1763  0000                     _WPUBbits	set	3931
  1764  0000                     _ADCON0	set	4034
  1765  0000                     _ADCON0bits	set	4034
  1766  0000                     _ADCON1	set	4033
  1767  0000                     _ADCON2	set	4032
  1768  0000                     _ADRESH	set	4036
  1769  0000                     _ADRESL	set	4035
  1770  0000                     _BAUDCON1	set	4007
  1771  0000                     _BAUDCON2	set	4025
  1772  0000                     _CCP1CON	set	4027
  1773  0000                     _CCPR1H	set	4029
  1774  0000                     _CCPR1L	set	4028
  1775  0000                     _CCPTMRSbits	set	3993
  1776  0000                     _ECCP1AS	set	4031
  1777  0000                     _ECCP1DEL	set	4030
  1778  0000                     _EEADR	set	3956
  1779  0000                     _EEADRH	set	3957
  1780  0000                     _EECON1bits	set	3967
  1781  0000                     _EECON2	set	3966
  1782  0000                     _EEDATA	set	3955
  1783  0000                     _INTCON2bits	set	4081
  1784  0000                     _INTCON3bits	set	4080
  1785  0000                     _INTCONbits	set	4082
  1786  0000                     _LATA	set	3977
  1787  0000                     _LATAbits	set	3977
  1788  0000                     _LATB	set	3978
  1789  0000                     _LATC	set	3979
  1790  0000                     _LATCbits	set	3979
  1791  0000                     _OSCCON	set	4051
  1792  0000                     _OSCCON2	set	4050
  1793  0000                     _OSCTUNE	set	3995
  1794  0000                     _PIE1bits	set	3997
  1795  0000                     _PIE2bits	set	4000
  1796  0000                     _PIE3bits	set	4003
  1797  0000                     _PIR1bits	set	3998
  1798  0000                     _PIR2bits	set	4001
  1799  0000                     _PIR3bits	set	4004
  1800  0000                     _PIR4bits	set	4023
  1801  0000                     _PORTAbits	set	3968
  1802  0000                     _PORTBbits	set	3969
  1803  0000                     _PORTCbits	set	3970
  1804  0000                     _PR2	set	4043
  1805  0000                     _PSTR1CON	set	3996
  1806  0000                     _PSTR1CONbits	set	3996
  1807  0000                     _RCONbits	set	4048
  1808  0000                     _RCREG1	set	4014
  1809  0000                     _RCREG2	set	3962
  1810  0000                     _RCSTA1	set	4011
  1811  0000                     _RCSTA1bits	set	4011
  1812  0000                     _RCSTA2	set	4006
  1813  0000                     _RCSTA2bits	set	4006
  1814  0000                     _REFOCON	set	3994
  1815  0000                     _SPBRG1	set	4015
  1816  0000                     _SPBRG2	set	3963
  1817  0000                     _SPBRGH1	set	3965
  1818  0000                     _SPBRGH2	set	3964
  1819  0000                     _SSPADD	set	4040
  1820  0000                     _SSPBUF	set	4041
  1821  0000                     _SSPCON1	set	4038
  1822  0000                     _SSPCON1bits	set	4038
  1823  0000                     _SSPCON2bits	set	4037
  1824  0000                     _SSPSTAT	set	4039
  1825  0000                     _T1CON	set	4045
  1826  0000                     _T1CONbits	set	4045
  1827  0000                     _T1GCON	set	4010
  1828  0000                     _T1GCONbits	set	4010
  1829  0000                     _T2CON	set	4042
  1830  0000                     _T2CONbits	set	4042
  1831  0000                     _T3CON	set	4017
  1832  0000                     _T3CONbits	set	4017
  1833  0000                     _T3GCON	set	4016
  1834  0000                     _T3GCONbits	set	4016
  1835  0000                     _TABLAT	set	4085
  1836  0000                     _TBLPTRH	set	4087
  1837  0000                     _TBLPTRL	set	4086
  1838  0000                     _TBLPTRU	set	4088
  1839  0000                     _TMR1H	set	4047
  1840  0000                     _TMR1L	set	4046
  1841  0000                     _TMR2	set	4044
  1842  0000                     _TMR3H	set	4019
  1843  0000                     _TMR3L	set	4018
  1844  0000                     _TRISA	set	3986
  1845  0000                     _TRISAbits	set	3986
  1846  0000                     _TRISB	set	3987
  1847  0000                     _TRISBbits	set	3987
  1848  0000                     _TRISC	set	3988
  1849  0000                     _TRISCbits	set	3988
  1850  0000                     _TXREG1	set	4013
  1851  0000                     _TXREG2	set	3961
  1852  0000                     _TXSTA1	set	4012
  1853  0000                     _TXSTA2	set	4026
  1854                           
  1855                           	psect	cinit
  1856  001A60                     __pcinit:
  1857                           	opt stack 0
  1858  001A60                     start_initialization:
  1859                           	opt stack 0
  1860  001A60                     __initialization:
  1861                           	opt stack 0
  1862                           
  1863                           ; Initialize objects allocated to BANK1 (24 bytes)
  1864                           ; load TBLPTR registers with __pidataBANK1
  1865  001A60  0E1C               	movlw	low __pidataBANK1
  1866  001A62  6EF6               	movwf	tblptrl,c
  1867  001A64  0E29               	movlw	high __pidataBANK1
  1868  001A66  6EF7               	movwf	tblptrh,c
  1869  001A68  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1870  001A6A  6EF8               	movwf	tblptru,c
  1871  001A6C  EE01  F0D1         	lfsr	0,__pdataBANK1
  1872  001A70  EE10 F018          	lfsr	1,24
  1873  001A74                     copy_data0:
  1874  001A74  0009               	tblrd		*+
  1875  001A76  CFF5 FFEE          	movff	tablat,postinc0
  1876  001A7A  50E5               	movf	postdec1,w,c
  1877  001A7C  50E1               	movf	fsr1l,w,c
  1878  001A7E  E1FA               	bnz	copy_data0
  1879                           
  1880                           ; Initialize objects allocated to BANK0 (6 bytes)
  1881                           ; load TBLPTR registers with __pidataBANK0
  1882  001A80  0E10               	movlw	low __pidataBANK0
  1883  001A82  6EF6               	movwf	tblptrl,c
  1884  001A84  0E2A               	movlw	high __pidataBANK0
  1885  001A86  6EF7               	movwf	tblptrh,c
  1886  001A88  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1887  001A8A  6EF8               	movwf	tblptru,c
  1888  001A8C  EE00  F0BC         	lfsr	0,__pdataBANK0
  1889  001A90  EE10 F006          	lfsr	1,6
  1890  001A94                     copy_data1:
  1891  001A94  0009               	tblrd		*+
  1892  001A96  CFF5 FFEE          	movff	tablat,postinc0
  1893  001A9A  50E5               	movf	postdec1,w,c
  1894  001A9C  50E1               	movf	fsr1l,w,c
  1895  001A9E  E1FA               	bnz	copy_data1
  1896                           
  1897                           ; Initialize objects allocated to COMRAM (5 bytes)
  1898                           ; load TBLPTR registers with __pidataCOMRAM
  1899  001AA0  0E16               	movlw	low __pidataCOMRAM
  1900  001AA2  6EF6               	movwf	tblptrl,c
  1901  001AA4  0E2A               	movlw	high __pidataCOMRAM
  1902  001AA6  6EF7               	movwf	tblptrh,c
  1903  001AA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1904  001AAA  6EF8               	movwf	tblptru,c
  1905  001AAC  EE00  F043         	lfsr	0,__pdataCOMRAM
  1906  001AB0  EE10 F005          	lfsr	1,5
  1907  001AB4                     copy_data2:
  1908  001AB4  0009               	tblrd		*+
  1909  001AB6  CFF5 FFEE          	movff	tablat,postinc0
  1910  001ABA  50E5               	movf	postdec1,w,c
  1911  001ABC  50E1               	movf	fsr1l,w,c
  1912  001ABE  E1FA               	bnz	copy_data2
  1913                           
  1914                           ; Clear objects allocated to BANK1 (209 bytes)
  1915  001AC0  EE01  F000         	lfsr	0,__pbssBANK1
  1916  001AC4  0ED1               	movlw	209
  1917  001AC6                     clear_0:
  1918  001AC6  6AEE               	clrf	postinc0,c
  1919  001AC8  06E8               	decf	wreg,f,c
  1920  001ACA  E1FD               	bnz	clear_0
  1921                           
  1922                           ; Clear objects allocated to BANK0 (17 bytes)
  1923  001ACC  EE00  F0AB         	lfsr	0,__pbssBANK0
  1924  001AD0  0E11               	movlw	17
  1925  001AD2                     clear_1:
  1926  001AD2  6AEE               	clrf	postinc0,c
  1927  001AD4  06E8               	decf	wreg,f,c
  1928  001AD6  E1FD               	bnz	clear_1
  1929                           
  1930                           ; Clear objects allocated to COMRAM (32 bytes)
  1931  001AD8  EE00  F023         	lfsr	0,__pbssCOMRAM
  1932  001ADC  0E20               	movlw	32
  1933  001ADE                     clear_2:
  1934  001ADE  6AEE               	clrf	postinc0,c
  1935  001AE0  06E8               	decf	wreg,f,c
  1936  001AE2  E1FD               	bnz	clear_2
  1937  001AE4                     end_of_initialization:
  1938                           	opt stack 0
  1939  001AE4                     __end_of__initialization:
  1940                           	opt stack 0
  1941  001AE4  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1942  001AE6  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1943  001AE8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1944  001AEA  6EF8               	movwf	tblptru,c
  1945  001AEC  0100               	movlb	0
  1946  001AEE  EF2C  F00C         	goto	_main	;jump to C main() function
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postdec1	equ	0xFE5
  1954                           fsr1l	equ	0xFE1
  1955                           
  1956                           	psect	bssCOMRAM
  1957  000023                     __pbssCOMRAM:
  1958                           	opt stack 0
  1959  000023                     _counter:
  1960                           	opt stack 0
  1961  000023                     	ds	2
  1962  000025                     I2C_ISR@i2c_10bit_address_restart:
  1963                           	opt stack 0
  1964  000025                     	ds	1
  1965  000026                     I2C_ISR@i2c_bytes_left:
  1966                           	opt stack 0
  1967  000026                     	ds	1
  1968  000027                     _ADC_Data:
  1969                           	opt stack 0
  1970  000027                     	ds	1
  1971  000028                     _ADC_Data_Ready:
  1972                           	opt stack 0
  1973  000028                     	ds	1
  1974  000029                     _Battery_Displayed:
  1975                           	opt stack 0
  1976  000029                     	ds	1
  1977  00002A                     _Battery_Timer:
  1978                           	opt stack 0
  1979  00002A                     	ds	1
  1980  00002B                     _Blue_Blink_Timer:
  1981                           	opt stack 0
  1982  00002B                     	ds	1
  1983  00002C                     _Brightness_Count_Enable:
  1984                           	opt stack 0
  1985  00002C                     	ds	1
  1986  00002D                     _Brightness_Counter:
  1987                           	opt stack 0
  1988  00002D                     	ds	1
  1989  00002E                     _Headphones_In:
  1990                           	opt stack 0
  1991  00002E                     	ds	1
  1992  00002F                     _Pi_Syncd:
  1993                           	opt stack 0
  1994  00002F                     	ds	1
  1995  000030                     _Previous_ADC_Data:
  1996                           	opt stack 0
  1997  000030                     	ds	1
  1998  000031                     _Red_Blink_Timer:
  1999                           	opt stack 0
  2000  000031                     	ds	1
  2001  000032                     _Screen_Control:
  2002                           	opt stack 0
  2003  000032                     	ds	1
  2004  000033                     _Shutdown_Process:
  2005                           	opt stack 0
  2006  000033                     	ds	1
  2007  000034                     _Startup_Counter:
  2008                           	opt stack 0
  2009  000034                     	ds	1
  2010  000035                     _eusart1RxCount:
  2011                           	opt stack 0
  2012  000035                     	ds	1
  2013  000036                     _eusart1RxHead:
  2014                           	opt stack 0
  2015  000036                     	ds	1
  2016  000037                     _eusart1RxTail:
  2017                           	opt stack 0
  2018  000037                     	ds	1
  2019  000038                     _eusart1TxHead:
  2020                           	opt stack 0
  2021  000038                     	ds	1
  2022  000039                     _eusart1TxTail:
  2023                           	opt stack 0
  2024  000039                     	ds	1
  2025  00003A                     _eusart2RxCount:
  2026                           	opt stack 0
  2027  00003A                     	ds	1
  2028  00003B                     _eusart2RxHead:
  2029                           	opt stack 0
  2030  00003B                     	ds	1
  2031  00003C                     _eusart2RxTail:
  2032                           	opt stack 0
  2033  00003C                     	ds	1
  2034  00003D                     _eusart2TxHead:
  2035                           	opt stack 0
  2036  00003D                     	ds	1
  2037  00003E                     _eusart2TxTail:
  2038                           	opt stack 0
  2039  00003E                     	ds	1
  2040  00003F                     _i2c_state:
  2041                           	opt stack 0
  2042  00003F                     	ds	1
  2043  000040                     _i2c_trb_count:
  2044                           	opt stack 0
  2045  000040                     	ds	1
  2046  000041                     I2C_ISR@i2c_address:
  2047                           	opt stack 0
  2048  000041                     	ds	2
  2049                           tblptru	equ	0xFF8
  2050                           tblptrh	equ	0xFF7
  2051                           tblptrl	equ	0xFF6
  2052                           tablat	equ	0xFF5
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           postdec1	equ	0xFE5
  2056                           fsr1l	equ	0xFE1
  2057                           
  2058                           	psect	dataCOMRAM
  2059  000043                     __pdataCOMRAM:
  2060                           	opt stack 0
  2061  000043                     _PWM_Value:
  2062                           	opt stack 0
  2063  000043                     	ds	2
  2064  000045                     _ADC_Step:
  2065                           	opt stack 0
  2066  000045                     	ds	1
  2067  000046                     _Battery_Percent:
  2068                           	opt stack 0
  2069  000046                     	ds	1
  2070  000047                     _status:
  2071                           	opt stack 0
  2072  000047                     	ds	1
  2073                           tblptru	equ	0xFF8
  2074                           tblptrh	equ	0xFF7
  2075                           tblptrl	equ	0xFF6
  2076                           tablat	equ	0xFF5
  2077                           postinc0	equ	0xFEE
  2078                           wreg	equ	0xFE8
  2079                           postdec1	equ	0xFE5
  2080                           fsr1l	equ	0xFE1
  2081                           
  2082                           	psect	bssBANK0
  2083  0000AB                     __pbssBANK0:
  2084                           	opt stack 0
  2085  0000AB                     _i2c_object:
  2086                           	opt stack 0
  2087  0000AB                     	ds	7
  2088  0000B2                     _p_i2c_current:
  2089                           	opt stack 0
  2090  0000B2                     	ds	2
  2091  0000B4                     _p_i2c_trb_current:
  2092                           	opt stack 0
  2093  0000B4                     	ds	2
  2094  0000B6                     strtok@sp:
  2095                           	opt stack 0
  2096  0000B6                     	ds	2
  2097  0000B8                     _Low_Battery:
  2098                           	opt stack 0
  2099  0000B8                     	ds	1
  2100  0000B9                     _Screen_Type:
  2101                           	opt stack 0
  2102  0000B9                     	ds	1
  2103  0000BA                     _Shutdown_Counter:
  2104                           	opt stack 0
  2105  0000BA                     	ds	1
  2106  0000BB                     _command_count:
  2107                           	opt stack 0
  2108  0000BB                     	ds	1
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           postinc0	equ	0xFEE
  2114                           wreg	equ	0xFE8
  2115                           postdec1	equ	0xFE5
  2116                           fsr1l	equ	0xFE1
  2117                           
  2118                           	psect	dataBANK0
  2119  0000BC                     __pdataBANK0:
  2120                           	opt stack 0
  2121  0000BC                     _MAX_ADC:
  2122                           	opt stack 0
  2123  0000BC                     	ds	1
  2124  0000BD                     _MAX_VOLUME:
  2125                           	opt stack 0
  2126  0000BD                     	ds	1
  2127  0000BE                     _MIN_ADC:
  2128                           	opt stack 0
  2129  0000BE                     	ds	1
  2130  0000BF                     _MIN_VOLUME:
  2131                           	opt stack 0
  2132  0000BF                     	ds	1
  2133  0000C0                     _SENSITIVITY:
  2134                           	opt stack 0
  2135  0000C0                     	ds	1
  2136  0000C1                     _Volume_Step:
  2137                           	opt stack 0
  2138  0000C1                     	ds	1
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           postdec1	equ	0xFE5
  2146                           fsr1l	equ	0xFE1
  2147                           
  2148                           	psect	bssBANK1
  2149  000100                     __pbssBANK1:
  2150                           	opt stack 0
  2151  000100                     _Volume_Array:
  2152                           	opt stack 0
  2153  000100                     	ds	32
  2154  000120                     _eusart1RxBuffer:
  2155                           	opt stack 0
  2156  000120                     	ds	8
  2157  000128                     _eusart1TxBuffer:
  2158                           	opt stack 0
  2159  000128                     	ds	8
  2160  000130                     _eusart2RxBuffer:
  2161                           	opt stack 0
  2162  000130                     	ds	8
  2163  000138                     _eusart2TxBuffer:
  2164                           	opt stack 0
  2165  000138                     	ds	8
  2166  000140                     I2C_ISR@pi2c_buf_ptr:
  2167                           	opt stack 0
  2168  000140                     	ds	2
  2169  000142                     _commands:
  2170                           	opt stack 0
  2171  000142                     	ds	128
  2172  0001C2                     I2C_MasterRead@trBlock:
  2173                           	opt stack 0
  2174  0001C2                     	ds	5
  2175  0001C7                     I2C_MasterWrite@trBlock:
  2176                           	opt stack 0
  2177  0001C7                     	ds	5
  2178  0001CC                     _i2c_tr_queue:
  2179                           	opt stack 0
  2180  0001CC                     	ds	5
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           
  2190                           	psect	dataBANK1
  2191  0001D1                     __pdataBANK1:
  2192                           	opt stack 0
  2193  0001D1                     Read_Commands@F18504:
  2194                           	opt stack 0
  2195  0001D1                     	ds	4
  2196  0001D5                     Update_X_Offset@F18450:
  2197                           	opt stack 0
  2198  0001D5                     	ds	4
  2199  0001D9                     Update_Y_Offset@F18455:
  2200                           	opt stack 0
  2201  0001D9                     	ds	4
  2202  0001DD                     Update_Battery_Display@F18447:
  2203                           	opt stack 0
  2204  0001DD                     	ds	3
  2205  0001E0                     Update_Battery_Icon@F18444:
  2206                           	opt stack 0
  2207  0001E0                     	ds	3
  2208  0001E3                     Battery_Display@F18498:
  2209                           	opt stack 0
  2210  0001E3                     	ds	2
  2211  0001E5                     LED_Control@F18486:
  2212                           	opt stack 0
  2213  0001E5                     	ds	2
  2214  0001E7                     PI_UART_SYNC@F18305:
  2215                           	opt stack 0
  2216  0001E7                     	ds	2
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1l	equ	0xFE1
  2225                           
  2226                           	psect	cstackBANK2
  2227  000200                     __pcstackBANK2:
  2228                           	opt stack 0
  2229  000200                     Read_Commands@str:
  2230                           	opt stack 0
  2231                           
  2232                           ; 128 bytes @ 0x0
  2233  000200                     	ds	128
  2234  000280                     Read_Commands@delim:
  2235                           	opt stack 0
  2236                           
  2237                           ; 4 bytes @ 0x80
  2238  000280                     	ds	4
  2239  000284                     Read_Commands@flush:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x84
  2243  000284                     	ds	1
  2244  000285                     Read_Commands@token:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x85
  2248  000285                     	ds	2
  2249  000287                     Read_Commands@counter:
  2250                           	opt stack 0
  2251                           
  2252                           ; 1 bytes @ 0x87
  2253  000287                     	ds	1
  2254  000288                     Read_Commands@i:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x88
  2258  000288                     	ds	1
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1l	equ	0xFE1
  2267                           
  2268                           	psect	cstackBANK0
  2269  000060                     __pcstackBANK0:
  2270                           	opt stack 0
  2271  000060                     ??_EPWM1_LoadDutyValue:
  2272  000060                     ?_printf:
  2273                           	opt stack 0
  2274  000060                     ?_strtok:
  2275                           	opt stack 0
  2276  000060                     I2C_MasterWrite@pdata:
  2277                           	opt stack 0
  2278  000060                     I2C_MasterRead@pdata:
  2279                           	opt stack 0
  2280  000060                     printf@f:
  2281                           	opt stack 0
  2282  000060                     strtok@s1:
  2283                           	opt stack 0
  2284  000060                     Update_X_Offset@data:
  2285                           	opt stack 0
  2286  000060                     Update_Y_Offset@data:
  2287                           	opt stack 0
  2288                           
  2289                           ; 4 bytes @ 0x0
  2290  000060                     	ds	2
  2291  000062                     ??_Button_Check:
  2292  000062                     I2C_MasterWrite@length:
  2293                           	opt stack 0
  2294  000062                     I2C_MasterRead@length:
  2295                           	opt stack 0
  2296  000062                     strtok@s2:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x2
  2300  000062                     	ds	1
  2301  000063                     I2C_MasterWrite@address:
  2302                           	opt stack 0
  2303  000063                     I2C_MasterRead@address:
  2304                           	opt stack 0
  2305                           
  2306                           ; 2 bytes @ 0x3
  2307  000063                     	ds	1
  2308  000064                     ??_Read_Commands:
  2309  000064                     printf@idx:
  2310                           	opt stack 0
  2311                           
  2312                           ; 1 bytes @ 0x4
  2313  000064                     	ds	1
  2314  000065                     printf@prec:
  2315                           	opt stack 0
  2316  000065                     I2C_MasterWrite@pflag:
  2317                           	opt stack 0
  2318  000065                     I2C_MasterRead@pflag:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x5
  2322  000065                     	ds	1
  2323  000066                     printf@cp:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x6
  2327  000066                     	ds	1
  2328  000067                     ??_TAS2521_Initialize:
  2329  000067                     Headphones@State:
  2330                           	opt stack 0
  2331  000067                     Read_Battery_Percent@BatteryPercent:
  2332                           	opt stack 0
  2333  000067                     Read_Battery_Voltage@BatteryVoltage:
  2334                           	opt stack 0
  2335  000067                     Read_Battery_Register@Register:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x7
  2339  000067                     	ds	1
  2340  000068                     Read_Battery_Register@RegisterData:
  2341                           	opt stack 0
  2342  000068                     printf@ap:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x8
  2346  000068                     	ds	2
  2347  00006A                     printf@flag:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0xA
  2351  00006A                     	ds	1
  2352  00006B                     printf@val:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0xB
  2356  00006B                     	ds	2
  2357  00006D                     printf@c:
  2358                           	opt stack 0
  2359                           
  2360                           ; 1 bytes @ 0xD
  2361  00006D                     	ds	1
  2362  00006E                     ??_LED_Control:
  2363  00006E                     Set_Volume@VolumeSetting:
  2364                           	opt stack 0
  2365  00006E                     TAS2521_Communication@i2c_data:
  2366                           	opt stack 0
  2367  00006E                     MAX17048_Communication@i2c_data:
  2368                           	opt stack 0
  2369  00006E                     Battery_Display@data:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0xE
  2373  00006E                     	ds	1
  2374  00006F                     Set_Volume@Volume_Index:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0xF
  2378  00006F                     	ds	1
  2379  000070                     MAX17048_Communication@ReadData:
  2380                           	opt stack 0
  2381  000070                     Set_Volume@Volume:
  2382                           	opt stack 0
  2383                           
  2384                           ; 1 bytes @ 0x10
  2385  000070                     	ds	1
  2386  000071                     Volume_Update@Difference:
  2387                           	opt stack 0
  2388                           
  2389                           ; 1 bytes @ 0x11
  2390  000071                     	ds	1
  2391  000072                     Volume_Update@Abs_diff:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x12
  2395  000072                     	ds	1
  2396  000073                     LED_Control@first_command:
  2397                           	opt stack 0
  2398                           
  2399                           ; 16 bytes @ 0x13
  2400  000073                     	ds	16
  2401  000083                     LED_Control@second_command:
  2402                           	opt stack 0
  2403                           
  2404                           ; 16 bytes @ 0x23
  2405  000083                     	ds	16
  2406  000093                     LED_Control@command_input:
  2407                           	opt stack 0
  2408                           
  2409                           ; 16 bytes @ 0x33
  2410  000093                     	ds	16
  2411  0000A3                     LED_Control@flush:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x43
  2415  0000A3                     	ds	1
  2416  0000A4                     LED_Control@delim:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x44
  2420  0000A4                     	ds	2
  2421  0000A6                     LED_Control@token:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x46
  2425  0000A6                     	ds	2
  2426  0000A8                     LED_Control@counter:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x48
  2430  0000A8                     	ds	1
  2431  0000A9                     DebugMenu@selection:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0x49
  2435  0000A9                     	ds	1
  2436  0000AA                     ??_Debug_Mode:
  2437                           
  2438                           ; 1 bytes @ 0x4A
  2439  0000AA                     	ds	1
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           postinc0	equ	0xFEE
  2445                           wreg	equ	0xFE8
  2446                           postdec1	equ	0xFE5
  2447                           fsr1l	equ	0xFE1
  2448                           
  2449                           	psect	cstackCOMRAM
  2450  000001                     __pcstackCOMRAM:
  2451                           	opt stack 0
  2452  000001                     ??_I2C_Stop:
  2453  000001                     ??i2_PWR_SW_Check:
  2454  000001                     ?_ADC_GetConversionResult_8bit:
  2455                           	opt stack 0
  2456  000001                     
  2457                           ; 2 bytes @ 0x0
  2458  000001                     	ds	1
  2459  000002                     
  2460                           ; 1 bytes @ 0x1
  2461  000002                     	ds	1
  2462  000003                     ??_ADC_ISR:
  2463  000003                     I2C_Stop@completion_code:
  2464                           	opt stack 0
  2465                           
  2466                           ; 1 bytes @ 0x2
  2467  000003                     	ds	1
  2468  000004                     ??_I2C_ISR:
  2469                           
  2470                           ; 1 bytes @ 0x3
  2471  000004                     	ds	2
  2472  000006                     ??_INTERRUPT_InterruptManager:
  2473                           
  2474                           ; 1 bytes @ 0x5
  2475  000006                     	ds	14
  2476  000014                     ??_PWR_SW_Check:
  2477  000014                     ??_LED_Check:
  2478  000014                     ??_abval:
  2479  000014                     ??_isdigit:
  2480  000014                     ??_ADC_StartConversion:
  2481  000014                     ?_strcmp:
  2482                           	opt stack 0
  2483  000014                     ?_strchr:
  2484                           	opt stack 0
  2485  000014                     ?___wmul:
  2486                           	opt stack 0
  2487  000014                     ?___lwdiv:
  2488                           	opt stack 0
  2489  000014                     EUSART1_Read@readValue:
  2490                           	opt stack 0
  2491  000014                     EUSART1_Write@txData:
  2492                           	opt stack 0
  2493  000014                     EUSART2_Read@readValue:
  2494                           	opt stack 0
  2495  000014                     EUSART2_Write@txData:
  2496                           	opt stack 0
  2497  000014                     TMR1_SetInterruptHandler@InterruptHandler:
  2498                           	opt stack 0
  2499  000014                     I2C_MasterTRBInsert@ptrb_list:
  2500                           	opt stack 0
  2501  000014                     I2C_MasterReadTRBBuild@ptrb:
  2502                           	opt stack 0
  2503  000014                     I2C_MasterWriteTRBBuild@ptrb:
  2504                           	opt stack 0
  2505  000014                     TMR3_SetInterruptHandler@InterruptHandler:
  2506                           	opt stack 0
  2507  000014                     INT1_SetInterruptHandler@InterruptHandler:
  2508                           	opt stack 0
  2509  000014                     INT2_SetInterruptHandler@InterruptHandler:
  2510                           	opt stack 0
  2511  000014                     INT0_SetInterruptHandler@InterruptHandler:
  2512                           	opt stack 0
  2513  000014                     INT3_SetInterruptHandler@InterruptHandler:
  2514                           	opt stack 0
  2515  000014                     ___wmul@multiplier:
  2516                           	opt stack 0
  2517  000014                     ___lwdiv@dividend:
  2518                           	opt stack 0
  2519  000014                     strcmp@s1:
  2520                           	opt stack 0
  2521  000014                     strcpy@to:
  2522                           	opt stack 0
  2523  000014                     strchr@ptr:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x13
  2527  000014                     	ds	1
  2528  000015                     ADC_StartConversion@channel:
  2529                           	opt stack 0
  2530  000015                     putch@txData:
  2531                           	opt stack 0
  2532  000015                     _isdigit$3579:
  2533                           	opt stack 0
  2534  000015                     EUSART2_Write_Array@data:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x14
  2538  000015                     	ds	1
  2539  000016                     ??_TMR3_Initialize:
  2540  000016                     ??_TMR1_Initialize:
  2541  000016                     getch@data:
  2542                           	opt stack 0
  2543  000016                     isdigit@c:
  2544                           	opt stack 0
  2545  000016                     I2C_MasterTRBInsert@pflag:
  2546                           	opt stack 0
  2547  000016                     I2C_MasterReadTRBBuild@pdata:
  2548                           	opt stack 0
  2549  000016                     I2C_MasterWriteTRBBuild@pdata:
  2550                           	opt stack 0
  2551  000016                     _abval$3268:
  2552                           	opt stack 0
  2553  000016                     ___wmul@multiplicand:
  2554                           	opt stack 0
  2555  000016                     ___lwdiv@divisor:
  2556                           	opt stack 0
  2557  000016                     strcmp@s2:
  2558                           	opt stack 0
  2559  000016                     strcpy@from:
  2560                           	opt stack 0
  2561  000016                     strchr@chr:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x15
  2565  000016                     	ds	1
  2566  000017                     EUSART2_Write_Array@length:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0x16
  2570  000017                     	ds	1
  2571  000018                     ??_strcmp:
  2572  000018                     I2C_MasterReadTRBBuild@length:
  2573                           	opt stack 0
  2574  000018                     I2C_MasterWriteTRBBuild@length:
  2575                           	opt stack 0
  2576  000018                     EUSART2_Write_Array@i:
  2577                           	opt stack 0
  2578  000018                     abval@val:
  2579                           	opt stack 0
  2580  000018                     ___lwdiv@counter:
  2581                           	opt stack 0
  2582  000018                     ___wmul@product:
  2583                           	opt stack 0
  2584  000018                     strcpy@cp:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x17
  2588  000018                     	ds	1
  2589  000019                     ??_PI_UART_SYNC:
  2590  000019                     ?_strspn:
  2591                           	opt stack 0
  2592  000019                     ?_strcspn:
  2593                           	opt stack 0
  2594  000019                     I2C_MasterTRBInsert@count:
  2595                           	opt stack 0
  2596  000019                     strcmp@r:
  2597                           	opt stack 0
  2598  000019                     I2C_MasterReadTRBBuild@address:
  2599                           	opt stack 0
  2600  000019                     I2C_MasterWriteTRBBuild@address:
  2601                           	opt stack 0
  2602  000019                     ___lwdiv@quotient:
  2603                           	opt stack 0
  2604  000019                     strcspn@s1:
  2605                           	opt stack 0
  2606  000019                     strspn@s1:
  2607                           	opt stack 0
  2608  000019                     Update_Battery_Icon@data:
  2609                           	opt stack 0
  2610  000019                     Update_Battery_Display@data:
  2611                           	opt stack 0
  2612                           
  2613                           ; 3 bytes @ 0x18
  2614  000019                     	ds	1
  2615  00001A                     ?_atoi:
  2616                           	opt stack 0
  2617  00001A                     PI_UART_SYNC@data:
  2618                           	opt stack 0
  2619  00001A                     atoi@s:
  2620                           	opt stack 0
  2621                           
  2622                           ; 2 bytes @ 0x19
  2623  00001A                     	ds	1
  2624  00001B                     ??_I2C_MasterWriteTRBBuild:
  2625  00001B                     ??_I2C_MasterReadTRBBuild:
  2626  00001B                     ?___lwmod:
  2627                           	opt stack 0
  2628  00001B                     ___lwmod@dividend:
  2629                           	opt stack 0
  2630  00001B                     strcspn@s2:
  2631                           	opt stack 0
  2632  00001B                     strspn@s2:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x1A
  2636  00001B                     	ds	1
  2637  00001C                     ??_atoi:
  2638  00001C                     Update_Battery_Icon@charge:
  2639                           	opt stack 0
  2640  00001C                     Update_Battery_Display@display:
  2641                           	opt stack 0
  2642                           
  2643                           ; 1 bytes @ 0x1B
  2644  00001C                     	ds	1
  2645  00001D                     ??_strspn:
  2646  00001D                     ??_strcspn:
  2647  00001D                     I2C_Write@Register:
  2648                           	opt stack 0
  2649  00001D                     I2C_Read@Register:
  2650                           	opt stack 0
  2651  00001D                     ___lwmod@divisor:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x1C
  2655  00001D                     	ds	1
  2656  00001E                     I2C_Write@Data:
  2657                           	opt stack 0
  2658  00001E                     I2C_Read@Address:
  2659                           	opt stack 0
  2660  00001E                     atoi@sign:
  2661                           	opt stack 0
  2662  00001E                     strcspn@i:
  2663                           	opt stack 0
  2664  00001E                     strspn@i:
  2665                           	opt stack 0
  2666                           
  2667                           ; 2 bytes @ 0x1D
  2668  00001E                     	ds	1
  2669  00001F                     I2C_Write@Address:
  2670                           	opt stack 0
  2671  00001F                     I2C_Read@writeBuffer:
  2672                           	opt stack 0
  2673  00001F                     ___lwmod@counter:
  2674                           	opt stack 0
  2675  00001F                     atoi@a:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x1E
  2679  00001F                     	ds	1
  2680  000020                     ??_printf:
  2681  000020                     I2C_Write@writeBuffer:
  2682                           	opt stack 0
  2683  000020                     I2C_Read@timeOut:
  2684                           	opt stack 0
  2685  000020                     Read_Commands@cmds:
  2686                           	opt stack 0
  2687                           
  2688                           ; 2 bytes @ 0x1F
  2689  000020                     	ds	1
  2690  000021                     EPWM1_LoadDutyValue@dutyValue:
  2691                           	opt stack 0
  2692  000021                     Update_X_Offset@offset:
  2693                           	opt stack 0
  2694  000021                     Update_Y_Offset@offset:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x20
  2698  000021                     	ds	1
  2699  000022                     I2C_Write@timeOut:
  2700                           	opt stack 0
  2701  000022                     I2C_Read@ReadData:
  2702                           	opt stack 0
  2703                           
  2704                           ; 1 bytes @ 0x21
  2705  000022                     	ds	1
  2706  000023                     tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           
  2715                           ; 1 bytes @ 0x22
  2716 ;;
  2717 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2718 ;;
  2719 ;; *************** function _main *****************
  2720 ;; Defined at:
  2721 ;;		line 67 in file "main.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels required when called:   11
  2741 ;; This function calls:
  2742 ;;		_ADC_StartConversion
  2743 ;;		_Battery_Check
  2744 ;;		_Brightness_SW_Check
  2745 ;;		_Build_Volume_Array
  2746 ;;		_Button_Check
  2747 ;;		_DebugMenu
  2748 ;;		_Debug_Mode
  2749 ;;		_EPWM1_LoadDutyValue
  2750 ;;		_EUSART1_Read
  2751 ;;		_Headphone_Check
  2752 ;;		_Headphones
  2753 ;;		_I2C_Initialize
  2754 ;;		_LED_Check
  2755 ;;		_PI_UART_SYNC
  2756 ;;		_PWR_SW_Check
  2757 ;;		_Read_Battery_Percent
  2758 ;;		_SYSTEM_Initialize
  2759 ;;		_Set_Volume
  2760 ;;		_TAS2521_Initialize
  2761 ;;		_Volume_Update
  2762 ;; This function is called by:
  2763 ;;		Startup code after reset
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text0
  2768  001858                     __ptext0:
  2769                           	opt stack 0
  2770  001858                     _main:
  2771                           	opt stack 20
  2772                           
  2773                           ;main.c: 70: SYSTEM_Initialize();
  2774                           
  2775                           ;incstack = 0
  2776  001858  EC23  F012         	call	_SYSTEM_Initialize	;wreg free
  2777                           
  2778                           ;main.c: 89: (INTCONbits.GIE = 1);
  2779  00185C  8EF2               	bsf	intcon,7,c	;volatile
  2780                           
  2781                           ;main.c: 93: (INTCONbits.PEIE = 1);
  2782  00185E  8CF2               	bsf	intcon,6,c	;volatile
  2783                           
  2784                           ;main.c: 99: do { LATAbits.LATA2 = 1; } while(0);
  2785  001860  8489               	bsf	3977,2,c	;volatile
  2786                           
  2787                           ;main.c: 100: do { WPUBbits.WPUB4 = 1; } while(0);
  2788  001862  010F               	movlb	15	; () banked
  2789  001864  895B               	bsf	91,4,b	;volatile
  2790                           
  2791                           ; BSR set to: 15
  2792                           
  2793                           ; BSR set to: 15
  2794                           
  2795                           ;main.c: 139: do { TRISCbits.TRISC4 = 1; } while(0);
  2796                           
  2797                           ; BSR set to: 15
  2798  001866  8894               	bsf	3988,4,c	;volatile
  2799                           
  2800                           ; BSR set to: 15
  2801                           ;main.c: 140: Startup_Count_Enable = 1;
  2802                           
  2803                           ; BSR set to: 15
  2804  001868  0E01               	movlw	1
  2805  00186A  0101               	movlb	1	; () banked
  2806  00186C  6FF5               	movwf	_Startup_Count_Enable& (0+255),b	;volatile
  2807                           
  2808                           ;main.c: 142: while(!PORTCbits.RC4)
  2809  00186E  D00A               	goto	l7431
  2810  001870                     l7425:
  2811                           
  2812                           ;main.c: 143: {
  2813                           ;main.c: 144: if(Startup_Counter > 100)
  2814  001870  0E64               	movlw	100
  2815  001872  6434               	cpfsgt	_Startup_Counter,c	;volatile
  2816  001874  D007               	goto	l7431
  2817                           
  2818                           ;main.c: 145: {
  2819                           ;main.c: 146: Startup_Counter = 101;
  2820  001876  0E65               	movlw	101
  2821  001878  6E34               	movwf	_Startup_Counter,c	;volatile
  2822                           
  2823                           ;main.c: 147: Startup_Count_Enable = 0;
  2824  00187A  0E00               	movlw	0
  2825  00187C  0101               	movlb	1	; () banked
  2826  00187E  6FF5               	movwf	_Startup_Count_Enable& (0+255),b	;volatile
  2827                           
  2828                           ; BSR set to: 1
  2829                           ;main.c: 149: Debug_Mode();
  2830  001880  EC4E  F00E         	call	_Debug_Mode	;wreg free
  2831  001884                     l7431:
  2832  001884  A882               	btfss	3970,4,c	;volatile
  2833  001886  D7F4               	goto	l7425
  2834                           
  2835                           ;main.c: 150: }
  2836                           ;main.c: 151: }
  2837                           ;main.c: 153: Startup_Count_Enable = 0;
  2838  001888  0E00               	movlw	0
  2839  00188A  0101               	movlb	1	; () banked
  2840  00188C  6FF5               	movwf	_Startup_Count_Enable& (0+255),b	;volatile
  2841                           
  2842                           ; BSR set to: 1
  2843                           ;main.c: 156: I2C_Initialize();
  2844  00188E  EC07  F012         	call	_I2C_Initialize	;wreg free
  2845                           
  2846                           ;main.c: 159: TAS2521_Initialize();
  2847  001892  ECFB  F001         	call	_TAS2521_Initialize	;wreg free
  2848                           
  2849                           ;main.c: 162: if(PORTBbits.RB0)
  2850  001896  A081               	btfss	3969,0,c	;volatile
  2851  001898  D005               	goto	l7445
  2852                           
  2853                           ;main.c: 163: {
  2854                           ;main.c: 164: Headphones_In = 1;
  2855  00189A  0E01               	movlw	1
  2856  00189C  6E2E               	movwf	_Headphones_In,c
  2857                           
  2858                           ;main.c: 165: Headphones(1);
  2859  00189E  0E01               	movlw	1
  2860  0018A0  EC6F  F00B         	call	_Headphones
  2861  0018A4                     l7445:
  2862                           
  2863                           ;main.c: 166: }
  2864                           ;main.c: 170: Battery_Percent = Read_Battery_Percent();
  2865  0018A4  EC67  F014         	call	_Read_Battery_Percent	;wreg free
  2866  0018A8  6E46               	movwf	_Battery_Percent,c	;volatile
  2867                           
  2868                           ;main.c: 174: ADC_StartConversion(volume_input);
  2869  0018AA  0E00               	movlw	0
  2870  0018AC  EC74  F014         	call	_ADC_StartConversion
  2871  0018B0                     l7449:
  2872  0018B0  5028               	movf	_ADC_Data_Ready,w,c	;volatile
  2873  0018B2  B4D8               	btfsc	status,2,c
  2874  0018B4  D7FD               	goto	l7449
  2875                           
  2876                           ;main.c: 176: ADC_Data_Ready = 0;
  2877  0018B6  0E00               	movlw	0
  2878  0018B8  6E28               	movwf	_ADC_Data_Ready,c	;volatile
  2879                           
  2880                           ;main.c: 177: Previous_ADC_Data = ADC_Data;
  2881  0018BA  C027  F030         	movff	_ADC_Data,_Previous_ADC_Data
  2882                           
  2883                           ;main.c: 179: Build_Volume_Array();
  2884  0018BE  EC16  F015         	call	_Build_Volume_Array	;wreg free
  2885                           
  2886                           ;main.c: 180: Set_Volume(ADC_Data);
  2887  0018C2  5027               	movf	_ADC_Data,w,c
  2888  0018C4  EC24  F00F         	call	_Set_Volume
  2889                           
  2890                           ;main.c: 182: EPWM1_LoadDutyValue(PWM_Value);
  2891  0018C8  C043  F021         	movff	_PWM_Value,EPWM1_LoadDutyValue@dutyValue
  2892  0018CC  C044  F022         	movff	_PWM_Value+1,EPWM1_LoadDutyValue@dutyValue+1
  2893  0018D0  ECE9  F011         	call	_EPWM1_LoadDutyValue	;wreg free
  2894                           
  2895                           ;main.c: 191: do { ANCON0bits.ANSEL4 = 0; } while(0);
  2896  0018D4  010F               	movlb	15	; () banked
  2897  0018D6  995D               	bcf	93,4,b	;volatile
  2898                           
  2899                           ; BSR set to: 15
  2900                           
  2901                           ; BSR set to: 15
  2902                           
  2903                           ;main.c: 192: do { TRISAbits.TRISA5 = 1; } while(0);
  2904                           
  2905                           ; BSR set to: 15
  2906  0018D8  8A92               	bsf	3986,5,c	;volatile
  2907                           
  2908                           ; BSR set to: 15
  2909                           
  2910                           ; BSR set to: 15
  2911                           
  2912                           ;main.c: 193: do { TRISAbits.TRISA7 = 1; } while(0);
  2913                           
  2914                           ; BSR set to: 15
  2915  0018DA  8E92               	bsf	3986,7,c	;volatile
  2916  0018DC                     l7467:
  2917                           
  2918                           ;main.c: 196: {
  2919                           ;main.c: 203: if((eusart1RxCount))
  2920  0018DC  5035               	movf	_eusart1RxCount,w,c	;volatile
  2921  0018DE  B4D8               	btfsc	status,2,c
  2922  0018E0  D006               	goto	l7473
  2923                           
  2924                           ;main.c: 204: {
  2925                           ;main.c: 205: if('D' == EUSART1_Read())
  2926  0018E2  ECA9  F012         	call	_EUSART1_Read	;wreg free
  2927  0018E6  0A44               	xorlw	68
  2928  0018E8  B4D8               	btfsc	status,2,c
  2929                           
  2930                           ;main.c: 206: {
  2931                           ;main.c: 207: DebugMenu();
  2932  0018EA  EC76  F009         	call	_DebugMenu	;wreg free
  2933  0018EE                     l7473:
  2934                           
  2935                           ;main.c: 208: }
  2936                           ;main.c: 209: }
  2937                           ;main.c: 211: LED_Check();
  2938  0018EE  EC8B  F00E         	call	_LED_Check	;wreg free
  2939                           
  2940                           ;main.c: 213: Volume_Update();
  2941  0018F2  EC50  F011         	call	_Volume_Update	;wreg free
  2942                           
  2943                           ;main.c: 215: Brightness_SW_Check();
  2944  0018F6  ECC3  F00E         	call	_Brightness_SW_Check	;wreg free
  2945                           
  2946                           ;main.c: 217: PWR_SW_Check();
  2947  0018FA  EC79  F00D         	call	_PWR_SW_Check	;wreg free
  2948                           
  2949                           ;main.c: 219: Battery_Check();
  2950  0018FE  EC3E  F010         	call	_Battery_Check	;wreg free
  2951                           
  2952                           ;main.c: 221: PI_UART_SYNC();
  2953  001902  ECED  F010         	call	_PI_UART_SYNC	;wreg free
  2954                           
  2955                           ;main.c: 223: Headphone_Check();
  2956  001906  EC1F  F014         	call	_Headphone_Check	;wreg free
  2957                           
  2958                           ;main.c: 225: Button_Check();
  2959  00190A  EC09  F00E         	call	_Button_Check	;wreg free
  2960  00190E  D7E6               	goto	l7467
  2961  001910                     __end_of_main:
  2962                           	opt stack 0
  2963                           tblptru	equ	0xFF8
  2964                           tblptrh	equ	0xFF7
  2965                           tblptrl	equ	0xFF6
  2966                           tablat	equ	0xFF5
  2967                           intcon	equ	0xFF2
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           postdec1	equ	0xFE5
  2971                           fsr1l	equ	0xFE1
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _Volume_Update *****************
  2975 ;; Defined at:
  2976 ;;		line 85 in file "sound_control.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  Abs_diff        1   18[BANK0 ] unsigned char 
  2981 ;;  Difference      1   17[BANK0 ] char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2995 ;;Total ram usage:        2 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    8
  2998 ;; This function calls:
  2999 ;;		_Set_Volume
  3000 ;;		_abval
  3001 ;; This function is called by:
  3002 ;;		_main
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text1
  3007  0022A0                     __ptext1:
  3008                           	opt stack 0
  3009  0022A0                     _Volume_Update:
  3010                           	opt stack 22
  3011                           
  3012                           ;sound_control.c: 87: int8_t Difference = 0;
  3013                           
  3014                           ;incstack = 0
  3015  0022A0  0E00               	movlw	0
  3016  0022A2  0100               	movlb	0	; () banked
  3017  0022A4  6F71               	movwf	Volume_Update@Difference& (0+255),b
  3018                           
  3019                           ;sound_control.c: 88: uint8_t Abs_diff = 0;
  3020  0022A6  0E00               	movlw	0
  3021  0022A8  0100               	movlb	0	; () banked
  3022  0022AA  6F72               	movwf	Volume_Update@Abs_diff& (0+255),b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;sound_control.c: 91: if(ADC_Data_Ready == 1)
  3026  0022AC  0428               	decf	_ADC_Data_Ready,w,c	;volatile
  3027  0022AE  A4D8               	btfss	status,2,c
  3028  0022B0  0012               	return	
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;sound_control.c: 92: {
  3032                           ;sound_control.c: 93: Difference = ADC_Data - Previous_ADC_Data;
  3033  0022B2  5030               	movf	_Previous_ADC_Data,w,c
  3034  0022B4  0800               	sublw	0
  3035  0022B6  2427               	addwf	_ADC_Data,w,c
  3036  0022B8  0100               	movlb	0	; () banked
  3037  0022BA  6F71               	movwf	Volume_Update@Difference& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;sound_control.c: 95: Abs_diff = abval(Difference);
  3041  0022BC  0100               	movlb	0	; () banked
  3042  0022BE  5171               	movf	Volume_Update@Difference& (0+255),w,b
  3043  0022C0  EC0F  F013         	call	_abval
  3044  0022C4  0100               	movlb	0	; () banked
  3045  0022C6  6F72               	movwf	Volume_Update@Abs_diff& (0+255),b
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;sound_control.c: 97: if(Abs_diff > ADC_Step)
  3049  0022C8  0100               	movlb	0	; () banked
  3050  0022CA  5172               	movf	Volume_Update@Abs_diff& (0+255),w,b
  3051  0022CC  5C45               	subwf	_ADC_Step,w,c
  3052  0022CE  B0D8               	btfsc	status,0,c
  3053  0022D0  0012               	return	
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;sound_control.c: 98: {
  3057                           ;sound_control.c: 99: Previous_ADC_Data = ADC_Data;
  3058  0022D2  C027  F030         	movff	_ADC_Data,_Previous_ADC_Data
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;sound_control.c: 100: Set_Volume(ADC_Data);
  3062  0022D6  5027               	movf	_ADC_Data,w,c
  3063  0022D8  EC24  F00F         	call	_Set_Volume
  3064  0022DC  0012               	return	
  3065  0022DE                     __end_of_Volume_Update:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           intcon	equ	0xFF2
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postdec1	equ	0xFE5
  3075                           fsr1l	equ	0xFE1
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _abval *****************
  3079 ;; Defined at:
  3080 ;;		line 204 in file "sound_control.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  val             1    wreg     char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  val             1   23[COMRAM] char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      unsigned char 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3095 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3097 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3098 ;;Total ram usage:        5 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    4
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_Volume_Update
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text2
  3109  00261E                     __ptext2:
  3110                           	opt stack 0
  3111  00261E                     _abval:
  3112                           	opt stack 25
  3113                           
  3114                           ;incstack = 0
  3115                           ;abval@val stored from wreg
  3116  00261E  6E18               	movwf	abval@val,c
  3117                           
  3118                           ;sound_control.c: 206: return (val<0 ? (-val) : val);
  3119  002620  BE18               	btfsc	abval@val,7,c
  3120  002622  D006               	goto	l7075
  3121  002624  5018               	movf	abval@val,w,c
  3122  002626  6E16               	movwf	_abval$3268,c
  3123  002628  6A17               	clrf	_abval$3268+1,c
  3124  00262A  BE16               	btfsc	_abval$3268,7,c
  3125  00262C  0617               	decf	_abval$3268+1,f,c
  3126  00262E  D00D               	goto	l7077
  3127  002630                     l7075:
  3128  002630  C018  F014         	movff	abval@val,??_abval
  3129  002634  6A15               	clrf	(??_abval+1)& (0+255),c
  3130  002636  BE14               	btfsc	??_abval& (0+255),7,c
  3131  002638  0615               	decf	(??_abval+1)& (0+255),f,c
  3132  00263A  1E14               	comf	??_abval,f,c
  3133  00263C  1E15               	comf	??_abval+1,f,c
  3134  00263E  4A14               	infsnz	??_abval,f,c
  3135  002640  2A15               	incf	??_abval+1,f,c
  3136  002642  C014  F016         	movff	??_abval,_abval$3268
  3137  002646  C015  F017         	movff	??_abval+1,_abval$3268+1
  3138  00264A                     l7077:
  3139  00264A  5016               	movf	_abval$3268,w,c
  3140  00264C  0012               	return	
  3141  00264E                     __end_of_abval:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           intcon	equ	0xFF2
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           postdec1	equ	0xFE5
  3151                           fsr1l	equ	0xFE1
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _Set_Volume *****************
  3155 ;; Defined at:
  3156 ;;		line 110 in file "sound_control.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  VolumeSettin    1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  VolumeSettin    1   14[BANK0 ] unsigned char 
  3161 ;;  Volume          1   16[BANK0 ] char 
  3162 ;;  Volume_Index    1   15[BANK0 ] char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3173 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3175 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3176 ;;Total ram usage:        3 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    7
  3179 ;; This function calls:
  3180 ;;		_I2C_Write
  3181 ;;		_printf
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;;		_Volume_Update
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text3
  3189  001E48                     __ptext3:
  3190                           	opt stack 0
  3191  001E48                     _Set_Volume:
  3192                           	opt stack 22
  3193                           
  3194                           ;incstack = 0
  3195                           ;Set_Volume@VolumeSetting stored from wreg
  3196  001E48  0100               	movlb	0	; () banked
  3197  001E4A  6F6E               	movwf	Set_Volume@VolumeSetting& (0+255),b
  3198                           
  3199                           ;sound_control.c: 114: int8_t Volume_Index = 0;
  3200  001E4C  0E00               	movlw	0
  3201  001E4E  0100               	movlb	0	; () banked
  3202  001E50  6F6F               	movwf	Set_Volume@Volume_Index& (0+255),b
  3203                           
  3204                           ;sound_control.c: 115: int8_t Volume = 0;
  3205  001E52  0E00               	movlw	0
  3206  001E54  0100               	movlb	0	; () banked
  3207  001E56  6F70               	movwf	Set_Volume@Volume& (0+255),b
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;sound_control.c: 117: Volume_Index = VolumeSetting;
  3211  001E58  C06E  F06F         	movff	Set_Volume@VolumeSetting,Set_Volume@Volume_Index
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;sound_control.c: 120: Volume = Linearized_Volume_Array[Volume_Index];
  3215  001E5C  0100               	movlb	0	; () banked
  3216  001E5E  516F               	movf	Set_Volume@Volume_Index& (0+255),w,b
  3217  001E60  0D01               	mullw	1
  3218  001E62  0E63               	movlw	low _Linearized_Volume_Array
  3219  001E64  24F3               	addwf	prodl,w,c
  3220  001E66  6EF6               	movwf	tblptrl,c
  3221  001E68  0E7A               	movlw	high _Linearized_Volume_Array
  3222  001E6A  20F4               	addwfc	prodh,w,c
  3223  001E6C  6EF7               	movwf	tblptrh,c
  3224  001E6E                     	if	0	;There are less than 3 active tblptr bytes
  3225  001E6E                     	endif
  3226  001E6E  0008               	tblrd		*
  3227  001E70  CFF5 F070          	movff	tablat,Set_Volume@Volume
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sound_control.c: 124: printf("\nVolume = %d", Volume);
  3231  001E74  0E52               	movlw	low STR_90
  3232  001E76  0100               	movlb	0	; () banked
  3233  001E78  6F60               	movwf	printf@f& (0+255),b
  3234  001E7A  0E7F               	movlw	high STR_90
  3235  001E7C  0100               	movlb	0	; () banked
  3236  001E7E  6F61               	movwf	(printf@f+1)& (0+255),b
  3237  001E80  0100               	movlb	0	; () banked
  3238  001E82  5170               	movf	Set_Volume@Volume& (0+255),w,b
  3239  001E84  0100               	movlb	0	; () banked
  3240  001E86  6F62               	movwf	(?_printf+2)& (0+255),b
  3241  001E88  6B63               	clrf	(?_printf+3)& (0+255),b
  3242  001E8A  BF62               	btfsc	(?_printf+2)& (0+255),7,b
  3243  001E8C  0763               	decf	(?_printf+3)& (0+255),f,b
  3244  001E8E  EC8D  F000         	call	_printf	;wreg free
  3245                           
  3246                           ;sound_control.c: 128: I2C_Write(0b0011000, 0x41, Volume);
  3247  001E92  0E41               	movlw	65
  3248  001E94  6E1D               	movwf	I2C_Write@Register,c
  3249  001E96  C070  F01E         	movff	Set_Volume@Volume,I2C_Write@Data
  3250  001E9A  0E18               	movlw	24
  3251  001E9C  ECF5  F00E         	call	_I2C_Write
  3252  001EA0  0012               	return		;funcret
  3253  001EA2                     __end_of_Set_Volume:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           postdec1	equ	0xFE5
  3265                           fsr1l	equ	0xFE1
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _SYSTEM_Initialize *****************
  3269 ;; Defined at:
  3270 ;;		line 111 in file "mcc_generated_files/mcc.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3288 ;;Total ram usage:        0 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    6
  3291 ;; This function calls:
  3292 ;;		_ADC_Initialize
  3293 ;;		_EPWM1_Initialize
  3294 ;;		_EUSART1_Initialize
  3295 ;;		_EUSART2_Initialize
  3296 ;;		_EXT_INT_Initialize
  3297 ;;		_INTERRUPT_Initialize
  3298 ;;		_OSCILLATOR_Initialize
  3299 ;;		_PIN_MANAGER_Initialize
  3300 ;;		_TMR1_Initialize
  3301 ;;		_TMR2_Initialize
  3302 ;;		_TMR3_Initialize
  3303 ;; This function is called by:
  3304 ;;		_main
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text4
  3309  002446                     __ptext4:
  3310                           	opt stack 0
  3311  002446                     _SYSTEM_Initialize:
  3312                           	opt stack 24
  3313                           
  3314                           ;mcc.c: 114: INTERRUPT_Initialize();
  3315                           
  3316                           ;incstack = 0
  3317  002446  EC14  F015         	call	_INTERRUPT_Initialize	;wreg free
  3318                           
  3319                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  3320  00244A  EC57  F013         	call	_PIN_MANAGER_Initialize	;wreg free
  3321                           
  3322                           ;mcc.c: 116: OSCILLATOR_Initialize();
  3323  00244E  ECAF  F014         	call	_OSCILLATOR_Initialize	;wreg free
  3324                           
  3325                           ;mcc.c: 118: ADC_Initialize();
  3326  002452  EC4C  F014         	call	_ADC_Initialize	;wreg free
  3327                           
  3328                           ;mcc.c: 119: EPWM1_Initialize();
  3329  002456  EC10  F014         	call	_EPWM1_Initialize	;wreg free
  3330                           
  3331                           ;mcc.c: 120: TMR3_Initialize();
  3332  00245A  ECAD  F011         	call	_TMR3_Initialize	;wreg free
  3333                           
  3334                           ;mcc.c: 121: TMR2_Initialize();
  3335  00245E  ECA5  F014         	call	_TMR2_Initialize	;wreg free
  3336                           
  3337                           ;mcc.c: 122: TMR1_Initialize();
  3338  002462  ECCB  F011         	call	_TMR1_Initialize	;wreg free
  3339                           
  3340                           ;mcc.c: 123: EXT_INT_Initialize();
  3341  002466  EC87  F010         	call	_EXT_INT_Initialize	;wreg free
  3342                           
  3343                           ;mcc.c: 124: EUSART1_Initialize();
  3344  00246A  EC59  F012         	call	_EUSART1_Initialize	;wreg free
  3345                           
  3346                           ;mcc.c: 125: EUSART2_Initialize();
  3347  00246E  EC3E  F012         	call	_EUSART2_Initialize	;wreg free
  3348                           
  3349                           ;mcc.c: 127: do { WPUBbits.WPUB6 = 0; } while(0);
  3350  002472  010F               	movlb	15	; () banked
  3351  002474  9D5B               	bcf	91,6,b	;volatile
  3352                           
  3353                           ; BSR set to: 15
  3354                           
  3355                           ; BSR set to: 15
  3356                           
  3357                           ;mcc.c: 128: do { WPUBbits.WPUB7 = 0; } while(0);
  3358                           
  3359                           ; BSR set to: 15
  3360  002476  010F               	movlb	15	; () banked
  3361  002478  9F5B               	bcf	91,7,b	;volatile
  3362  00247A  0012               	return	
  3363  00247C                     __end_of_SYSTEM_Initialize:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           prodh	equ	0xFF4
  3370                           prodl	equ	0xFF3
  3371                           intcon	equ	0xFF2
  3372                           postinc0	equ	0xFEE
  3373                           wreg	equ	0xFE8
  3374                           postdec1	equ	0xFE5
  3375                           fsr1l	equ	0xFE1
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _TMR3_Initialize *****************
  3379 ;; Defined at:
  3380 ;;		line 65 in file "mcc_generated_files/tmr3.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3396 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3397 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3398 ;;Total ram usage:        2 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    5
  3401 ;; This function calls:
  3402 ;;		_TMR3_SetInterruptHandler
  3403 ;;		_TMR3_StartTimer
  3404 ;; This function is called by:
  3405 ;;		_SYSTEM_Initialize
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text5
  3410  00235A                     __ptext5:
  3411                           	opt stack 0
  3412  00235A                     _TMR3_Initialize:
  3413                           	opt stack 24
  3414                           
  3415                           ;tmr3.c: 70: T3CON = 0x30;
  3416                           
  3417                           ; BSR set to: 15
  3418                           ;incstack = 0
  3419  00235A  0E30               	movlw	48
  3420  00235C  6EB1               	movwf	4017,c	;volatile
  3421                           
  3422                           ;tmr3.c: 73: T3GCON = 0x00;
  3423  00235E  0E00               	movlw	0
  3424  002360  6EB0               	movwf	4016,c	;volatile
  3425                           
  3426                           ;tmr3.c: 76: TMR3H = 0xC2;
  3427  002362  0EC2               	movlw	194
  3428  002364  6EB3               	movwf	4019,c	;volatile
  3429                           
  3430                           ;tmr3.c: 79: TMR3L = 0xF7;
  3431  002366  0EF7               	movlw	247
  3432  002368  6EB2               	movwf	4018,c	;volatile
  3433                           
  3434                           ;tmr3.c: 82: timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
  3435  00236A  50B2               	movf	4018,w,c	;volatile
  3436  00236C  CFB3 F016          	movff	4019,??_TMR3_Initialize	;volatile
  3437  002370  6A17               	clrf	(??_TMR3_Initialize+1)& (0+255),c
  3438  002372  C016  F017         	movff	??_TMR3_Initialize,??_TMR3_Initialize+1
  3439  002376  6A16               	clrf	??_TMR3_Initialize,c
  3440  002378  1016               	iorwf	??_TMR3_Initialize,w,c
  3441  00237A  6E4A               	movwf	_timer3ReloadVal,c	;volatile
  3442  00237C  5017               	movf	??_TMR3_Initialize+1,w,c
  3443  00237E  6E4B               	movwf	_timer3ReloadVal+1,c	;volatile
  3444                           
  3445                           ;tmr3.c: 85: PIR2bits.TMR3IF = 0;
  3446  002380  92A1               	bcf	4001,1,c	;volatile
  3447                           
  3448                           ;tmr3.c: 88: PIE2bits.TMR3IE = 1;
  3449  002382  82A0               	bsf	4000,1,c	;volatile
  3450                           
  3451                           ;tmr3.c: 91: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  3452  002384  0E70               	movlw	low _TMR3_DefaultInterruptHandler
  3453  002386  6E14               	movwf	TMR3_SetInterruptHandler@InterruptHandler,c
  3454  002388  0E29               	movlw	high _TMR3_DefaultInterruptHandler
  3455  00238A  6E15               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1,c
  3456  00238C  ECE1  F014         	call	_TMR3_SetInterruptHandler	;wreg free
  3457                           
  3458                           ;tmr3.c: 94: TMR3_StartTimer();
  3459  002390  EC0E  F015         	call	_TMR3_StartTimer	;wreg free
  3460  002394  0012               	return		;funcret
  3461  002396                     __end_of_TMR3_Initialize:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           intcon	equ	0xFF2
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postdec1	equ	0xFE5
  3473                           fsr1l	equ	0xFE1
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _TMR3_StartTimer *****************
  3477 ;; Defined at:
  3478 ;;		line 97 in file "mcc_generated_files/tmr3.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		None
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3496 ;;Total ram usage:        0 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    4
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_TMR3_Initialize
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text6
  3507  002A1C                     __ptext6:
  3508                           	opt stack 0
  3509  002A1C                     _TMR3_StartTimer:
  3510                           	opt stack 24
  3511                           
  3512                           ;tmr3.c: 100: T3CONbits.TMR3ON = 1;
  3513                           
  3514                           ;incstack = 0
  3515  002A1C  80B1               	bsf	4017,0,c	;volatile
  3516  002A1E  0012               	return		;funcret
  3517  002A20                     __end_of_TMR3_StartTimer:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           prodh	equ	0xFF4
  3524                           prodl	equ	0xFF3
  3525                           intcon	equ	0xFF2
  3526                           postinc0	equ	0xFEE
  3527                           wreg	equ	0xFE8
  3528                           postdec1	equ	0xFE5
  3529                           fsr1l	equ	0xFE1
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _TMR3_SetInterruptHandler *****************
  3533 ;; Defined at:
  3534 ;;		line 178 in file "mcc_generated_files/tmr3.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  InterruptHan    2   19[COMRAM] PTR FTN()void 
  3537 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    4
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_TMR3_Initialize
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text7
  3564  0029C2                     __ptext7:
  3565                           	opt stack 0
  3566  0029C2                     _TMR3_SetInterruptHandler:
  3567                           	opt stack 24
  3568                           
  3569                           ;tmr3.c: 179: TMR3_InterruptHandler = InterruptHandler;
  3570                           
  3571                           ;incstack = 0
  3572  0029C2  C014  F1F3         	movff	TMR3_SetInterruptHandler@InterruptHandler,_TMR3_InterruptHandler
  3573  0029C6  C015  F1F4         	movff	TMR3_SetInterruptHandler@InterruptHandler+1,_TMR3_InterruptHandler+1
  3574  0029CA  0012               	return		;funcret
  3575  0029CC                     __end_of_TMR3_SetInterruptHandler:
  3576                           	opt stack 0
  3577                           tblptru	equ	0xFF8
  3578                           tblptrh	equ	0xFF7
  3579                           tblptrl	equ	0xFF6
  3580                           tablat	equ	0xFF5
  3581                           prodh	equ	0xFF4
  3582                           prodl	equ	0xFF3
  3583                           intcon	equ	0xFF2
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           status	equ	0xFD8
  3589                           
  3590 ;; *************** function _TMR2_Initialize *****************
  3591 ;; Defined at:
  3592 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, status,2, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3610 ;;Total ram usage:        0 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    5
  3613 ;; This function calls:
  3614 ;;		_TMR2_StartTimer
  3615 ;; This function is called by:
  3616 ;;		_SYSTEM_Initialize
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text8
  3621  00294A                     __ptext8:
  3622                           	opt stack 0
  3623  00294A                     _TMR2_Initialize:
  3624                           	opt stack 24
  3625                           
  3626                           ;tmr2.c: 66: T2CON = 0x01;
  3627                           
  3628                           ;incstack = 0
  3629  00294A  0E01               	movlw	1
  3630  00294C  6ECA               	movwf	4042,c	;volatile
  3631                           
  3632                           ;tmr2.c: 69: PR2 = 0x7C;
  3633  00294E  0E7C               	movlw	124
  3634  002950  6ECB               	movwf	4043,c	;volatile
  3635                           
  3636                           ;tmr2.c: 72: TMR2 = 0x00;
  3637  002952  0E00               	movlw	0
  3638  002954  6ECC               	movwf	4044,c	;volatile
  3639                           
  3640                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  3641  002956  929E               	bcf	3998,1,c	;volatile
  3642                           
  3643                           ;tmr2.c: 78: TMR2_StartTimer();
  3644  002958  EC10  F015         	call	_TMR2_StartTimer	;wreg free
  3645  00295C  0012               	return		;funcret
  3646  00295E                     __end_of_TMR2_Initialize:
  3647                           	opt stack 0
  3648                           tblptru	equ	0xFF8
  3649                           tblptrh	equ	0xFF7
  3650                           tblptrl	equ	0xFF6
  3651                           tablat	equ	0xFF5
  3652                           prodh	equ	0xFF4
  3653                           prodl	equ	0xFF3
  3654                           intcon	equ	0xFF2
  3655                           postinc0	equ	0xFEE
  3656                           wreg	equ	0xFE8
  3657                           postdec1	equ	0xFE5
  3658                           fsr1l	equ	0xFE1
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _TMR2_StartTimer *****************
  3662 ;; Defined at:
  3663 ;;		line 81 in file "mcc_generated_files/tmr2.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		None
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    4
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_TMR2_Initialize
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text9
  3692  002A20                     __ptext9:
  3693                           	opt stack 0
  3694  002A20                     _TMR2_StartTimer:
  3695                           	opt stack 24
  3696                           
  3697                           ;tmr2.c: 84: T2CONbits.TMR2ON = 1;
  3698                           
  3699                           ;incstack = 0
  3700  002A20  84CA               	bsf	4042,2,c	;volatile
  3701  002A22  0012               	return		;funcret
  3702  002A24                     __end_of_TMR2_StartTimer:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           prodh	equ	0xFF4
  3709                           prodl	equ	0xFF3
  3710                           intcon	equ	0xFF2
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postdec1	equ	0xFE5
  3714                           fsr1l	equ	0xFE1
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _TMR1_Initialize *****************
  3718 ;; Defined at:
  3719 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3735 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3737 ;;Total ram usage:        2 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    5
  3740 ;; This function calls:
  3741 ;;		_TMR1_SetInterruptHandler
  3742 ;;		_TMR1_StartTimer
  3743 ;; This function is called by:
  3744 ;;		_SYSTEM_Initialize
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text10
  3749  002396                     __ptext10:
  3750                           	opt stack 0
  3751  002396                     _TMR1_Initialize:
  3752                           	opt stack 24
  3753                           
  3754                           ;tmr1.c: 69: T1CON = 0x04;
  3755                           
  3756                           ;incstack = 0
  3757  002396  0E04               	movlw	4
  3758  002398  6ECD               	movwf	4045,c	;volatile
  3759                           
  3760                           ;tmr1.c: 72: T1GCON = 0x00;
  3761  00239A  0E00               	movlw	0
  3762  00239C  6EAA               	movwf	4010,c	;volatile
  3763                           
  3764                           ;tmr1.c: 75: TMR1H = 0xCF;
  3765  00239E  0ECF               	movlw	207
  3766  0023A0  6ECF               	movwf	4047,c	;volatile
  3767                           
  3768                           ;tmr1.c: 78: TMR1L = 0x2C;
  3769  0023A2  0E2C               	movlw	44
  3770  0023A4  6ECE               	movwf	4046,c	;volatile
  3771                           
  3772                           ;tmr1.c: 81: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3773  0023A6  50CE               	movf	4046,w,c	;volatile
  3774  0023A8  CFCF F016          	movff	4047,??_TMR1_Initialize	;volatile
  3775  0023AC  6A17               	clrf	(??_TMR1_Initialize+1)& (0+255),c
  3776  0023AE  C016  F017         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  3777  0023B2  6A16               	clrf	??_TMR1_Initialize,c
  3778  0023B4  1016               	iorwf	??_TMR1_Initialize,w,c
  3779  0023B6  6E48               	movwf	_timer1ReloadVal,c	;volatile
  3780  0023B8  5017               	movf	??_TMR1_Initialize+1,w,c
  3781  0023BA  6E49               	movwf	_timer1ReloadVal+1,c	;volatile
  3782                           
  3783                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
  3784  0023BC  909E               	bcf	3998,0,c	;volatile
  3785                           
  3786                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
  3787  0023BE  809D               	bsf	3997,0,c	;volatile
  3788                           
  3789                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3790  0023C0  0E82               	movlw	low _TMR1_DefaultInterruptHandler
  3791  0023C2  6E14               	movwf	TMR1_SetInterruptHandler@InterruptHandler,c
  3792  0023C4  0E29               	movlw	high _TMR1_DefaultInterruptHandler
  3793  0023C6  6E15               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1,c
  3794  0023C8  ECE6  F014         	call	_TMR1_SetInterruptHandler	;wreg free
  3795                           
  3796                           ;tmr1.c: 93: TMR1_StartTimer();
  3797  0023CC  EC12  F015         	call	_TMR1_StartTimer	;wreg free
  3798  0023D0  0012               	return		;funcret
  3799  0023D2                     __end_of_TMR1_Initialize:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           intcon	equ	0xFF2
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1l	equ	0xFE1
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function _TMR1_StartTimer *****************
  3815 ;; Defined at:
  3816 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		None
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    4
  3837 ;; This function calls:
  3838 ;;		Nothing
  3839 ;; This function is called by:
  3840 ;;		_TMR1_Initialize
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text11
  3845  002A24                     __ptext11:
  3846                           	opt stack 0
  3847  002A24                     _TMR1_StartTimer:
  3848                           	opt stack 24
  3849                           
  3850                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  3851                           
  3852                           ;incstack = 0
  3853  002A24  80CD               	bsf	4045,0,c	;volatile
  3854  002A26  0012               	return		;funcret
  3855  002A28                     __end_of_TMR1_StartTimer:
  3856                           	opt stack 0
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           postdec1	equ	0xFE5
  3867                           fsr1l	equ	0xFE1
  3868                           status	equ	0xFD8
  3869                           
  3870 ;; *************** function _TMR1_SetInterruptHandler *****************
  3871 ;; Defined at:
  3872 ;;		line 179 in file "mcc_generated_files/tmr1.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  InterruptHan    2   19[COMRAM] PTR FTN()void 
  3875 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3891 ;;Total ram usage:        2 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    4
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_TMR1_Initialize
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text12
  3902  0029CC                     __ptext12:
  3903                           	opt stack 0
  3904  0029CC                     _TMR1_SetInterruptHandler:
  3905                           	opt stack 24
  3906                           
  3907                           ;tmr1.c: 180: TMR1_InterruptHandler = InterruptHandler;
  3908                           
  3909                           ;incstack = 0
  3910  0029CC  C014  F1F1         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  3911  0029D0  C015  F1F2         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  3912  0029D4  0012               	return		;funcret
  3913  0029D6                     __end_of_TMR1_SetInterruptHandler:
  3914                           	opt stack 0
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           intcon	equ	0xFF2
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1l	equ	0xFE1
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _PIN_MANAGER_Initialize *****************
  3929 ;; Defined at:
  3930 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;		None
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3948 ;;Total ram usage:        0 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    4
  3951 ;; This function calls:
  3952 ;;		Nothing
  3953 ;; This function is called by:
  3954 ;;		_SYSTEM_Initialize
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text13
  3959  0026AE                     __ptext13:
  3960                           	opt stack 0
  3961  0026AE                     _PIN_MANAGER_Initialize:
  3962                           	opt stack 25
  3963                           
  3964                           ;pin_manager.c: 57: LATA = 0x00;
  3965                           
  3966                           ;incstack = 0
  3967  0026AE  0E00               	movlw	0
  3968  0026B0  6E89               	movwf	3977,c	;volatile
  3969                           
  3970                           ;pin_manager.c: 58: LATB = 0x00;
  3971  0026B2  0E00               	movlw	0
  3972  0026B4  6E8A               	movwf	3978,c	;volatile
  3973                           
  3974                           ;pin_manager.c: 59: LATC = 0x00;
  3975  0026B6  0E00               	movlw	0
  3976  0026B8  6E8B               	movwf	3979,c	;volatile
  3977                           
  3978                           ;pin_manager.c: 64: TRISA = 0xA3;
  3979  0026BA  0EA3               	movlw	163
  3980  0026BC  6E92               	movwf	3986,c	;volatile
  3981                           
  3982                           ;pin_manager.c: 65: TRISB = 0xBD;
  3983  0026BE  0EBD               	movlw	189
  3984  0026C0  6E93               	movwf	3987,c	;volatile
  3985                           
  3986                           ;pin_manager.c: 66: TRISC = 0xB8;
  3987  0026C2  0EB8               	movlw	184
  3988  0026C4  6E94               	movwf	3988,c	;volatile
  3989                           
  3990                           ;pin_manager.c: 71: ANCON0 = 0x01;
  3991  0026C6  0E01               	movlw	1
  3992  0026C8  010F               	movlb	15	; () banked
  3993  0026CA  6F5D               	movwf	93,b	;volatile
  3994                           
  3995                           ;pin_manager.c: 72: ANCON1 = 0x00;
  3996  0026CC  0E00               	movlw	0
  3997  0026CE  010F               	movlb	15	; () banked
  3998  0026D0  6F5C               	movwf	92,b	;volatile
  3999                           
  4000                           ;pin_manager.c: 77: WPUB = 0xC0;
  4001  0026D2  0EC0               	movlw	192
  4002  0026D4  010F               	movlb	15	; () banked
  4003  0026D6  6F5B               	movwf	91,b	;volatile
  4004                           
  4005                           ; BSR set to: 15
  4006                           ;pin_manager.c: 79: INTCON2bits.RBPU = 0;
  4007  0026D8  9EF1               	bcf	intcon2,7,c	;volatile
  4008                           
  4009                           ; BSR set to: 15
  4010  0026DA  0012               	return		;funcret
  4011  0026DC                     __end_of_PIN_MANAGER_Initialize:
  4012                           	opt stack 0
  4013                           tblptru	equ	0xFF8
  4014                           tblptrh	equ	0xFF7
  4015                           tblptrl	equ	0xFF6
  4016                           tablat	equ	0xFF5
  4017                           prodh	equ	0xFF4
  4018                           prodl	equ	0xFF3
  4019                           intcon	equ	0xFF2
  4020                           intcon2	equ	0xFF1
  4021                           postinc0	equ	0xFEE
  4022                           wreg	equ	0xFE8
  4023                           postdec1	equ	0xFE5
  4024                           fsr1l	equ	0xFE1
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _OSCILLATOR_Initialize *****************
  4028 ;; Defined at:
  4029 ;;		line 132 in file "mcc_generated_files/mcc.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    4
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_SYSTEM_Initialize
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text14
  4058  00295E                     __ptext14:
  4059                           	opt stack 0
  4060  00295E                     _OSCILLATOR_Initialize:
  4061                           	opt stack 25
  4062                           
  4063                           ;mcc.c: 135: OSCCON = 0x30;
  4064                           
  4065                           ; BSR set to: 15
  4066                           ;incstack = 0
  4067  00295E  0E30               	movlw	48
  4068  002960  6ED3               	movwf	4051,c	;volatile
  4069                           
  4070                           ;mcc.c: 137: OSCCON2 = 0x00;
  4071  002962  0E00               	movlw	0
  4072  002964  6ED2               	movwf	4050,c	;volatile
  4073                           
  4074                           ;mcc.c: 139: OSCTUNE = 0x00;
  4075  002966  0E00               	movlw	0
  4076  002968  6E9B               	movwf	3995,c	;volatile
  4077                           
  4078                           ;mcc.c: 141: REFOCON = 0x00;
  4079  00296A  0E00               	movlw	0
  4080  00296C  6E9A               	movwf	3994,c	;volatile
  4081  00296E  0012               	return		;funcret
  4082  002970                     __end_of_OSCILLATOR_Initialize:
  4083                           	opt stack 0
  4084                           tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           prodh	equ	0xFF4
  4089                           prodl	equ	0xFF3
  4090                           intcon	equ	0xFF2
  4091                           intcon2	equ	0xFF1
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           postdec1	equ	0xFE5
  4095                           fsr1l	equ	0xFE1
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _INTERRUPT_Initialize *****************
  4099 ;; Defined at:
  4100 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		None
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    4
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_SYSTEM_Initialize
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text15
  4129  002A28                     __ptext15:
  4130                           	opt stack 0
  4131  002A28                     _INTERRUPT_Initialize:
  4132                           	opt stack 25
  4133                           
  4134                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  4135                           
  4136                           ;incstack = 0
  4137  002A28  9ED0               	bcf	4048,7,c	;volatile
  4138  002A2A  0012               	return		;funcret
  4139  002A2C                     __end_of_INTERRUPT_Initialize:
  4140                           	opt stack 0
  4141                           tblptru	equ	0xFF8
  4142                           tblptrh	equ	0xFF7
  4143                           tblptrl	equ	0xFF6
  4144                           tablat	equ	0xFF5
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           intcon2	equ	0xFF1
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           postdec1	equ	0xFE5
  4152                           fsr1l	equ	0xFE1
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function _EXT_INT_Initialize *****************
  4156 ;; Defined at:
  4157 ;;		line 225 in file "mcc_generated_files/ext_int.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4175 ;;Total ram usage:        0 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    5
  4178 ;; This function calls:
  4179 ;;		_INT0_SetInterruptHandler
  4180 ;;		_INT1_SetInterruptHandler
  4181 ;;		_INT2_SetInterruptHandler
  4182 ;;		_INT3_SetInterruptHandler
  4183 ;; This function is called by:
  4184 ;;		_SYSTEM_Initialize
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text16
  4189  00210E                     __ptext16:
  4190                           	opt stack 0
  4191  00210E                     _EXT_INT_Initialize:
  4192                           	opt stack 24
  4193                           
  4194                           ;ext_int.c: 234: (INTCON3bits.INT1IF = 0);
  4195                           
  4196                           ;incstack = 0
  4197  00210E  90F0               	bcf	intcon3,0,c	;volatile
  4198                           
  4199                           ;ext_int.c: 235: (INTCON2bits.INTEDG1 = 1);
  4200  002110  8AF1               	bsf	intcon2,5,c	;volatile
  4201                           
  4202                           ;ext_int.c: 237: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  4203  002112  0E00               	movlw	0
  4204  002114  6E14               	movwf	INT1_SetInterruptHandler@InterruptHandler,c
  4205  002116  0E00               	movlw	0
  4206  002118  6E15               	movwf	INT1_SetInterruptHandler@InterruptHandler+1,c
  4207  00211A  ECF5  F014         	call	_INT1_SetInterruptHandler	;wreg free
  4208                           
  4209                           ;ext_int.c: 246: (INTCON3bits.INT2IF = 0);
  4210  00211E  92F0               	bcf	intcon3,1,c	;volatile
  4211                           
  4212                           ;ext_int.c: 247: (INTCON2bits.INTEDG2 = 1);
  4213  002120  88F1               	bsf	intcon2,4,c	;volatile
  4214                           
  4215                           ;ext_int.c: 249: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  4216  002122  0E00               	movlw	0
  4217  002124  6E14               	movwf	INT2_SetInterruptHandler@InterruptHandler,c
  4218  002126  0E00               	movlw	0
  4219  002128  6E15               	movwf	INT2_SetInterruptHandler@InterruptHandler+1,c
  4220  00212A  ECF0  F014         	call	_INT2_SetInterruptHandler	;wreg free
  4221                           
  4222                           ;ext_int.c: 258: (INTCONbits.INT0IF = 0);
  4223  00212E  92F2               	bcf	intcon,1,c	;volatile
  4224                           
  4225                           ;ext_int.c: 259: (INTCON2bits.INTEDG0 = 1);
  4226  002130  8CF1               	bsf	intcon2,6,c	;volatile
  4227                           
  4228                           ;ext_int.c: 261: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  4229  002132  0E00               	movlw	0
  4230  002134  6E14               	movwf	INT0_SetInterruptHandler@InterruptHandler,c
  4231  002136  0E00               	movlw	0
  4232  002138  6E15               	movwf	INT0_SetInterruptHandler@InterruptHandler+1,c
  4233  00213A  ECFA  F014         	call	_INT0_SetInterruptHandler	;wreg free
  4234                           
  4235                           ;ext_int.c: 270: (INTCON3bits.INT3IF = 0);
  4236  00213E  94F0               	bcf	intcon3,2,c	;volatile
  4237                           
  4238                           ;ext_int.c: 271: (INTCON2bits.INTEDG3 = 0);
  4239  002140  96F1               	bcf	intcon2,3,c	;volatile
  4240                           
  4241                           ;ext_int.c: 273: INT3_SetInterruptHandler(INT3_DefaultInterruptHandler);
  4242  002142  0E2E               	movlw	low _INT3_DefaultInterruptHandler
  4243  002144  6E14               	movwf	INT3_SetInterruptHandler@InterruptHandler,c
  4244  002146  0E2A               	movlw	high _INT3_DefaultInterruptHandler
  4245  002148  6E15               	movwf	INT3_SetInterruptHandler@InterruptHandler+1,c
  4246  00214A  ECEB  F014         	call	_INT3_SetInterruptHandler	;wreg free
  4247                           
  4248                           ;ext_int.c: 274: (INTCON3bits.INT3IE = 1);
  4249  00214E  8AF0               	bsf	intcon3,5,c	;volatile
  4250  002150  0012               	return		;funcret
  4251  002152                     __end_of_EXT_INT_Initialize:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           intcon	equ	0xFF2
  4260                           intcon2	equ	0xFF1
  4261                           intcon3	equ	0xFF0
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _INT3_SetInterruptHandler *****************
  4269 ;; Defined at:
  4270 ;;		line 202 in file "mcc_generated_files/ext_int.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  InterruptHan    2   19[COMRAM] PTR FTN()void 
  4273 ;;		 -> INT3_DefaultInterruptHandler(1), 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      void 
  4278 ;; Registers used:
  4279 ;;		wreg, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4285 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4288 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4289 ;;Total ram usage:        2 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    4
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_EXT_INT_Initialize
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text17
  4300  0029D6                     __ptext17:
  4301                           	opt stack 0
  4302  0029D6                     _INT3_SetInterruptHandler:
  4303                           	opt stack 24
  4304                           
  4305                           ;ext_int.c: 203: INT3_InterruptHandler = InterruptHandler;
  4306                           
  4307                           ;incstack = 0
  4308  0029D6  C014  F1EF         	movff	INT3_SetInterruptHandler@InterruptHandler,_INT3_InterruptHandler
  4309  0029DA  C015  F1F0         	movff	INT3_SetInterruptHandler@InterruptHandler+1,_INT3_InterruptHandler+1
  4310  0029DE  0012               	return		;funcret
  4311  0029E0                     __end_of_INT3_SetInterruptHandler:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           intcon2	equ	0xFF1
  4321                           intcon3	equ	0xFF0
  4322                           postinc0	equ	0xFEE
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1l	equ	0xFE1
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _INT2_SetInterruptHandler *****************
  4329 ;; Defined at:
  4330 ;;		line 114 in file "mcc_generated_files/ext_int.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  InterruptHan    2   19[COMRAM] PTR FTN()void 
  4333 ;;		 -> INT2_DefaultInterruptHandler(1), 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4349 ;;Total ram usage:        2 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    4
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_EXT_INT_Initialize
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text18
  4360  0029E0                     __ptext18:
  4361                           	opt stack 0
  4362  0029E0                     _INT2_SetInterruptHandler:
  4363                           	opt stack 24
  4364                           
  4365                           ;ext_int.c: 115: INT2_InterruptHandler = InterruptHandler;
  4366                           
  4367                           ;incstack = 0
  4368  0029E0  C014  F1ED         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  4369  0029E4  C015  F1EE         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  4370  0029E8  0012               	return		;funcret
  4371  0029EA                     __end_of_INT2_SetInterruptHandler:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           intcon	equ	0xFF2
  4380                           intcon2	equ	0xFF1
  4381                           intcon3	equ	0xFF0
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           postdec1	equ	0xFE5
  4385                           fsr1l	equ	0xFE1
  4386                           status	equ	0xFD8
  4387                           
  4388 ;; *************** function _INT1_SetInterruptHandler *****************
  4389 ;; Defined at:
  4390 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  InterruptHan    2   19[COMRAM] PTR FTN()void 
  4393 ;;		 -> INT1_DefaultInterruptHandler(1), 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;		None
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4409 ;;Total ram usage:        2 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    4
  4412 ;; This function calls:
  4413 ;;		Nothing
  4414 ;; This function is called by:
  4415 ;;		_EXT_INT_Initialize
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text19
  4420  0029EA                     __ptext19:
  4421                           	opt stack 0
  4422  0029EA                     _INT1_SetInterruptHandler:
  4423                           	opt stack 24
  4424                           
  4425                           ;ext_int.c: 74: INT1_InterruptHandler = InterruptHandler;
  4426                           
  4427                           ;incstack = 0
  4428  0029EA  C014  F1EB         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  4429  0029EE  C015  F1EC         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  4430  0029F2  0012               	return		;funcret
  4431  0029F4                     __end_of_INT1_SetInterruptHandler:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           intcon	equ	0xFF2
  4440                           intcon2	equ	0xFF1
  4441                           intcon3	equ	0xFF0
  4442                           postinc0	equ	0xFEE
  4443                           wreg	equ	0xFE8
  4444                           postdec1	equ	0xFE5
  4445                           fsr1l	equ	0xFE1
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _INT0_SetInterruptHandler *****************
  4449 ;; Defined at:
  4450 ;;		line 155 in file "mcc_generated_files/ext_int.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  InterruptHan    2   19[COMRAM] PTR FTN()void 
  4453 ;;		 -> INT0_DefaultInterruptHandler(1), 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4469 ;;Total ram usage:        2 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    4
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_EXT_INT_Initialize
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text20
  4480  0029F4                     __ptext20:
  4481                           	opt stack 0
  4482  0029F4                     _INT0_SetInterruptHandler:
  4483                           	opt stack 24
  4484                           
  4485                           ;ext_int.c: 156: INT0_InterruptHandler = InterruptHandler;
  4486                           
  4487                           ;incstack = 0
  4488  0029F4  C014  F1E9         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  4489  0029F8  C015  F1EA         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  4490  0029FC  0012               	return		;funcret
  4491  0029FE                     __end_of_INT0_SetInterruptHandler:
  4492                           	opt stack 0
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           intcon	equ	0xFF2
  4500                           intcon2	equ	0xFF1
  4501                           intcon3	equ	0xFF0
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           postdec1	equ	0xFE5
  4505                           fsr1l	equ	0xFE1
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _EUSART2_Initialize *****************
  4509 ;; Defined at:
  4510 ;;		line 78 in file "mcc_generated_files/eusart2.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    4
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_SYSTEM_Initialize
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text21
  4539  00247C                     __ptext21:
  4540                           	opt stack 0
  4541  00247C                     _EUSART2_Initialize:
  4542                           	opt stack 25
  4543                           
  4544                           ;eusart2.c: 81: PIE3bits.RC2IE = 0;
  4545                           
  4546                           ;incstack = 0
  4547  00247C  9AA3               	bcf	4003,5,c	;volatile
  4548                           
  4549                           ;eusart2.c: 82: PIE3bits.TX2IE = 0;
  4550  00247E  98A3               	bcf	4003,4,c	;volatile
  4551                           
  4552                           ;eusart2.c: 87: BAUDCON2 = 0x08;
  4553  002480  0E08               	movlw	8
  4554  002482  6EB9               	movwf	4025,c	;volatile
  4555                           
  4556                           ;eusart2.c: 90: RCSTA2 = 0x90;
  4557  002484  0E90               	movlw	144
  4558  002486  6EA6               	movwf	4006,c	;volatile
  4559                           
  4560                           ;eusart2.c: 93: TXSTA2 = 0x26;
  4561  002488  0E26               	movlw	38
  4562  00248A  6EBA               	movwf	4026,c	;volatile
  4563                           
  4564                           ;eusart2.c: 96: SPBRG2 = 0x0C;
  4565  00248C  0E0C               	movlw	12
  4566  00248E  6E7B               	movwf	3963,c	;volatile
  4567                           
  4568                           ;eusart2.c: 99: SPBRGH2 = 0x00;
  4569  002490  0E00               	movlw	0
  4570  002492  6E7C               	movwf	3964,c	;volatile
  4571                           
  4572                           ;eusart2.c: 103: eusart2TxHead = 0;
  4573  002494  0E00               	movlw	0
  4574  002496  6E3D               	movwf	_eusart2TxHead,c	;volatile
  4575                           
  4576                           ;eusart2.c: 104: eusart2TxTail = 0;
  4577  002498  0E00               	movlw	0
  4578  00249A  6E3E               	movwf	_eusart2TxTail,c	;volatile
  4579                           
  4580                           ;eusart2.c: 105: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  4581  00249C  0E08               	movlw	8
  4582  00249E  0101               	movlb	1	; () banked
  4583  0024A0  6FF7               	movwf	_eusart2TxBufferRemaining& (0+255),b	;volatile
  4584                           
  4585                           ;eusart2.c: 107: eusart2RxHead = 0;
  4586  0024A2  0E00               	movlw	0
  4587  0024A4  6E3B               	movwf	_eusart2RxHead,c	;volatile
  4588                           
  4589                           ;eusart2.c: 108: eusart2RxTail = 0;
  4590  0024A6  0E00               	movlw	0
  4591  0024A8  6E3C               	movwf	_eusart2RxTail,c	;volatile
  4592                           
  4593                           ;eusart2.c: 109: eusart2RxCount = 0;
  4594  0024AA  0E00               	movlw	0
  4595  0024AC  6E3A               	movwf	_eusart2RxCount,c	;volatile
  4596                           
  4597                           ; BSR set to: 1
  4598                           ;eusart2.c: 112: PIE3bits.RC2IE = 1;
  4599  0024AE  8AA3               	bsf	4003,5,c	;volatile
  4600                           
  4601                           ; BSR set to: 1
  4602  0024B0  0012               	return		;funcret
  4603  0024B2                     __end_of_EUSART2_Initialize:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           intcon	equ	0xFF2
  4612                           intcon2	equ	0xFF1
  4613                           intcon3	equ	0xFF0
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1l	equ	0xFE1
  4618                           status	equ	0xFD8
  4619                           
  4620 ;; *************** function _EUSART1_Initialize *****************
  4621 ;; Defined at:
  4622 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  1    wreg      void 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4640 ;;Total ram usage:        0 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    4
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_SYSTEM_Initialize
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text22
  4651  0024B2                     __ptext22:
  4652                           	opt stack 0
  4653  0024B2                     _EUSART1_Initialize:
  4654                           	opt stack 25
  4655                           
  4656                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  4657                           
  4658                           ; BSR set to: 1
  4659                           ;incstack = 0
  4660  0024B2  9A9D               	bcf	3997,5,c	;volatile
  4661                           
  4662                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  4663  0024B4  989D               	bcf	3997,4,c	;volatile
  4664                           
  4665                           ;eusart1.c: 84: BAUDCON1 = 0x08;
  4666  0024B6  0E08               	movlw	8
  4667  0024B8  6EA7               	movwf	4007,c	;volatile
  4668                           
  4669                           ;eusart1.c: 87: RCSTA1 = 0x90;
  4670  0024BA  0E90               	movlw	144
  4671  0024BC  6EAB               	movwf	4011,c	;volatile
  4672                           
  4673                           ;eusart1.c: 90: TXSTA1 = 0x24;
  4674  0024BE  0E24               	movlw	36
  4675  0024C0  6EAC               	movwf	4012,c	;volatile
  4676                           
  4677                           ;eusart1.c: 93: SPBRG1 = 0x0C;
  4678  0024C2  0E0C               	movlw	12
  4679  0024C4  6EAF               	movwf	4015,c	;volatile
  4680                           
  4681                           ;eusart1.c: 96: SPBRGH1 = 0x00;
  4682  0024C6  0E00               	movlw	0
  4683  0024C8  6E7D               	movwf	3965,c	;volatile
  4684                           
  4685                           ;eusart1.c: 100: eusart1TxHead = 0;
  4686  0024CA  0E00               	movlw	0
  4687  0024CC  6E38               	movwf	_eusart1TxHead,c	;volatile
  4688                           
  4689                           ;eusart1.c: 101: eusart1TxTail = 0;
  4690  0024CE  0E00               	movlw	0
  4691  0024D0  6E39               	movwf	_eusart1TxTail,c	;volatile
  4692                           
  4693                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  4694  0024D2  0E08               	movlw	8
  4695  0024D4  0101               	movlb	1	; () banked
  4696  0024D6  6FF6               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  4697                           
  4698                           ;eusart1.c: 104: eusart1RxHead = 0;
  4699  0024D8  0E00               	movlw	0
  4700  0024DA  6E36               	movwf	_eusart1RxHead,c	;volatile
  4701                           
  4702                           ;eusart1.c: 105: eusart1RxTail = 0;
  4703  0024DC  0E00               	movlw	0
  4704  0024DE  6E37               	movwf	_eusart1RxTail,c	;volatile
  4705                           
  4706                           ;eusart1.c: 106: eusart1RxCount = 0;
  4707  0024E0  0E00               	movlw	0
  4708  0024E2  6E35               	movwf	_eusart1RxCount,c	;volatile
  4709                           
  4710                           ; BSR set to: 1
  4711                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
  4712  0024E4  8A9D               	bsf	3997,5,c	;volatile
  4713                           
  4714                           ; BSR set to: 1
  4715  0024E6  0012               	return		;funcret
  4716  0024E8                     __end_of_EUSART1_Initialize:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           intcon2	equ	0xFF1
  4726                           intcon3	equ	0xFF0
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           postdec1	equ	0xFE5
  4730                           fsr1l	equ	0xFE1
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _EPWM1_Initialize *****************
  4734 ;; Defined at:
  4735 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    4
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_SYSTEM_Initialize
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text23
  4764  002820                     __ptext23:
  4765                           	opt stack 0
  4766  002820                     _EPWM1_Initialize:
  4767                           	opt stack 25
  4768                           
  4769                           ;epwm1.c: 68: CCP1CON = 0x1F;
  4770                           
  4771                           ; BSR set to: 1
  4772                           ;incstack = 0
  4773  002820  0E1F               	movlw	31
  4774  002822  6EBB               	movwf	4027,c	;volatile
  4775                           
  4776                           ;epwm1.c: 71: ECCP1AS = 0x00;
  4777  002824  0E00               	movlw	0
  4778  002826  6EBF               	movwf	4031,c	;volatile
  4779                           
  4780                           ;epwm1.c: 74: PSTR1CON = 0x00;
  4781  002828  0E00               	movlw	0
  4782  00282A  6E9C               	movwf	3996,c	;volatile
  4783                           
  4784                           ;epwm1.c: 75: PSTR1CONbits.STRB = 1;
  4785  00282C  829C               	bsf	3996,1,c	;volatile
  4786                           
  4787                           ;epwm1.c: 78: ECCP1DEL = 0x80;
  4788  00282E  0E80               	movlw	128
  4789  002830  6EBE               	movwf	4030,c	;volatile
  4790                           
  4791                           ;epwm1.c: 81: CCPR1L = 0x3E;
  4792  002832  0E3E               	movlw	62
  4793  002834  6EBC               	movwf	4028,c	;volatile
  4794                           
  4795                           ;epwm1.c: 84: CCPR1H = 0x00;
  4796  002836  0E00               	movlw	0
  4797  002838  6EBD               	movwf	4029,c	;volatile
  4798                           
  4799                           ;epwm1.c: 88: CCPTMRSbits.C1TSEL = 0x0;
  4800  00283A  9099               	bcf	3993,0,c	;volatile
  4801  00283C  0012               	return		;funcret
  4802  00283E                     __end_of_EPWM1_Initialize:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           intcon2	equ	0xFF1
  4812                           intcon3	equ	0xFF0
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1l	equ	0xFE1
  4817                           status	equ	0xFD8
  4818                           
  4819 ;; *************** function _ADC_Initialize *****************
  4820 ;; Defined at:
  4821 ;;		line 58 in file "mcc_generated_files/adc.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;		None
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  1    wreg      void 
  4828 ;; Registers used:
  4829 ;;		wreg, status,2
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4839 ;;Total ram usage:        0 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    4
  4842 ;; This function calls:
  4843 ;;		Nothing
  4844 ;; This function is called by:
  4845 ;;		_SYSTEM_Initialize
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text24
  4850  002898                     __ptext24:
  4851                           	opt stack 0
  4852  002898                     _ADC_Initialize:
  4853                           	opt stack 25
  4854                           
  4855                           ;adc.c: 63: ADCON0 = 0x01;
  4856                           
  4857                           ;incstack = 0
  4858  002898  0E01               	movlw	1
  4859  00289A  6EC2               	movwf	4034,c	;volatile
  4860                           
  4861                           ;adc.c: 66: ADCON1 = 0x80;
  4862  00289C  0E80               	movlw	128
  4863  00289E  6EC1               	movwf	4033,c	;volatile
  4864                           
  4865                           ;adc.c: 69: ADCON2 = 0x39;
  4866  0028A0  0E39               	movlw	57
  4867  0028A2  6EC0               	movwf	4032,c	;volatile
  4868                           
  4869                           ;adc.c: 72: ADRESH = 0x00;
  4870  0028A4  0E00               	movlw	0
  4871  0028A6  6EC4               	movwf	4036,c	;volatile
  4872                           
  4873                           ;adc.c: 75: ADRESL = 0x00;
  4874  0028A8  0E00               	movlw	0
  4875  0028AA  6EC3               	movwf	4035,c	;volatile
  4876                           
  4877                           ;adc.c: 78: PIE1bits.ADIE = 1;
  4878  0028AC  8C9D               	bsf	3997,6,c	;volatile
  4879                           
  4880                           ;adc.c: 80: ADC_Data = 0;
  4881  0028AE  0E00               	movlw	0
  4882  0028B0  6E27               	movwf	_ADC_Data,c
  4883  0028B2  0012               	return		;funcret
  4884  0028B4                     __end_of_ADC_Initialize:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon2	equ	0xFF1
  4894                           intcon3	equ	0xFF0
  4895                           postinc0	equ	0xFEE
  4896                           wreg	equ	0xFE8
  4897                           postdec1	equ	0xFE5
  4898                           fsr1l	equ	0xFE1
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _PWR_SW_Check *****************
  4902 ;; Defined at:
  4903 ;;		line 465 in file "main.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  2  856[None  ] int 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4920 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4921 ;;Total ram usage:        1 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    4
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_main
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text25
  4932  001AF2                     __ptext25:
  4933                           	opt stack 0
  4934  001AF2                     _PWR_SW_Check:
  4935                           	opt stack 26
  4936                           
  4937                           ;main.c: 469: if(PORTBbits.RB3 == 0)
  4938                           
  4939                           ;incstack = 0
  4940  001AF2  B681               	btfsc	3969,3,c	;volatile
  4941  001AF4  0012               	return	
  4942                           
  4943                           ;main.c: 470: {
  4944                           ;main.c: 472: counter = 10000;
  4945  001AF6  0E27               	movlw	39
  4946  001AF8  6E24               	movwf	_counter+1,c
  4947  001AFA  0E10               	movlw	16
  4948  001AFC  6E23               	movwf	_counter,c
  4949  001AFE                     l5787:
  4950  001AFE  0623               	decf	_counter,f,c
  4951  001B00  A0D8               	btfss	status,0,c
  4952  001B02  0624               	decf	_counter+1,f,c
  4953  001B04  2823               	incf	_counter,w,c
  4954  001B06  E1FB               	bnz	l5787
  4955  001B08  2824               	incf	_counter+1,w,c
  4956  001B0A  A4D8               	btfss	status,2,c
  4957  001B0C  D7F8               	goto	l5787
  4958                           
  4959                           ;main.c: 475: if(PORTBbits.RB3 == 0)
  4960  001B0E  B681               	btfsc	3969,3,c	;volatile
  4961  001B10  0012               	return	
  4962                           
  4963                           ;main.c: 476: {
  4964                           ;main.c: 477: LATCbits.LATC0 = 1;
  4965  001B12  808B               	bsf	3979,0,c	;volatile
  4966                           
  4967                           ;main.c: 478: do { LATAbits.LATA6 = 0; } while(0);
  4968  001B14  9C89               	bcf	3977,6,c	;volatile
  4969                           
  4970                           ;main.c: 479: do { LATAbits.LATA3 = 1; } while(0);
  4971  001B16  8689               	bsf	3977,3,c	;volatile
  4972                           
  4973                           ;main.c: 482: Shutdown_Process = 1;
  4974  001B18  0E01               	movlw	1
  4975  001B1A  6E33               	movwf	_Shutdown_Process,c
  4976                           
  4977                           ;main.c: 489: do { TRISBbits.TRISB7 = 1; } while(0);
  4978  001B1C  8E93               	bsf	3987,7,c	;volatile
  4979                           
  4980                           ;main.c: 490: do { WPUBbits.WPUB7 = 0; } while(0);
  4981  001B1E  010F               	movlb	15	; () banked
  4982  001B20  9F5B               	bcf	91,7,b	;volatile
  4983                           
  4984                           ; BSR set to: 15
  4985                           ;main.c: 498: counter = 0;
  4986  001B22  0E00               	movlw	0
  4987  001B24  6E24               	movwf	_counter+1,c
  4988  001B26  0E00               	movlw	0
  4989  001B28  D00E               	goto	L1
  4990  001B2A                     l5797:
  4991                           
  4992                           ;main.c: 500: {
  4993                           ;main.c: 501: counter++;
  4994  001B2A  4A23               	infsnz	_counter,f,c
  4995  001B2C  2A24               	incf	_counter+1,f,c
  4996                           
  4997                           ;main.c: 502: _delay((unsigned long)((10)*(1000000/4000.0)));
  4998  001B2E  0E04               	movlw	4
  4999  001B30  6E14               	movwf	??_PWR_SW_Check& (0+255),c
  5000  001B32  0E3E               	movlw	62
  5001  001B34                     u7057:
  5002  001B34  2EE8               	decfsz	wreg,f,c
  5003  001B36  D7FE               	goto	u7057
  5004  001B38  2E14               	decfsz	??_PWR_SW_Check& (0+255),f,c
  5005  001B3A  D7FC               	goto	u7057
  5006                           
  5007                           ;main.c: 503: if(PORTBbits.RB7 == 0)
  5008  001B3C  BE81               	btfsc	3969,7,c	;volatile
  5009  001B3E  D004               	goto	l5805
  5010                           
  5011                           ;main.c: 504: {
  5012                           ;main.c: 505: counter = 5001;
  5013  001B40  0E13               	movlw	19
  5014  001B42  6E24               	movwf	_counter+1,c
  5015  001B44  0E89               	movlw	137
  5016  001B46                     L1:
  5017  001B46  6E23               	movwf	_counter,c
  5018  001B48                     l5805:
  5019  001B48  0ED0               	movlw	208
  5020  001B4A  5C23               	subwf	_counter,w,c
  5021  001B4C  0E07               	movlw	7
  5022  001B4E  5824               	subwfb	_counter+1,w,c
  5023  001B50  A0D8               	btfss	status,0,c
  5024  001B52  D7EB               	goto	l5797
  5025                           
  5026                           ;main.c: 506: }
  5027                           ;main.c: 508: }
  5028                           ;main.c: 511: counter = 100;
  5029  001B54  0E00               	movlw	0
  5030  001B56  6E24               	movwf	_counter+1,c
  5031  001B58  0E64               	movlw	100
  5032  001B5A  6E23               	movwf	_counter,c
  5033                           
  5034                           ;main.c: 512: while(counter--)
  5035  001B5C  D007               	goto	l5811
  5036  001B5E                     l5809:
  5037                           
  5038                           ;main.c: 513: {
  5039                           ;main.c: 514: _delay((unsigned long)((10)*(1000000/4000.0)));
  5040  001B5E  0E04               	movlw	4
  5041  001B60  6E14               	movwf	??_PWR_SW_Check& (0+255),c
  5042  001B62  0E3E               	movlw	62
  5043  001B64                     u7067:
  5044  001B64  2EE8               	decfsz	wreg,f,c
  5045  001B66  D7FE               	goto	u7067
  5046  001B68  2E14               	decfsz	??_PWR_SW_Check& (0+255),f,c
  5047  001B6A  D7FC               	goto	u7067
  5048  001B6C                     l5811:
  5049  001B6C  0623               	decf	_counter,f,c
  5050  001B6E  A0D8               	btfss	status,0,c
  5051  001B70  0624               	decf	_counter+1,f,c
  5052  001B72  2823               	incf	_counter,w,c
  5053  001B74  E1F4               	bnz	l5809
  5054  001B76  2824               	incf	_counter+1,w,c
  5055  001B78  A4D8               	btfss	status,2,c
  5056  001B7A  D7F1               	goto	l5809
  5057                           
  5058                           ;main.c: 515: }
  5059                           ;main.c: 519: do { LATAbits.LATA2 = 0; } while(0);
  5060  001B7C  9489               	bcf	3977,2,c	;volatile
  5061  001B7E  0003               	sleep		;# 
  5062  001B80  0012               	return	
  5063  001B82                     __end_of_PWR_SW_Check:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           intcon2	equ	0xFF1
  5073                           intcon3	equ	0xFF0
  5074                           postinc0	equ	0xFEE
  5075                           wreg	equ	0xFE8
  5076                           postdec1	equ	0xFE5
  5077                           fsr1l	equ	0xFE1
  5078                           status	equ	0xFD8
  5079                           
  5080 ;; *************** function _PI_UART_SYNC *****************
  5081 ;; Defined at:
  5082 ;;		line 535 in file "main.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;		None
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;  data            2   25[COMRAM] unsigned char [2]
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5099 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5100 ;;Total ram usage:        3 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    6
  5103 ;; This function calls:
  5104 ;;		_EUSART2_Read
  5105 ;;		_EUSART2_Write_Array
  5106 ;; This function is called by:
  5107 ;;		_main
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           	psect	text26
  5112  0021DA                     __ptext26:
  5113                           	opt stack 0
  5114  0021DA                     _PI_UART_SYNC:
  5115                           	opt stack 24
  5116                           
  5117                           ;main.c: 537: uint8_t data[2] = {'E', 'Q'};
  5118                           
  5119                           ;incstack = 0
  5120  0021DA  C1E7  F01A         	movff	PI_UART_SYNC@F18305,PI_UART_SYNC@data
  5121  0021DE  C1E8  F01B         	movff	PI_UART_SYNC@F18305+1,PI_UART_SYNC@data+1
  5122                           
  5123                           ;main.c: 540: if(Pi_Syncd != 1)
  5124  0021E2  042F               	decf	_Pi_Syncd,w,c
  5125  0021E4  B4D8               	btfsc	status,2,c
  5126  0021E6  0012               	return	
  5127                           
  5128                           ;main.c: 541: {
  5129                           ;main.c: 543: EUSART2_Write_Array(data, 2);
  5130  0021E8  0E1A               	movlw	low PI_UART_SYNC@data
  5131  0021EA  6E15               	movwf	EUSART2_Write_Array@data,c
  5132  0021EC  0E00               	movlw	high PI_UART_SYNC@data
  5133  0021EE  6E16               	movwf	EUSART2_Write_Array@data+1,c
  5134  0021F0  0E02               	movlw	2
  5135  0021F2  6E17               	movwf	EUSART2_Write_Array@length,c
  5136  0021F4  ECC3  F012         	call	_EUSART2_Write_Array	;wreg free
  5137                           
  5138                           ;main.c: 544: _delay((unsigned long)((10)*(1000000/4000.0)));
  5139  0021F8  0E04               	movlw	4
  5140  0021FA  6E19               	movwf	??_PI_UART_SYNC& (0+255),c
  5141  0021FC  0E3E               	movlw	62
  5142  0021FE                     u7077:
  5143  0021FE  2EE8               	decfsz	wreg,f,c
  5144  002200  D7FE               	goto	u7077
  5145  002202  2E19               	decfsz	??_PI_UART_SYNC& (0+255),f,c
  5146  002204  D7FC               	goto	u7077
  5147                           
  5148                           ;main.c: 547: if(eusart2RxCount > 0)
  5149  002206  503A               	movf	_eusart2RxCount,w,c	;volatile
  5150  002208  B4D8               	btfsc	status,2,c
  5151  00220A  0012               	return	
  5152                           
  5153                           ;main.c: 548: {
  5154                           ;main.c: 549: if(EUSART2_Read() == 'e')
  5155  00220C  EC8F  F012         	call	_EUSART2_Read	;wreg free
  5156  002210  0A65               	xorlw	101
  5157  002212  A4D8               	btfss	status,2,c
  5158  002214  0012               	return	
  5159                           
  5160                           ;main.c: 550: {
  5161                           ;main.c: 551: Pi_Syncd = 1;
  5162  002216  0E01               	movlw	1
  5163  002218  6E2F               	movwf	_Pi_Syncd,c
  5164  00221A  0012               	return	
  5165  00221C                     __end_of_PI_UART_SYNC:
  5166                           	opt stack 0
  5167                           tblptru	equ	0xFF8
  5168                           tblptrh	equ	0xFF7
  5169                           tblptrl	equ	0xFF6
  5170                           tablat	equ	0xFF5
  5171                           prodh	equ	0xFF4
  5172                           prodl	equ	0xFF3
  5173                           intcon	equ	0xFF2
  5174                           intcon2	equ	0xFF1
  5175                           intcon3	equ	0xFF0
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           postdec1	equ	0xFE5
  5179                           fsr1l	equ	0xFE1
  5180                           status	equ	0xFD8
  5181                           
  5182 ;; *************** function _EUSART2_Read *****************
  5183 ;; Defined at:
  5184 ;;		line 115 in file "mcc_generated_files/eusart2.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;		None
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  readValue       1   19[COMRAM] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      unsigned char 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5202 ;;Total ram usage:        1 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    4
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_PI_UART_SYNC
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text27
  5213  00251E                     __ptext27:
  5214                           	opt stack 0
  5215  00251E                     _EUSART2_Read:
  5216                           	opt stack 25
  5217                           
  5218                           ;eusart2.c: 117: uint8_t readValue = 0;
  5219                           
  5220                           ;incstack = 0
  5221  00251E  0E00               	movlw	0
  5222  002520  6E14               	movwf	EUSART2_Read@readValue,c
  5223  002522                     l5415:
  5224  002522  503A               	movf	_eusart2RxCount,w,c	;volatile
  5225  002524  B4D8               	btfsc	status,2,c
  5226  002526  D7FD               	goto	l5415
  5227                           
  5228                           ;eusart2.c: 121: }
  5229                           ;eusart2.c: 123: readValue = eusart2RxBuffer[eusart2RxTail++];
  5230  002528  503C               	movf	_eusart2RxTail,w,c	;volatile
  5231  00252A  0D01               	mullw	1
  5232  00252C  0E30               	movlw	low _eusart2RxBuffer
  5233  00252E  24F3               	addwf	prodl,w,c
  5234  002530  6ED9               	movwf	fsr2l,c
  5235  002532  0E01               	movlw	high _eusart2RxBuffer
  5236  002534  20F4               	addwfc	prodh,w,c
  5237  002536  6EDA               	movwf	fsr2h,c
  5238  002538  50DF               	movf	indf2,w,c
  5239  00253A  6E14               	movwf	EUSART2_Read@readValue,c
  5240  00253C  2A3C               	incf	_eusart2RxTail,f,c	;volatile
  5241                           
  5242                           ;eusart2.c: 124: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  5243  00253E  0E07               	movlw	7
  5244  002540  643C               	cpfsgt	_eusart2RxTail,c	;volatile
  5245  002542  D002               	goto	l5425
  5246                           
  5247                           ;eusart2.c: 125: {
  5248                           ;eusart2.c: 126: eusart2RxTail = 0;
  5249  002544  0E00               	movlw	0
  5250  002546  6E3C               	movwf	_eusart2RxTail,c	;volatile
  5251  002548                     l5425:
  5252                           
  5253                           ;eusart2.c: 127: }
  5254                           ;eusart2.c: 128: PIE3bits.RC2IE = 0;
  5255  002548  9AA3               	bcf	4003,5,c	;volatile
  5256                           
  5257                           ;eusart2.c: 129: eusart2RxCount--;
  5258  00254A  063A               	decf	_eusart2RxCount,f,c	;volatile
  5259                           
  5260                           ;eusart2.c: 130: PIE3bits.RC2IE = 1;
  5261  00254C  8AA3               	bsf	4003,5,c	;volatile
  5262                           
  5263                           ;eusart2.c: 132: return readValue;
  5264  00254E  5014               	movf	EUSART2_Read@readValue,w,c
  5265  002550  0012               	return	
  5266  002552                     __end_of_EUSART2_Read:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           intcon3	equ	0xFF0
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _LED_Check *****************
  5287 ;; Defined at:
  5288 ;;		line 232 in file "main.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5306 ;;Total ram usage:        1 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    4
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text28
  5317  001D16                     __ptext28:
  5318                           	opt stack 0
  5319  001D16                     _LED_Check:
  5320                           	opt stack 26
  5321                           
  5322                           ;main.c: 236: if(Blue_Blink_Timer >= (1))
  5323                           
  5324                           ;incstack = 0
  5325  001D16  502B               	movf	_Blue_Blink_Timer,w,c	;volatile
  5326  001D18  B4D8               	btfsc	status,2,c
  5327  001D1A  D018               	goto	l5841
  5328                           
  5329                           ;main.c: 237: {
  5330                           ;main.c: 239: Blue_Blink_Timer = 0;
  5331  001D1C  0E00               	movlw	0
  5332  001D1E  6E2B               	movwf	_Blue_Blink_Timer,c	;volatile
  5333                           
  5334                           ;main.c: 242: if(Battery_Percent > 20)
  5335  001D20  0E14               	movlw	20
  5336  001D22  6446               	cpfsgt	_Battery_Percent,c	;volatile
  5337  001D24  D012               	goto	l1161
  5338                           
  5339                           ;main.c: 243: {
  5340                           ;main.c: 246: if(Screen_Control == 1)
  5341  001D26  0432               	decf	_Screen_Control,w,c
  5342  001D28  A4D8               	btfss	status,2,c
  5343  001D2A  D00D               	goto	l1158
  5344                           
  5345                           ;main.c: 247: {
  5346                           ;main.c: 248: do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
  5347  001D2C  A08B               	btfss	3979,0,c	;volatile
  5348  001D2E  D002               	goto	u4330
  5349  001D30  0E01               	movlw	1
  5350  001D32  D001               	goto	u4336
  5351  001D34                     u4330:
  5352  001D34  0E00               	movlw	0
  5353  001D36                     u4336:
  5354  001D36  0AFF               	xorlw	255
  5355  001D38  6E14               	movwf	??_LED_Check& (0+255),c
  5356  001D3A  508B               	movf	3979,w,c	;volatile
  5357  001D3C  1814               	xorwf	??_LED_Check,w,c
  5358  001D3E  0BFE               	andlw	-2
  5359  001D40  1814               	xorwf	??_LED_Check,w,c
  5360  001D42  6E8B               	movwf	3979,c	;volatile
  5361                           
  5362                           ;main.c: 249: }
  5363  001D44  D003               	goto	l5841
  5364  001D46                     l1158:
  5365  001D46  808B               	bsf	3979,0,c	;volatile
  5366                           
  5367                           ;main.c: 254: }
  5368                           ;main.c: 255: }
  5369  001D48  D001               	goto	l5841
  5370  001D4A                     l1161:
  5371  001D4A  908B               	bcf	3979,0,c	;volatile
  5372  001D4C                     l5841:
  5373                           
  5374                           ;main.c: 261: }
  5375                           ;main.c: 262: }
  5376                           ;main.c: 266: if(Red_Blink_Timer >= (1))
  5377  001D4C  5031               	movf	_Red_Blink_Timer,w,c	;volatile
  5378  001D4E  B4D8               	btfsc	status,2,c
  5379  001D50  0012               	return	
  5380                           
  5381                           ;main.c: 267: {
  5382                           ;main.c: 269: Red_Blink_Timer = 0;
  5383  001D52  0E00               	movlw	0
  5384  001D54  6E31               	movwf	_Red_Blink_Timer,c	;volatile
  5385                           
  5386                           ;main.c: 272: if(Battery_Percent <= 10)
  5387  001D56  0E0B               	movlw	11
  5388  001D58  6046               	cpfslt	_Battery_Percent,c	;volatile
  5389  001D5A  D00E               	goto	l5849
  5390                           
  5391                           ;main.c: 273: {
  5392                           ;main.c: 274: do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  5393  001D5C  A28B               	btfss	3979,1,c	;volatile
  5394  001D5E  D002               	goto	u4360
  5395  001D60  0E01               	movlw	1
  5396  001D62  D001               	goto	u4366
  5397  001D64                     u4360:
  5398  001D64  0E00               	movlw	0
  5399  001D66                     u4366:
  5400  001D66  0AFF               	xorlw	255
  5401  001D68  6E14               	movwf	??_LED_Check& (0+255),c
  5402  001D6A  4614               	rlncf	??_LED_Check,f,c
  5403  001D6C  508B               	movf	3979,w,c	;volatile
  5404  001D6E  1814               	xorwf	??_LED_Check,w,c
  5405  001D70  0BFD               	andlw	-3
  5406  001D72  1814               	xorwf	??_LED_Check,w,c
  5407  001D74  6E8B               	movwf	3979,c	;volatile
  5408                           
  5409                           ;main.c: 275: }
  5410  001D76  0012               	return	
  5411  001D78                     l5849:
  5412                           
  5413                           ;main.c: 277: else if(Battery_Percent <= 20)
  5414  001D78  0E15               	movlw	21
  5415  001D7A  6046               	cpfslt	_Battery_Percent,c	;volatile
  5416  001D7C  D002               	goto	l1172
  5417                           
  5418                           ;main.c: 278: {
  5419                           ;main.c: 279: do { LATCbits.LATC1 = 1; } while(0);
  5420  001D7E  828B               	bsf	3979,1,c	;volatile
  5421                           
  5422                           ;main.c: 280: }
  5423  001D80  0012               	return	
  5424  001D82                     l1172:
  5425  001D82  928B               	bcf	3979,1,c	;volatile
  5426  001D84  0012               	return	
  5427  001D86                     __end_of_LED_Check:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           intcon	equ	0xFF2
  5436                           intcon2	equ	0xFF1
  5437                           intcon3	equ	0xFF0
  5438                           postinc0	equ	0xFEE
  5439                           wreg	equ	0xFE8
  5440                           postdec1	equ	0xFE5
  5441                           fsr1l	equ	0xFE1
  5442                           indf2	equ	0xFDF
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _I2C_Initialize *****************
  5448 ;; Defined at:
  5449 ;;		line 198 in file "mcc_generated_files/i2c.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5467 ;;Total ram usage:        0 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    4
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_main
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text29
  5478  00240E                     __ptext29:
  5479                           	opt stack 0
  5480  00240E                     _I2C_Initialize:
  5481                           	opt stack 26
  5482                           
  5483                           ;i2c.c: 200: i2c_object.pTrHead = i2c_tr_queue;
  5484                           
  5485                           ;incstack = 0
  5486  00240E  0ECC               	movlw	low _i2c_tr_queue
  5487  002410  0100               	movlb	0	; () banked
  5488  002412  6FAD               	movwf	(_i2c_object+2)& (0+255),b
  5489  002414  0E01               	movlw	high _i2c_tr_queue
  5490  002416  0100               	movlb	0	; () banked
  5491  002418  6FAE               	movwf	(_i2c_object+3)& (0+255),b
  5492                           
  5493                           ;i2c.c: 201: i2c_object.pTrTail = i2c_tr_queue;
  5494  00241A  0ECC               	movlw	low _i2c_tr_queue
  5495  00241C  0100               	movlb	0	; () banked
  5496  00241E  6FAB               	movwf	_i2c_object& (0+255),b
  5497  002420  0E01               	movlw	high _i2c_tr_queue
  5498  002422  0100               	movlb	0	; () banked
  5499  002424  6FAC               	movwf	(_i2c_object+1)& (0+255),b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;i2c.c: 202: i2c_object.trStatus.s.empty = 1;
  5503  002426  0100               	movlb	0	; () banked
  5504  002428  83AF               	bsf	(_i2c_object+4)& (0+255),1,b
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;i2c.c: 203: i2c_object.trStatus.s.full = 0;
  5508  00242A  0100               	movlb	0	; () banked
  5509  00242C  91AF               	bcf	(_i2c_object+4)& (0+255),0,b
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;i2c.c: 205: i2c_object.i2cErrors = 0;
  5513  00242E  0E00               	movlw	0
  5514  002430  0100               	movlb	0	; () banked
  5515  002432  6FB1               	movwf	(_i2c_object+6)& (0+255),b
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;i2c.c: 208: SSPSTAT = 0x00;
  5519  002434  0E00               	movlw	0
  5520  002436  6EC7               	movwf	4039,c	;volatile
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;i2c.c: 210: SSPCON1 = 0x28;
  5524  002438  0E28               	movlw	40
  5525  00243A  6EC6               	movwf	4038,c	;volatile
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;i2c.c: 212: SSPADD = 0x03;
  5529  00243C  0E03               	movlw	3
  5530  00243E  6EC8               	movwf	4040,c	;volatile
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;i2c.c: 216: PIR1bits.SSPIF = 0;
  5534  002440  969E               	bcf	3998,3,c	;volatile
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;i2c.c: 218: PIE1bits.SSPIE = 1;
  5538  002442  869D               	bsf	3997,3,c	;volatile
  5539                           
  5540                           ; BSR set to: 0
  5541  002444  0012               	return		;funcret
  5542  002446                     __end_of_I2C_Initialize:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           intcon	equ	0xFF2
  5551                           intcon2	equ	0xFF1
  5552                           intcon3	equ	0xFF0
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1l	equ	0xFE1
  5557                           indf2	equ	0xFDF
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _Headphone_Check *****************
  5563 ;; Defined at:
  5564 ;;		line 439 in file "main.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;		None
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5582 ;;Total ram usage:        0 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    8
  5585 ;; This function calls:
  5586 ;;		_Headphones
  5587 ;; This function is called by:
  5588 ;;		_main
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text30
  5593  00283E                     __ptext30:
  5594                           	opt stack 0
  5595  00283E                     _Headphone_Check:
  5596                           	opt stack 22
  5597                           
  5598                           ;main.c: 445: if(Headphones_In == 0)
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;incstack = 0
  5602  00283E  502E               	movf	_Headphones_In,w,c
  5603  002840  A4D8               	btfss	status,2,c
  5604  002842  D006               	goto	l1213
  5605                           
  5606                           ;main.c: 446: {
  5607                           ;main.c: 447: if(PORTBbits.RB0)
  5608  002844  A081               	btfss	3969,0,c	;volatile
  5609  002846  0012               	return	
  5610                           
  5611                           ;main.c: 448: {
  5612                           ;main.c: 449: Headphones(1);
  5613  002848  0E01               	movlw	1
  5614  00284A  EC6F  F00B         	call	_Headphones
  5615                           
  5616                           ;main.c: 450: }
  5617                           ;main.c: 451: }
  5618  00284E  0012               	return	
  5619  002850                     l1213:
  5620                           
  5621                           ;main.c: 452: else
  5622                           ;main.c: 453: {
  5623                           ;main.c: 454: if(!PORTBbits.RB0)
  5624  002850  B081               	btfsc	3969,0,c	;volatile
  5625  002852  0012               	return	
  5626                           
  5627                           ;main.c: 455: {
  5628                           ;main.c: 456: Headphones(0);
  5629  002854  0E00               	movlw	0
  5630  002856  EC6F  F00B         	call	_Headphones
  5631  00285A  0012               	return	
  5632  00285C                     __end_of_Headphone_Check:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon2	equ	0xFF1
  5642                           intcon3	equ	0xFF0
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           postdec1	equ	0xFE5
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _Headphones *****************
  5653 ;; Defined at:
  5654 ;;		line 210 in file "sound_control.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  State           1    wreg     unsigned char 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  State           1    7[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5672 ;;Total ram usage:        1 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    7
  5675 ;; This function calls:
  5676 ;;		_I2C_Write
  5677 ;; This function is called by:
  5678 ;;		_main
  5679 ;;		_Headphone_Check
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text31
  5684  0016DE                     __ptext31:
  5685                           	opt stack 0
  5686  0016DE                     _Headphones:
  5687                           	opt stack 23
  5688                           
  5689                           ;incstack = 0
  5690                           ;Headphones@State stored from wreg
  5691  0016DE  0100               	movlb	0	; () banked
  5692  0016E0  6F67               	movwf	Headphones@State& (0+255),b
  5693                           
  5694                           ;sound_control.c: 213: if(State == 1)
  5695  0016E2  0100               	movlb	0	; () banked
  5696  0016E4  0567               	decf	Headphones@State& (0+255),w,b
  5697  0016E6  A4D8               	btfss	status,2,c
  5698  0016E8  D02D               	goto	l7023
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;sound_control.c: 214: {
  5702                           ;sound_control.c: 215: Headphones_In = 1;
  5703  0016EA  0E01               	movlw	1
  5704  0016EC  6E2E               	movwf	_Headphones_In,c
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;sound_control.c: 217: I2C_Write(0b0011000, 0x00, 0x01);
  5708  0016EE  0E00               	movlw	0
  5709  0016F0  6E1D               	movwf	I2C_Write@Register,c
  5710  0016F2  0E01               	movlw	1
  5711  0016F4  6E1E               	movwf	I2C_Write@Data,c
  5712  0016F6  0E18               	movlw	24
  5713  0016F8  ECF5  F00E         	call	_I2C_Write
  5714                           
  5715                           ;sound_control.c: 218: I2C_Write(0b0011000, 0x09, 0x20);
  5716  0016FC  0E09               	movlw	9
  5717  0016FE  6E1D               	movwf	I2C_Write@Register,c
  5718  001700  0E20               	movlw	32
  5719  001702  6E1E               	movwf	I2C_Write@Data,c
  5720  001704  0E18               	movlw	24
  5721  001706  ECF5  F00E         	call	_I2C_Write
  5722                           
  5723                           ;sound_control.c: 219: I2C_Write(0b0011000, 0x0C, 0x08);
  5724  00170A  0E0C               	movlw	12
  5725  00170C  6E1D               	movwf	I2C_Write@Register,c
  5726  00170E  0E08               	movlw	8
  5727  001710  6E1E               	movwf	I2C_Write@Data,c
  5728  001712  0E18               	movlw	24
  5729  001714  ECF5  F00E         	call	_I2C_Write
  5730                           
  5731                           ;sound_control.c: 220: I2C_Write(0b0011000, 0x10, 0x0C);
  5732  001718  0E10               	movlw	16
  5733  00171A  6E1D               	movwf	I2C_Write@Register,c
  5734  00171C  0E0C               	movlw	12
  5735  00171E  6E1E               	movwf	I2C_Write@Data,c
  5736  001720  0E18               	movlw	24
  5737  001722  ECF5  F00E         	call	_I2C_Write
  5738                           
  5739                           ;sound_control.c: 221: I2C_Write(0b0011000, 0x2D, 0x00);
  5740  001726  0E2D               	movlw	45
  5741  001728  6E1D               	movwf	I2C_Write@Register,c
  5742  00172A  0E00               	movlw	0
  5743  00172C  6E1E               	movwf	I2C_Write@Data,c
  5744  00172E  0E18               	movlw	24
  5745  001730  ECF5  F00E         	call	_I2C_Write
  5746                           
  5747                           ;sound_control.c: 222: I2C_Write(0b0011000, 0x00, 0x00);
  5748  001734  0E00               	movlw	0
  5749  001736  6E1D               	movwf	I2C_Write@Register,c
  5750  001738  0E00               	movlw	0
  5751  00173A  6E1E               	movwf	I2C_Write@Data,c
  5752  00173C  0E18               	movlw	24
  5753  00173E  ECF5  F00E         	call	_I2C_Write
  5754                           
  5755                           ;sound_control.c: 223: }
  5756  001742  0012               	return	
  5757  001744                     l7023:
  5758                           
  5759                           ;sound_control.c: 224: else
  5760                           ;sound_control.c: 225: {
  5761                           ;sound_control.c: 226: Headphones_In = 0;
  5762  001744  0E00               	movlw	0
  5763  001746  6E2E               	movwf	_Headphones_In,c
  5764                           
  5765                           ;sound_control.c: 228: I2C_Write(0b0011000, 0x00, 0x01);
  5766  001748  0E00               	movlw	0
  5767  00174A  6E1D               	movwf	I2C_Write@Register,c
  5768  00174C  0E01               	movlw	1
  5769  00174E  6E1E               	movwf	I2C_Write@Data,c
  5770  001750  0E18               	movlw	24
  5771  001752  ECF5  F00E         	call	_I2C_Write
  5772                           
  5773                           ;sound_control.c: 229: I2C_Write(0b0011000, 0x2D, 0x02);
  5774  001756  0E2D               	movlw	45
  5775  001758  6E1D               	movwf	I2C_Write@Register,c
  5776  00175A  0E02               	movlw	2
  5777  00175C  6E1E               	movwf	I2C_Write@Data,c
  5778  00175E  0E18               	movlw	24
  5779  001760  ECF5  F00E         	call	_I2C_Write
  5780                           
  5781                           ;sound_control.c: 230: I2C_Write(0b0011000, 0x09, 0x00);
  5782  001764  0E09               	movlw	9
  5783  001766  6E1D               	movwf	I2C_Write@Register,c
  5784  001768  0E00               	movlw	0
  5785  00176A  6E1E               	movwf	I2C_Write@Data,c
  5786  00176C  0E18               	movlw	24
  5787  00176E  ECF5  F00E         	call	_I2C_Write
  5788                           
  5789                           ;sound_control.c: 231: I2C_Write(0b0011000, 0x0C, 0x00);
  5790  001772  0E0C               	movlw	12
  5791  001774  6E1D               	movwf	I2C_Write@Register,c
  5792  001776  0E00               	movlw	0
  5793  001778  6E1E               	movwf	I2C_Write@Data,c
  5794  00177A  0E18               	movlw	24
  5795  00177C  ECF5  F00E         	call	_I2C_Write
  5796                           
  5797                           ;sound_control.c: 232: I2C_Write(0b0011000, 0x10, 0x40);
  5798  001780  0E10               	movlw	16
  5799  001782  6E1D               	movwf	I2C_Write@Register,c
  5800  001784  0E40               	movlw	64
  5801  001786  6E1E               	movwf	I2C_Write@Data,c
  5802  001788  0E18               	movlw	24
  5803  00178A  ECF5  F00E         	call	_I2C_Write
  5804                           
  5805                           ;sound_control.c: 233: I2C_Write(0b0011000, 0x00, 0x00);
  5806  00178E  0E00               	movlw	0
  5807  001790  6E1D               	movwf	I2C_Write@Register,c
  5808  001792  0E00               	movlw	0
  5809  001794  6E1E               	movwf	I2C_Write@Data,c
  5810  001796  0E18               	movlw	24
  5811  001798  ECF5  F00E         	call	_I2C_Write
  5812  00179C  0012               	return	
  5813  00179E                     __end_of_Headphones:
  5814                           	opt stack 0
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           intcon	equ	0xFF2
  5822                           intcon2	equ	0xFF1
  5823                           intcon3	equ	0xFF0
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1l	equ	0xFE1
  5828                           indf2	equ	0xFDF
  5829                           fsr2h	equ	0xFDA
  5830                           fsr2l	equ	0xFD9
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function _Debug_Mode *****************
  5834 ;; Defined at:
  5835 ;;		line 479 in file "Debug.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5853 ;;Total ram usage:        1 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:   10
  5856 ;; This function calls:
  5857 ;;		_DebugMenu
  5858 ;;		_EUSART1_Read
  5859 ;; This function is called by:
  5860 ;;		_main
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text32
  5865  001C9C                     __ptext32:
  5866                           	opt stack 0
  5867  001C9C                     _Debug_Mode:
  5868                           	opt stack 20
  5869                           
  5870                           ;Debug.c: 482: if(Red_Blink_Timer > (1))
  5871                           
  5872                           ;incstack = 0
  5873  001C9C  0E01               	movlw	1
  5874  001C9E  6431               	cpfsgt	_Red_Blink_Timer,c	;volatile
  5875  001CA0  D012               	goto	l7221
  5876                           
  5877                           ;Debug.c: 483: {
  5878                           ;Debug.c: 484: Red_Blink_Timer = 0;
  5879  001CA2  0E00               	movlw	0
  5880  001CA4  6E31               	movwf	_Red_Blink_Timer,c	;volatile
  5881                           
  5882                           ;Debug.c: 485: do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  5883  001CA6  A28B               	btfss	3979,1,c	;volatile
  5884  001CA8  D002               	goto	u6390
  5885  001CAA  0E01               	movlw	1
  5886  001CAC  D001               	goto	u6396
  5887  001CAE                     u6390:
  5888  001CAE  0E00               	movlw	0
  5889  001CB0                     u6396:
  5890  001CB0  0AFF               	xorlw	255
  5891  001CB2  0100               	movlb	0	; () banked
  5892  001CB4  6FAA               	movwf	??_Debug_Mode& (0+255),b
  5893  001CB6  0100               	movlb	0	; () banked
  5894  001CB8  47AA               	rlncf	??_Debug_Mode& (0+255),f,b
  5895  001CBA  508B               	movf	3979,w,c	;volatile
  5896  001CBC  0100               	movlb	0	; () banked
  5897  001CBE  19AA               	xorwf	??_Debug_Mode& (0+255),w,b
  5898  001CC0  0BFD               	andlw	-3
  5899  001CC2  19AA               	xorwf	??_Debug_Mode& (0+255),w,b
  5900  001CC4  6E8B               	movwf	3979,c	;volatile
  5901  001CC6                     l7221:
  5902  001CC6  848B               	bsf	3979,2,c	;volatile
  5903                           
  5904                           ;Debug.c: 490: LATCbits.LATC0 = !PORTBbits.RB5;
  5905  001CC8  BA81               	btfsc	3969,5,c	;volatile
  5906  001CCA  D004               	goto	u6400
  5907  001CCC  0100               	movlb	0	; () banked
  5908  001CCE  6BAA               	clrf	??_Debug_Mode& (0+255),b
  5909  001CD0  2BAA               	incf	??_Debug_Mode& (0+255),f,b
  5910  001CD2  D002               	goto	u6418
  5911  001CD4                     u6400:
  5912  001CD4  0100               	movlb	0	; () banked
  5913  001CD6  6BAA               	clrf	??_Debug_Mode& (0+255),b
  5914  001CD8                     u6418:
  5915  001CD8  508B               	movf	3979,w,c	;volatile
  5916  001CDA  0100               	movlb	0	; () banked
  5917  001CDC  19AA               	xorwf	??_Debug_Mode& (0+255),w,b
  5918  001CDE  0BFE               	andlw	-2
  5919  001CE0  19AA               	xorwf	??_Debug_Mode& (0+255),w,b
  5920  001CE2  6E8B               	movwf	3979,c	;volatile
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;Debug.c: 491: LATCbits.LATC0 = !PORTBbits.RB4;
  5924  001CE4  B881               	btfsc	3969,4,c	;volatile
  5925  001CE6  D004               	goto	u6420
  5926  001CE8  0100               	movlb	0	; () banked
  5927  001CEA  6BAA               	clrf	??_Debug_Mode& (0+255),b
  5928  001CEC  2BAA               	incf	??_Debug_Mode& (0+255),f,b
  5929  001CEE  D002               	goto	u6438
  5930  001CF0                     u6420:
  5931  001CF0  0100               	movlb	0	; () banked
  5932  001CF2  6BAA               	clrf	??_Debug_Mode& (0+255),b
  5933  001CF4                     u6438:
  5934  001CF4  508B               	movf	3979,w,c	;volatile
  5935  001CF6  0100               	movlb	0	; () banked
  5936  001CF8  19AA               	xorwf	??_Debug_Mode& (0+255),w,b
  5937  001CFA  0BFE               	andlw	-2
  5938  001CFC  19AA               	xorwf	??_Debug_Mode& (0+255),w,b
  5939  001CFE  6E8B               	movwf	3979,c	;volatile
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;Debug.c: 494: if((eusart1RxCount))
  5943  001D00  5035               	movf	_eusart1RxCount,w,c	;volatile
  5944  001D02  B4D8               	btfsc	status,2,c
  5945  001D04  0012               	return	
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;Debug.c: 495: {
  5949                           ;Debug.c: 496: if('D' == EUSART1_Read())
  5950  001D06  ECA9  F012         	call	_EUSART1_Read	;wreg free
  5951  001D0A  0A44               	xorlw	68
  5952  001D0C  A4D8               	btfss	status,2,c
  5953  001D0E  0012               	return	
  5954                           
  5955                           ;Debug.c: 497: {
  5956                           ;Debug.c: 498: DebugMenu();
  5957  001D10  EC76  F009         	call	_DebugMenu	;wreg free
  5958  001D14  0012               	return	
  5959  001D16                     __end_of_Debug_Mode:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           intcon	equ	0xFF2
  5968                           intcon2	equ	0xFF1
  5969                           intcon3	equ	0xFF0
  5970                           postinc0	equ	0xFEE
  5971                           wreg	equ	0xFE8
  5972                           postdec1	equ	0xFE5
  5973                           fsr1l	equ	0xFE1
  5974                           indf2	equ	0xFDF
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _DebugMenu *****************
  5980 ;; Defined at:
  5981 ;;		line 12 in file "Debug.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  selection       1   73[BANK0 ] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5999 ;;Total ram usage:        1 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    9
  6002 ;; This function calls:
  6003 ;;		_ADC_Debug
  6004 ;;		_Battery_Display
  6005 ;;		_EUSART1_Read
  6006 ;;		_EUSART1_Write
  6007 ;;		_LED_Control
  6008 ;;		_MAX17048_Communication
  6009 ;;		_Screen_Brightness_Debug
  6010 ;;		_TAS2521_Communication
  6011 ;;		_printf
  6012 ;; This function is called by:
  6013 ;;		_main
  6014 ;;		_Debug_Mode
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text33
  6019  0012EC                     __ptext33:
  6020                           	opt stack 0
  6021  0012EC                     _DebugMenu:
  6022                           	opt stack 20
  6023                           
  6024                           ;Debug.c: 14: unsigned char selection = 0;
  6025                           
  6026                           ;incstack = 0
  6027  0012EC  0E00               	movlw	0
  6028  0012EE  0100               	movlb	0	; () banked
  6029  0012F0  6FA9               	movwf	DebugMenu@selection& (0+255),b
  6030                           
  6031                           ;Debug.c: 16: while(selection != 'x' && selection != 'X')
  6032  0012F2  D08C               	goto	l7067
  6033  0012F4                     l7049:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;Debug.c: 17: {
  6037                           ;Debug.c: 18: printf("\n\nThis is the main menu.  Make a selection: \n");
  6038  0012F4  0E50               	movlw	low STR_1
  6039  0012F6  0100               	movlb	0	; () banked
  6040  0012F8  6F60               	movwf	printf@f& (0+255),b
  6041  0012FA  0E7C               	movlw	high STR_1
  6042  0012FC  0100               	movlb	0	; () banked
  6043  0012FE  6F61               	movwf	(printf@f+1)& (0+255),b
  6044  001300  EC8D  F000         	call	_printf	;wreg free
  6045                           
  6046                           ;Debug.c: 19: printf("1: LED Control\n");
  6047  001304  0E34               	movlw	low STR_2
  6048  001306  0100               	movlb	0	; () banked
  6049  001308  6F60               	movwf	printf@f& (0+255),b
  6050  00130A  0E7F               	movlw	high STR_2
  6051  00130C  0100               	movlb	0	; () banked
  6052  00130E  6F61               	movwf	(printf@f+1)& (0+255),b
  6053  001310  EC8D  F000         	call	_printf	;wreg free
  6054                           
  6055                           ;Debug.c: 20: printf("2: TAS2521 communication\n");
  6056  001314  0EB3               	movlw	low STR_3
  6057  001316  0100               	movlb	0	; () banked
  6058  001318  6F60               	movwf	printf@f& (0+255),b
  6059  00131A  0E7D               	movlw	high STR_3
  6060  00131C  0100               	movlb	0	; () banked
  6061  00131E  6F61               	movwf	(printf@f+1)& (0+255),b
  6062  001320  EC8D  F000         	call	_printf	;wreg free
  6063                           
  6064                           ;Debug.c: 21: printf("3: MAX17048 communication\n");
  6065  001324  0E98               	movlw	low STR_4
  6066  001326  0100               	movlb	0	; () banked
  6067  001328  6F60               	movwf	printf@f& (0+255),b
  6068  00132A  0E7D               	movlw	high STR_4
  6069  00132C  0100               	movlb	0	; () banked
  6070  00132E  6F61               	movwf	(printf@f+1)& (0+255),b
  6071  001330  EC8D  F000         	call	_printf	;wreg free
  6072                           
  6073                           ;Debug.c: 22: printf("4: ADC\n");
  6074  001334  0EA2               	movlw	low STR_5
  6075  001336  0100               	movlb	0	; () banked
  6076  001338  6F60               	movwf	printf@f& (0+255),b
  6077  00133A  0E7F               	movlw	high STR_5
  6078  00133C  0100               	movlb	0	; () banked
  6079  00133E  6F61               	movwf	(printf@f+1)& (0+255),b
  6080  001340  EC8D  F000         	call	_printf	;wreg free
  6081                           
  6082                           ;Debug.c: 23: printf("5: Battery Display\n");
  6083  001344  0EAF               	movlw	low STR_6
  6084  001346  0100               	movlb	0	; () banked
  6085  001348  6F60               	movwf	printf@f& (0+255),b
  6086  00134A  0E7E               	movlw	high STR_6
  6087  00134C  0100               	movlb	0	; () banked
  6088  00134E  6F61               	movwf	(printf@f+1)& (0+255),b
  6089  001350  EC8D  F000         	call	_printf	;wreg free
  6090                           
  6091                           ;Debug.c: 24: printf("6: Screen Brightness\n");
  6092  001354  0E5A               	movlw	low STR_7
  6093  001356  0100               	movlb	0	; () banked
  6094  001358  6F60               	movwf	printf@f& (0+255),b
  6095  00135A  0E7E               	movlw	high STR_7
  6096  00135C  0100               	movlb	0	; () banked
  6097  00135E  6F61               	movwf	(printf@f+1)& (0+255),b
  6098  001360  EC8D  F000         	call	_printf	;wreg free
  6099                           
  6100                           ;Debug.c: 25: printf("X:  Exit\n\n");
  6101  001364  0E78               	movlw	low STR_8
  6102  001366  0100               	movlb	0	; () banked
  6103  001368  6F60               	movwf	printf@f& (0+255),b
  6104  00136A  0E7F               	movlw	high STR_8
  6105  00136C  0100               	movlb	0	; () banked
  6106  00136E  6F61               	movwf	(printf@f+1)& (0+255),b
  6107  001370  EC8D  F000         	call	_printf	;wreg free
  6108                           
  6109                           ;Debug.c: 27: printf("Selection:  ");
  6110  001374  0E5F               	movlw	low STR_9
  6111  001376  0100               	movlb	0	; () banked
  6112  001378  6F60               	movwf	printf@f& (0+255),b
  6113  00137A  0E7F               	movlw	high STR_9
  6114  00137C  0100               	movlb	0	; () banked
  6115  00137E  6F61               	movwf	(printf@f+1)& (0+255),b
  6116  001380  EC8D  F000         	call	_printf	;wreg free
  6117                           
  6118                           ;Debug.c: 30: selection = EUSART1_Read();
  6119  001384  ECA9  F012         	call	_EUSART1_Read	;wreg free
  6120  001388  0100               	movlb	0	; () banked
  6121  00138A  6FA9               	movwf	DebugMenu@selection& (0+255),b
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;Debug.c: 31: EUSART1_Write(selection);
  6125  00138C  0100               	movlb	0	; () banked
  6126  00138E  51A9               	movf	DebugMenu@selection& (0+255),w,b
  6127  001390  EC6F  F011         	call	_EUSART1_Write
  6128                           
  6129                           ;Debug.c: 33: switch(selection)
  6130  001394  D020               	goto	l7065
  6131  001396                     l7055:
  6132                           
  6133                           ;Debug.c: 36: {
  6134                           ;Debug.c: 37: LED_Control();
  6135  001396  EC44  F003         	call	_LED_Control	;wreg free
  6136                           
  6137                           ;Debug.c: 38: break;
  6138  00139A  D038               	goto	l7067
  6139  00139C                     l7057:
  6140                           
  6141                           ;Debug.c: 41: {
  6142                           ;Debug.c: 42: TAS2521_Communication();
  6143  00139C  ECD4  F007         	call	_TAS2521_Communication	;wreg free
  6144                           
  6145                           ;Debug.c: 43: break;
  6146  0013A0  D035               	goto	l7067
  6147  0013A2                     l7059:
  6148                           
  6149                           ;Debug.c: 46: {
  6150                           ;Debug.c: 47: MAX17048_Communication();
  6151  0013A2  ECC2  F005         	call	_MAX17048_Communication	;wreg free
  6152  0013A6                     l1386:
  6153                           
  6154                           ;Debug.c: 50: {
  6155                           ;Debug.c: 51: ADC_Debug();
  6156  0013A6  EC11  F00A         	call	_ADC_Debug	;wreg free
  6157  0013AA                     l1387:
  6158                           
  6159                           ;Debug.c: 54: {
  6160                           ;Debug.c: 55: Battery_Display();
  6161  0013AA  ECDC  F006         	call	_Battery_Display	;wreg free
  6162  0013AE                     l1388:
  6163                           
  6164                           ;Debug.c: 58: {
  6165                           ;Debug.c: 59: Screen_Brightness_Debug();
  6166  0013AE  ECE4  F00C         	call	_Screen_Brightness_Debug	;wreg free
  6167  0013B2                     l1390:
  6168                           
  6169                           ;Debug.c: 62: case 'X':
  6170                           ;Debug.c: 63: {
  6171                           ;Debug.c: 64: printf("\n\nQuitting Application...");
  6172  0013B2  0ECD               	movlw	low STR_10
  6173  0013B4  0100               	movlb	0	; () banked
  6174  0013B6  6F60               	movwf	printf@f& (0+255),b
  6175  0013B8  0E7D               	movlw	high STR_10
  6176  0013BA  0100               	movlb	0	; () banked
  6177  0013BC  6F61               	movwf	(printf@f+1)& (0+255),b
  6178  0013BE  EC8D  F000         	call	_printf	;wreg free
  6179                           
  6180                           ;Debug.c: 65: break;
  6181  0013C2  D024               	goto	l7067
  6182  0013C4                     l7061:
  6183                           
  6184                           ;Debug.c: 69: printf("\n\nInvalid selection...");
  6185  0013C4  0EFF               	movlw	low STR_11
  6186  0013C6  0100               	movlb	0	; () banked
  6187  0013C8  6F60               	movwf	printf@f& (0+255),b
  6188  0013CA  0E7D               	movlw	high STR_11
  6189  0013CC  0100               	movlb	0	; () banked
  6190  0013CE  6F61               	movwf	(printf@f+1)& (0+255),b
  6191  0013D0  EC8D  F000         	call	_printf	;wreg free
  6192                           
  6193                           ;Debug.c: 71: }
  6194                           
  6195                           ;Debug.c: 70: break;
  6196  0013D4  D01B               	goto	l7067
  6197  0013D6                     l7065:
  6198  0013D6  0100               	movlb	0	; () banked
  6199  0013D8  51A9               	movf	DebugMenu@selection& (0+255),w,b
  6200                           
  6201                           ; Switch size 1, requested type "space"
  6202                           ; Number of cases is 8, Range of values is 49 to 120
  6203                           ; switch strategies available:
  6204                           ; Name         Instructions Cycles
  6205                           ; simple_byte           25    13 (average)
  6206                           ;	Chosen strategy is simple_byte
  6207  0013DA  0A31               	xorlw	49	; case 49
  6208  0013DC  B4D8               	btfsc	status,2,c
  6209  0013DE  D7DB               	goto	l7055
  6210  0013E0  0A03               	xorlw	3	; case 50
  6211  0013E2  B4D8               	btfsc	status,2,c
  6212  0013E4  D7DB               	goto	l7057
  6213  0013E6  0A01               	xorlw	1	; case 51
  6214  0013E8  B4D8               	btfsc	status,2,c
  6215  0013EA  D7DB               	goto	l7059
  6216  0013EC  0A07               	xorlw	7	; case 52
  6217  0013EE  B4D8               	btfsc	status,2,c
  6218  0013F0  D7DA               	goto	l1386
  6219  0013F2  0A01               	xorlw	1	; case 53
  6220  0013F4  B4D8               	btfsc	status,2,c
  6221  0013F6  D7D9               	goto	l1387
  6222  0013F8  0A03               	xorlw	3	; case 54
  6223  0013FA  B4D8               	btfsc	status,2,c
  6224  0013FC  D7D8               	goto	l1388
  6225  0013FE  0A6E               	xorlw	110	; case 88
  6226  001400  B4D8               	btfsc	status,2,c
  6227  001402  D7D7               	goto	l1390
  6228  001404  0A20               	xorlw	32	; case 120
  6229  001406  B4D8               	btfsc	status,2,c
  6230  001408  D7D4               	goto	l1390
  6231  00140A  D7DC               	goto	l7061
  6232  00140C                     l7067:
  6233  00140C  0E78               	movlw	120
  6234  00140E  0100               	movlb	0	; () banked
  6235  001410  19A9               	xorwf	DebugMenu@selection& (0+255),w,b
  6236  001412  B4D8               	btfsc	status,2,c
  6237  001414  0012               	return	
  6238                           
  6239                           ; BSR set to: 0
  6240  001416  0E58               	movlw	88
  6241  001418  0100               	movlb	0	; () banked
  6242  00141A  19A9               	xorwf	DebugMenu@selection& (0+255),w,b
  6243  00141C  B4D8               	btfsc	status,2,c
  6244  00141E  0012               	return	
  6245  001420  D769               	goto	l7049
  6246  001422                     __end_of_DebugMenu:
  6247                           	opt stack 0
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           prodh	equ	0xFF4
  6253                           prodl	equ	0xFF3
  6254                           intcon	equ	0xFF2
  6255                           intcon2	equ	0xFF1
  6256                           intcon3	equ	0xFF0
  6257                           postinc0	equ	0xFEE
  6258                           wreg	equ	0xFE8
  6259                           postdec1	equ	0xFE5
  6260                           fsr1l	equ	0xFE1
  6261                           indf2	equ	0xFDF
  6262                           fsr2h	equ	0xFDA
  6263                           fsr2l	equ	0xFD9
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function _TAS2521_Communication *****************
  6267 ;; Defined at:
  6268 ;;		line 158 in file "Debug.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  i2c_data        2   14[BANK0 ] unsigned char [2]
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6286 ;;Total ram usage:        2 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    8
  6289 ;; This function calls:
  6290 ;;		_I2C_MasterQueueIsEmpty
  6291 ;;		_I2C_MasterWrite
  6292 ;;		_Read_Commands
  6293 ;;		_TAS2521_Initialize
  6294 ;;		_atoi
  6295 ;;		_printf
  6296 ;;		_strcmp
  6297 ;;		_strcpy
  6298 ;; This function is called by:
  6299 ;;		_DebugMenu
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           	psect	text34
  6304  000FA8                     __ptext34:
  6305                           	opt stack 0
  6306  000FA8                     _TAS2521_Communication:
  6307                           	opt stack 20
  6308                           
  6309                           ;Debug.c: 160: uint8_t i2c_data[2];
  6310                           ;Debug.c: 162: printf("\n\nI2C interface for the TAS2521");
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;incstack = 0
  6314  000FA8  0E20               	movlw	low STR_23
  6315  000FAA  0100               	movlb	0	; () banked
  6316  000FAC  6F60               	movwf	printf@f& (0+255),b
  6317  000FAE  0E7D               	movlw	high STR_23
  6318  000FB0  0100               	movlb	0	; () banked
  6319  000FB2  6F61               	movwf	(printf@f+1)& (0+255),b
  6320  000FB4  EC8D  F000         	call	_printf	;wreg free
  6321                           
  6322                           ;Debug.c: 163: printf("\nCommand Syntax (single spaces): Command Reg_Address Reg_Value")
      +                          ;
  6323  000FB8  0E75               	movlw	low STR_24
  6324  000FBA  0100               	movlb	0	; () banked
  6325  000FBC  6F60               	movwf	printf@f& (0+255),b
  6326  000FBE  0E7B               	movlw	high STR_24
  6327  000FC0  0100               	movlb	0	; () banked
  6328  000FC2  6F61               	movwf	(printf@f+1)& (0+255),b
  6329  000FC4  EC8D  F000         	call	_printf	;wreg free
  6330                           
  6331                           ;Debug.c: 164: printf("\nAllowed values:  ");
  6332  000FC8  0EFF               	movlw	low STR_25
  6333  000FCA  0100               	movlb	0	; () banked
  6334  000FCC  6F60               	movwf	printf@f& (0+255),b
  6335  000FCE  0E7E               	movlw	high STR_25
  6336  000FD0  0100               	movlb	0	; () banked
  6337  000FD2  6F61               	movwf	(printf@f+1)& (0+255),b
  6338  000FD4  EC8D  F000         	call	_printf	;wreg free
  6339                           
  6340                           ;Debug.c: 165: printf("\nCommand = Write, Read, Exit, Enable, Disable, Initialize");
  6341  000FD8  0EB4               	movlw	low STR_26
  6342  000FDA  0100               	movlb	0	; () banked
  6343  000FDC  6F60               	movwf	printf@f& (0+255),b
  6344  000FDE  0E7B               	movlw	high STR_26
  6345  000FE0  0100               	movlb	0	; () banked
  6346  000FE2  6F61               	movwf	(printf@f+1)& (0+255),b
  6347  000FE4  EC8D  F000         	call	_printf	;wreg free
  6348                           
  6349                           ;Debug.c: 166: printf("\nReg_Address = decimal register address");
  6350  000FE8  0ED4               	movlw	low STR_27
  6351  000FEA  0100               	movlb	0	; () banked
  6352  000FEC  6F60               	movwf	printf@f& (0+255),b
  6353  000FEE  0E7C               	movlw	high STR_27
  6354  000FF0  0100               	movlb	0	; () banked
  6355  000FF2  6F61               	movwf	(printf@f+1)& (0+255),b
  6356  000FF4  EC8D  F000         	call	_printf	;wreg free
  6357                           
  6358                           ;Debug.c: 167: printf("\nReg_Value = decimal register value");
  6359  000FF8  0EFC               	movlw	low STR_28
  6360  000FFA  0100               	movlb	0	; () banked
  6361  000FFC  6F60               	movwf	printf@f& (0+255),b
  6362  000FFE  0E7C               	movlw	high STR_28
  6363  001000  0100               	movlb	0	; () banked
  6364  001002  6F61               	movwf	(printf@f+1)& (0+255),b
  6365  001004  EC8D  F000         	call	_printf	;wreg free
  6366                           
  6367                           ;Debug.c: 169: strcpy(commands[0], "");
  6368  001008  0E42               	movlw	low _commands
  6369  00100A  6E14               	movwf	strcpy@to,c
  6370  00100C  0E01               	movlw	high _commands
  6371  00100E  6E15               	movwf	strcpy@to+1,c
  6372  001010  0EEE               	movlw	low (STR_12+3)
  6373  001012  6E16               	movwf	strcpy@from,c
  6374  001014  0E7F               	movlw	high (STR_12+3)
  6375  001016  6E17               	movwf	strcpy@from+1,c
  6376  001018  ECA9  F010         	call	_strcpy	;wreg free
  6377                           
  6378                           ;Debug.c: 171: while(strcmp(commands[0], "Exit") != 0)
  6379  00101C  D097               	goto	l6849
  6380  00101E                     l6817:
  6381                           
  6382                           ;Debug.c: 172: {
  6383                           ;Debug.c: 173: printf("\n\nCommand: ");
  6384  00101E  0E6C               	movlw	low STR_31
  6385  001020  0100               	movlb	0	; () banked
  6386  001022  6F60               	movwf	printf@f& (0+255),b
  6387  001024  0E7F               	movlw	high STR_31
  6388  001026  0100               	movlb	0	; () banked
  6389  001028  6F61               	movwf	(printf@f+1)& (0+255),b
  6390  00102A  EC8D  F000         	call	_printf	;wreg free
  6391                           
  6392                           ;Debug.c: 175: command_count = Read_Commands(commands);
  6393  00102E  0E42               	movlw	low _commands
  6394  001030  6E20               	movwf	Read_Commands@cmds,c
  6395  001032  0E01               	movlw	high _commands
  6396  001034  6E21               	movwf	Read_Commands@cmds+1,c
  6397  001036  ECB5  F008         	call	_Read_Commands	;wreg free
  6398  00103A  0100               	movlb	0	; () banked
  6399  00103C  6FBB               	movwf	_command_count& (0+255),b
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;Debug.c: 177: i2c_data[0] = atoi(commands[1]);
  6403  00103E  0E52               	movlw	low (_commands+16)
  6404  001040  6E1A               	movwf	atoi@s,c
  6405  001042  0E01               	movlw	high (_commands+16)
  6406  001044  6E1B               	movwf	atoi@s+1,c
  6407  001046  EC08  F00B         	call	_atoi	;wreg free
  6408  00104A  501A               	movf	?_atoi,w,c
  6409  00104C  0100               	movlb	0	; () banked
  6410  00104E  6F6E               	movwf	TAS2521_Communication@i2c_data& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;Debug.c: 178: i2c_data[1] = atoi(commands[2]);
  6414  001050  0E62               	movlw	low (_commands+32)
  6415  001052  6E1A               	movwf	atoi@s,c
  6416  001054  0E01               	movlw	high (_commands+32)
  6417  001056  6E1B               	movwf	atoi@s+1,c
  6418  001058  EC08  F00B         	call	_atoi	;wreg free
  6419  00105C  501A               	movf	?_atoi,w,c
  6420  00105E  0100               	movlb	0	; () banked
  6421  001060  6F6F               	movwf	(TAS2521_Communication@i2c_data+1)& (0+255),b
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;Debug.c: 183: if(strcmp(commands[0], "Exit")==0)
  6425  001062  0E42               	movlw	low _commands
  6426  001064  6E14               	movwf	strcmp@s1,c
  6427  001066  0E01               	movlw	high _commands
  6428  001068  6E15               	movwf	strcmp@s1+1,c
  6429  00106A  0EDC               	movlw	low (STR_75+1)
  6430  00106C  6E16               	movwf	strcmp@s2,c
  6431  00106E  0E7F               	movlw	high (STR_75+1)
  6432  001070  6E17               	movwf	strcmp@s2+1,c
  6433  001072  EC63  F010         	call	_strcmp	;wreg free
  6434  001076  5014               	movf	?_strcmp,w,c
  6435  001078  1015               	iorwf	?_strcmp+1,w,c
  6436  00107A  B4D8               	btfsc	status,2,c
  6437  00107C  0012               	return	
  6438                           
  6439                           ;Debug.c: 188: else if(strcmp(commands[0], "Initialize")==0)
  6440                           
  6441                           ;Debug.c: 187: }
  6442                           
  6443                           ;Debug.c: 184: {
  6444                           ;Debug.c: 186: break;
  6445  00107E  0E42               	movlw	low _commands
  6446  001080  6E14               	movwf	strcmp@s1,c
  6447  001082  0E01               	movlw	high _commands
  6448  001084  6E15               	movwf	strcmp@s1+1,c
  6449  001086  0EE3               	movlw	low (STR_26+47)
  6450  001088  6E16               	movwf	strcmp@s2,c
  6451  00108A  0E7B               	movlw	high (STR_26+47)
  6452  00108C  6E17               	movwf	strcmp@s2+1,c
  6453  00108E  EC63  F010         	call	_strcmp	;wreg free
  6454  001092  5014               	movf	?_strcmp,w,c
  6455  001094  1015               	iorwf	?_strcmp+1,w,c
  6456  001096  A4D8               	btfss	status,2,c
  6457  001098  D003               	goto	l6833
  6458                           
  6459                           ;Debug.c: 189: {
  6460                           ;Debug.c: 190: TAS2521_Initialize();
  6461  00109A  ECFB  F001         	call	_TAS2521_Initialize	;wreg free
  6462                           
  6463                           ;Debug.c: 191: }
  6464  00109E  D056               	goto	l6849
  6465  0010A0                     l6833:
  6466                           
  6467                           ;Debug.c: 193: else if(strcmp(commands[0], "Write")==0)
  6468  0010A0  0E42               	movlw	low _commands
  6469  0010A2  6E14               	movwf	strcmp@s1,c
  6470  0010A4  0E01               	movlw	high _commands
  6471  0010A6  6E15               	movwf	strcmp@s1+1,c
  6472  0010A8  0ECF               	movlw	low STR_34
  6473  0010AA  6E16               	movwf	strcmp@s2,c
  6474  0010AC  0E7F               	movlw	high STR_34
  6475  0010AE  6E17               	movwf	strcmp@s2+1,c
  6476  0010B0  EC63  F010         	call	_strcmp	;wreg free
  6477  0010B4  5014               	movf	?_strcmp,w,c
  6478  0010B6  1015               	iorwf	?_strcmp+1,w,c
  6479  0010B8  A4D8               	btfss	status,2,c
  6480  0010BA  D01C               	goto	l6841
  6481  0010BC                     l6837:
  6482  0010BC  ECDA  F014         	call	_I2C_MasterQueueIsEmpty	;wreg free
  6483  0010C0  0900               	iorlw	0
  6484  0010C2  B4D8               	btfsc	status,2,c
  6485  0010C4  D7FB               	goto	l6837
  6486                           
  6487                           ;Debug.c: 202: I2C_MasterWrite(i2c_data, 2, 0b0011000, &status);
  6488  0010C6  0E6E               	movlw	low TAS2521_Communication@i2c_data
  6489  0010C8  0100               	movlb	0	; () banked
  6490  0010CA  6F60               	movwf	I2C_MasterWrite@pdata& (0+255),b
  6491  0010CC  0E00               	movlw	high TAS2521_Communication@i2c_data
  6492  0010CE  0100               	movlb	0	; () banked
  6493  0010D0  6F61               	movwf	(I2C_MasterWrite@pdata+1)& (0+255),b
  6494  0010D2  0E02               	movlw	2
  6495  0010D4  0100               	movlb	0	; () banked
  6496  0010D6  6F62               	movwf	I2C_MasterWrite@length& (0+255),b
  6497  0010D8  0E00               	movlw	0
  6498  0010DA  0100               	movlb	0	; () banked
  6499  0010DC  6F64               	movwf	(I2C_MasterWrite@address+1)& (0+255),b
  6500  0010DE  0E18               	movlw	24
  6501  0010E0  6F63               	movwf	I2C_MasterWrite@address& (0+255),b
  6502  0010E2  0E47               	movlw	low _status
  6503  0010E4  0100               	movlb	0	; () banked
  6504  0010E6  6F65               	movwf	I2C_MasterWrite@pflag& (0+255),b
  6505  0010E8  0E00               	movlw	high _status
  6506  0010EA  0100               	movlb	0	; () banked
  6507  0010EC  6F66               	movwf	(I2C_MasterWrite@pflag+1)& (0+255),b
  6508  0010EE  ECF2  F00F         	call	_I2C_MasterWrite	;wreg free
  6509                           
  6510                           ;Debug.c: 203: }
  6511  0010F2  D02C               	goto	l6849
  6512  0010F4                     l6841:
  6513                           
  6514                           ;Debug.c: 204: else if (strcmp(commands[0], "Read")==0)
  6515  0010F4  0E42               	movlw	low _commands
  6516  0010F6  6E14               	movwf	strcmp@s1,c
  6517  0010F8  0E01               	movlw	high _commands
  6518  0010FA  6E15               	movwf	strcmp@s1+1,c
  6519  0010FC  0EE1               	movlw	low STR_35
  6520  0010FE  6E16               	movwf	strcmp@s2,c
  6521  001100  0E7F               	movlw	high STR_35
  6522  001102  6E17               	movwf	strcmp@s2+1,c
  6523  001104  EC63  F010         	call	_strcmp	;wreg free
  6524  001108  5014               	movf	?_strcmp,w,c
  6525  00110A  1015               	iorwf	?_strcmp+1,w,c
  6526  00110C  B4D8               	btfsc	status,2,c
  6527  00110E  D01E               	goto	l6849
  6528                           
  6529                           ;Debug.c: 209: else if (strcmp(commands[0], "Enable")==0)
  6530                           
  6531                           ;Debug.c: 205: {
  6532                           ;Debug.c: 208: }
  6533  001110  0E42               	movlw	low _commands
  6534  001112  6E14               	movwf	strcmp@s1,c
  6535  001114  0E01               	movlw	high _commands
  6536  001116  6E15               	movwf	strcmp@s1+1,c
  6537  001118  0EC1               	movlw	low STR_36
  6538  00111A  6E16               	movwf	strcmp@s2,c
  6539  00111C  0E7F               	movlw	high STR_36
  6540  00111E  6E17               	movwf	strcmp@s2+1,c
  6541  001120  EC63  F010         	call	_strcmp	;wreg free
  6542  001124  5014               	movf	?_strcmp,w,c
  6543  001126  1015               	iorwf	?_strcmp+1,w,c
  6544  001128  A4D8               	btfss	status,2,c
  6545  00112A  D002               	goto	l6847
  6546                           
  6547                           ;Debug.c: 210: {
  6548                           ;Debug.c: 211: do { LATAbits.LATA6 = 1; } while(0);
  6549  00112C  8C89               	bsf	3977,6,c	;volatile
  6550                           
  6551                           ;Debug.c: 212: }
  6552  00112E  D00E               	goto	l6849
  6553  001130                     l6847:
  6554                           
  6555                           ;Debug.c: 213: else if (strcmp(commands[0], "Disable")==0)
  6556  001130  0E42               	movlw	low _commands
  6557  001132  6E14               	movwf	strcmp@s1,c
  6558  001134  0E01               	movlw	high _commands
  6559  001136  6E15               	movwf	strcmp@s1+1,c
  6560  001138  0EAA               	movlw	low STR_37
  6561  00113A  6E16               	movwf	strcmp@s2,c
  6562  00113C  0E7F               	movlw	high STR_37
  6563  00113E  6E17               	movwf	strcmp@s2+1,c
  6564  001140  EC63  F010         	call	_strcmp	;wreg free
  6565  001144  5014               	movf	?_strcmp,w,c
  6566  001146  1015               	iorwf	?_strcmp+1,w,c
  6567  001148  B4D8               	btfsc	status,2,c
  6568                           
  6569                           ;Debug.c: 214: {
  6570                           ;Debug.c: 215: do { LATAbits.LATA6 = 0; } while(0);
  6571  00114A  9C89               	bcf	3977,6,c	;volatile
  6572  00114C                     l6849:
  6573  00114C  0E42               	movlw	low _commands
  6574  00114E  6E14               	movwf	strcmp@s1,c
  6575  001150  0E01               	movlw	high _commands
  6576  001152  6E15               	movwf	strcmp@s1+1,c
  6577  001154  0EDC               	movlw	low (STR_75+1)
  6578  001156  6E16               	movwf	strcmp@s2,c
  6579  001158  0E7F               	movlw	high (STR_75+1)
  6580  00115A  6E17               	movwf	strcmp@s2+1,c
  6581  00115C  EC63  F010         	call	_strcmp	;wreg free
  6582  001160  5014               	movf	?_strcmp,w,c
  6583  001162  1015               	iorwf	?_strcmp+1,w,c
  6584  001164  B4D8               	btfsc	status,2,c
  6585  001166  0012               	return	
  6586  001168  D75A               	goto	l6817
  6587  00116A                     __end_of_TAS2521_Communication:
  6588                           	opt stack 0
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           intcon	equ	0xFF2
  6596                           intcon2	equ	0xFF1
  6597                           intcon3	equ	0xFF0
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           postdec1	equ	0xFE5
  6601                           fsr1l	equ	0xFE1
  6602                           indf2	equ	0xFDF
  6603                           fsr2h	equ	0xFDA
  6604                           fsr2l	equ	0xFD9
  6605                           status	equ	0xFD8
  6606                           
  6607 ;; *************** function _TAS2521_Initialize *****************
  6608 ;; Defined at:
  6609 ;;		line 12 in file "sound_control.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;		None
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;		None
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6627 ;;Total ram usage:        1 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    7
  6630 ;; This function calls:
  6631 ;;		_I2C_Write
  6632 ;; This function is called by:
  6633 ;;		_main
  6634 ;;		_TAS2521_Communication
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text35
  6639  0003F6                     __ptext35:
  6640                           	opt stack 0
  6641  0003F6                     _TAS2521_Initialize:
  6642                           	opt stack 23
  6643                           
  6644                           ;incstack = 0
  6645                           ;sound_control.c: 15: do { LATAbits.LATA6 = 1; } while(0);
  6646  0003F6  8C89               	bsf	3977,6,c	;volatile
  6647                           
  6648                           ;sound_control.c: 16: _delay((unsigned long)((10)*(1000000/4000.0)));
  6649  0003F8  0E04               	movlw	4
  6650  0003FA  0100               	movlb	0	; () banked
  6651  0003FC  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6652  0003FE  0E3E               	movlw	62
  6653  000400                     u7087:
  6654  000400  2EE8               	decfsz	wreg,f,c
  6655  000402  D7FE               	goto	u7087
  6656  000404  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6657  000406  D7FC               	goto	u7087
  6658                           
  6659                           ;sound_control.c: 17: _delay((unsigned long)((10)*(1000000/4000.0)));
  6660  000408  0E04               	movlw	4
  6661  00040A  0100               	movlb	0	; () banked
  6662  00040C  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6663  00040E  0E3E               	movlw	62
  6664  000410                     u7097:
  6665  000410  2EE8               	decfsz	wreg,f,c
  6666  000412  D7FE               	goto	u7097
  6667  000414  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6668  000416  D7FC               	goto	u7097
  6669                           
  6670                           ;sound_control.c: 27: I2C_Write(0b0011000, 0x00, 0x00);
  6671  000418  0E00               	movlw	0
  6672  00041A  6E1D               	movwf	I2C_Write@Register,c
  6673  00041C  0E00               	movlw	0
  6674  00041E  6E1E               	movwf	I2C_Write@Data,c
  6675  000420  0E18               	movlw	24
  6676  000422  ECF5  F00E         	call	_I2C_Write
  6677                           
  6678                           ;sound_control.c: 28: I2C_Write(0b0011000, 0x01, 0x01);
  6679  000426  0E01               	movlw	1
  6680  000428  6E1D               	movwf	I2C_Write@Register,c
  6681  00042A  0E01               	movlw	1
  6682  00042C  6E1E               	movwf	I2C_Write@Data,c
  6683  00042E  0E18               	movlw	24
  6684  000430  ECF5  F00E         	call	_I2C_Write
  6685                           
  6686                           ;sound_control.c: 29: I2C_Write(0b0011000, 0x04, 0x07);
  6687  000434  0E04               	movlw	4
  6688  000436  6E1D               	movwf	I2C_Write@Register,c
  6689  000438  0E07               	movlw	7
  6690  00043A  6E1E               	movwf	I2C_Write@Data,c
  6691  00043C  0E18               	movlw	24
  6692  00043E  ECF5  F00E         	call	_I2C_Write
  6693                           
  6694                           ;sound_control.c: 30: I2C_Write(0b0011000, 0x05, 0x18);
  6695  000442  0E05               	movlw	5
  6696  000444  6E1D               	movwf	I2C_Write@Register,c
  6697  000446  0E18               	movlw	24
  6698  000448  6E1E               	movwf	I2C_Write@Data,c
  6699  00044A  0E18               	movlw	24
  6700  00044C  ECF5  F00E         	call	_I2C_Write
  6701                           
  6702                           ;sound_control.c: 31: I2C_Write(0b0011000, 0x06, 0x07);
  6703  000450  0E06               	movlw	6
  6704  000452  6E1D               	movwf	I2C_Write@Register,c
  6705  000454  0E07               	movlw	7
  6706  000456  6E1E               	movwf	I2C_Write@Data,c
  6707  000458  0E18               	movlw	24
  6708  00045A  ECF5  F00E         	call	_I2C_Write
  6709                           
  6710                           ;sound_control.c: 32: I2C_Write(0b0011000, 0x07, 0x00);
  6711  00045E  0E07               	movlw	7
  6712  000460  6E1D               	movwf	I2C_Write@Register,c
  6713  000462  0E00               	movlw	0
  6714  000464  6E1E               	movwf	I2C_Write@Data,c
  6715  000466  0E18               	movlw	24
  6716  000468  ECF5  F00E         	call	_I2C_Write
  6717                           
  6718                           ;sound_control.c: 33: I2C_Write(0b0011000, 0x05, 0x98);
  6719  00046C  0E05               	movlw	5
  6720  00046E  6E1D               	movwf	I2C_Write@Register,c
  6721  000470  0E98               	movlw	152
  6722  000472  6E1E               	movwf	I2C_Write@Data,c
  6723  000474  0E18               	movlw	24
  6724  000476  ECF5  F00E         	call	_I2C_Write
  6725                           
  6726                           ;sound_control.c: 34: I2C_Write(0b0011000, 0x0B, 0x82);
  6727  00047A  0E0B               	movlw	11
  6728  00047C  6E1D               	movwf	I2C_Write@Register,c
  6729  00047E  0E82               	movlw	130
  6730  000480  6E1E               	movwf	I2C_Write@Data,c
  6731  000482  0E18               	movlw	24
  6732  000484  ECF5  F00E         	call	_I2C_Write
  6733                           
  6734                           ;sound_control.c: 35: I2C_Write(0b0011000, 0x0C, 0x87);
  6735  000488  0E0C               	movlw	12
  6736  00048A  6E1D               	movwf	I2C_Write@Register,c
  6737  00048C  0E87               	movlw	135
  6738  00048E  6E1E               	movwf	I2C_Write@Data,c
  6739  000490  0E18               	movlw	24
  6740  000492  ECF5  F00E         	call	_I2C_Write
  6741                           
  6742                           ;sound_control.c: 36: I2C_Write(0b0011000, 0x0D, 0x00);
  6743  000496  0E0D               	movlw	13
  6744  000498  6E1D               	movwf	I2C_Write@Register,c
  6745  00049A  0E00               	movlw	0
  6746  00049C  6E1E               	movwf	I2C_Write@Data,c
  6747  00049E  0E18               	movlw	24
  6748  0004A0  ECF5  F00E         	call	_I2C_Write
  6749                           
  6750                           ;sound_control.c: 37: I2C_Write(0b0011000, 0x0E, 0x80);
  6751  0004A4  0E0E               	movlw	14
  6752  0004A6  6E1D               	movwf	I2C_Write@Register,c
  6753  0004A8  0E80               	movlw	128
  6754  0004AA  6E1E               	movwf	I2C_Write@Data,c
  6755  0004AC  0E18               	movlw	24
  6756  0004AE  ECF5  F00E         	call	_I2C_Write
  6757                           
  6758                           ;sound_control.c: 38: I2C_Write(0b0011000, 0x1B, 0x00);
  6759  0004B2  0E1B               	movlw	27
  6760  0004B4  6E1D               	movwf	I2C_Write@Register,c
  6761  0004B6  0E00               	movlw	0
  6762  0004B8  6E1E               	movwf	I2C_Write@Data,c
  6763  0004BA  0E18               	movlw	24
  6764  0004BC  ECF5  F00E         	call	_I2C_Write
  6765                           
  6766                           ;sound_control.c: 39: I2C_Write(0b0011000, 0x3C, 0x02);
  6767  0004C0  0E3C               	movlw	60
  6768  0004C2  6E1D               	movwf	I2C_Write@Register,c
  6769  0004C4  0E02               	movlw	2
  6770  0004C6  6E1E               	movwf	I2C_Write@Data,c
  6771  0004C8  0E18               	movlw	24
  6772  0004CA  ECF5  F00E         	call	_I2C_Write
  6773                           
  6774                           ;sound_control.c: 42: I2C_Write(0b0011000, 0x19, 0x03);
  6775  0004CE  0E19               	movlw	25
  6776  0004D0  6E1D               	movwf	I2C_Write@Register,c
  6777  0004D2  0E03               	movlw	3
  6778  0004D4  6E1E               	movwf	I2C_Write@Data,c
  6779  0004D6  0E18               	movlw	24
  6780  0004D8  ECF5  F00E         	call	_I2C_Write
  6781                           
  6782                           ;sound_control.c: 43: I2C_Write(0b0011000, 0x1A, 0x00);
  6783  0004DC  0E1A               	movlw	26
  6784  0004DE  6E1D               	movwf	I2C_Write@Register,c
  6785  0004E0  0E00               	movlw	0
  6786  0004E2  6E1E               	movwf	I2C_Write@Data,c
  6787  0004E4  0E18               	movlw	24
  6788  0004E6  ECF5  F00E         	call	_I2C_Write
  6789                           
  6790                           ;sound_control.c: 44: I2C_Write(0b0011000, 0x34, 0x04);
  6791  0004EA  0E34               	movlw	52
  6792  0004EC  6E1D               	movwf	I2C_Write@Register,c
  6793  0004EE  0E04               	movlw	4
  6794  0004F0  6E1E               	movwf	I2C_Write@Data,c
  6795  0004F2  0E18               	movlw	24
  6796  0004F4  ECF5  F00E         	call	_I2C_Write
  6797                           
  6798                           ;sound_control.c: 47: I2C_Write(0b0011000, 0x00, 0x01);
  6799  0004F8  0E00               	movlw	0
  6800  0004FA  6E1D               	movwf	I2C_Write@Register,c
  6801  0004FC  0E01               	movlw	1
  6802  0004FE  6E1E               	movwf	I2C_Write@Data,c
  6803  000500  0E18               	movlw	24
  6804  000502  ECF5  F00E         	call	_I2C_Write
  6805                           
  6806                           ;sound_control.c: 48: I2C_Write(0b0011000, 0x01, 0x10);
  6807  000506  0E01               	movlw	1
  6808  000508  6E1D               	movwf	I2C_Write@Register,c
  6809  00050A  0E10               	movlw	16
  6810  00050C  6E1E               	movwf	I2C_Write@Data,c
  6811  00050E  0E18               	movlw	24
  6812  000510  ECF5  F00E         	call	_I2C_Write
  6813                           
  6814                           ;sound_control.c: 49: I2C_Write(0b0011000, 0x02, 0x00);
  6815  000514  0E02               	movlw	2
  6816  000516  6E1D               	movwf	I2C_Write@Register,c
  6817  000518  0E00               	movlw	0
  6818  00051A  6E1E               	movwf	I2C_Write@Data,c
  6819  00051C  0E18               	movlw	24
  6820  00051E  ECF5  F00E         	call	_I2C_Write
  6821                           
  6822                           ;sound_control.c: 50: I2C_Write(0b0011000, 0x09, 0x00);
  6823  000522  0E09               	movlw	9
  6824  000524  6E1D               	movwf	I2C_Write@Register,c
  6825  000526  0E00               	movlw	0
  6826  000528  6E1E               	movwf	I2C_Write@Data,c
  6827  00052A  0E18               	movlw	24
  6828  00052C  ECF5  F00E         	call	_I2C_Write
  6829                           
  6830                           ;sound_control.c: 51: I2C_Write(0b0011000, 0x0A, 0x00);
  6831  000530  0E0A               	movlw	10
  6832  000532  6E1D               	movwf	I2C_Write@Register,c
  6833  000534  0E00               	movlw	0
  6834  000536  6E1E               	movwf	I2C_Write@Data,c
  6835  000538  0E18               	movlw	24
  6836  00053A  ECF5  F00E         	call	_I2C_Write
  6837                           
  6838                           ;sound_control.c: 52: I2C_Write(0b0011000, 0x0B, 0x00);
  6839  00053E  0E0B               	movlw	11
  6840  000540  6E1D               	movwf	I2C_Write@Register,c
  6841  000542  0E00               	movlw	0
  6842  000544  6E1E               	movwf	I2C_Write@Data,c
  6843  000546  0E18               	movlw	24
  6844  000548  ECF5  F00E         	call	_I2C_Write
  6845                           
  6846                           ;sound_control.c: 53: I2C_Write(0b0011000, 0x0C, 0x00);
  6847  00054C  0E0C               	movlw	12
  6848  00054E  6E1D               	movwf	I2C_Write@Register,c
  6849  000550  0E00               	movlw	0
  6850  000552  6E1E               	movwf	I2C_Write@Data,c
  6851  000554  0E18               	movlw	24
  6852  000556  ECF5  F00E         	call	_I2C_Write
  6853                           
  6854                           ;sound_control.c: 54: I2C_Write(0b0011000, 0x10, 0x40);
  6855  00055A  0E10               	movlw	16
  6856  00055C  6E1D               	movwf	I2C_Write@Register,c
  6857  00055E  0E40               	movlw	64
  6858  000560  6E1E               	movwf	I2C_Write@Data,c
  6859  000562  0E18               	movlw	24
  6860  000564  ECF5  F00E         	call	_I2C_Write
  6861                           
  6862                           ;sound_control.c: 55: I2C_Write(0b0011000, 0x14, 0x02);
  6863  000568  0E14               	movlw	20
  6864  00056A  6E1D               	movwf	I2C_Write@Register,c
  6865  00056C  0E02               	movlw	2
  6866  00056E  6E1E               	movwf	I2C_Write@Data,c
  6867  000570  0E18               	movlw	24
  6868  000572  ECF5  F00E         	call	_I2C_Write
  6869                           
  6870                           ;sound_control.c: 57: I2C_Write(0b0011000, 0x16, 0x6C);
  6871  000576  0E16               	movlw	22
  6872  000578  6E1D               	movwf	I2C_Write@Register,c
  6873  00057A  0E6C               	movlw	108
  6874  00057C  6E1E               	movwf	I2C_Write@Data,c
  6875  00057E  0E18               	movlw	24
  6876  000580  ECF5  F00E         	call	_I2C_Write
  6877                           
  6878                           ;sound_control.c: 58: I2C_Write(0b0011000, 0x2D, 0x02);
  6879  000584  0E2D               	movlw	45
  6880  000586  6E1D               	movwf	I2C_Write@Register,c
  6881  000588  0E02               	movlw	2
  6882  00058A  6E1E               	movwf	I2C_Write@Data,c
  6883  00058C  0E18               	movlw	24
  6884  00058E  ECF5  F00E         	call	_I2C_Write
  6885                           
  6886                           ;sound_control.c: 59: I2C_Write(0b0011000, 0x2E, 0x14);
  6887  000592  0E2E               	movlw	46
  6888  000594  6E1D               	movwf	I2C_Write@Register,c
  6889  000596  0E14               	movlw	20
  6890  000598  6E1E               	movwf	I2C_Write@Data,c
  6891  00059A  0E18               	movlw	24
  6892  00059C  ECF5  F00E         	call	_I2C_Write
  6893                           
  6894                           ;sound_control.c: 60: I2C_Write(0b0011000, 0x30, 0x20);
  6895  0005A0  0E30               	movlw	48
  6896  0005A2  6E1D               	movwf	I2C_Write@Register,c
  6897  0005A4  0E20               	movlw	32
  6898  0005A6  6E1E               	movwf	I2C_Write@Data,c
  6899  0005A8  0E18               	movlw	24
  6900  0005AA  ECF5  F00E         	call	_I2C_Write
  6901                           
  6902                           ;sound_control.c: 63: _delay((unsigned long)((10)*(1000000/4000.0)));
  6903  0005AE  0E04               	movlw	4
  6904  0005B0  0100               	movlb	0	; () banked
  6905  0005B2  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6906  0005B4  0E3E               	movlw	62
  6907  0005B6                     u7107:
  6908  0005B6  2EE8               	decfsz	wreg,f,c
  6909  0005B8  D7FE               	goto	u7107
  6910  0005BA  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6911  0005BC  D7FC               	goto	u7107
  6912                           
  6913                           ;sound_control.c: 64: _delay((unsigned long)((10)*(1000000/4000.0)));
  6914  0005BE  0E04               	movlw	4
  6915  0005C0  0100               	movlb	0	; () banked
  6916  0005C2  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6917  0005C4  0E3E               	movlw	62
  6918  0005C6                     u7117:
  6919  0005C6  2EE8               	decfsz	wreg,f,c
  6920  0005C8  D7FE               	goto	u7117
  6921  0005CA  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6922  0005CC  D7FC               	goto	u7117
  6923                           
  6924                           ;sound_control.c: 65: _delay((unsigned long)((10)*(1000000/4000.0)));
  6925  0005CE  0E04               	movlw	4
  6926  0005D0  0100               	movlb	0	; () banked
  6927  0005D2  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6928  0005D4  0E3E               	movlw	62
  6929  0005D6                     u7127:
  6930  0005D6  2EE8               	decfsz	wreg,f,c
  6931  0005D8  D7FE               	goto	u7127
  6932  0005DA  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6933  0005DC  D7FC               	goto	u7127
  6934                           
  6935                           ;sound_control.c: 66: _delay((unsigned long)((10)*(1000000/4000.0)));
  6936  0005DE  0E04               	movlw	4
  6937  0005E0  0100               	movlb	0	; () banked
  6938  0005E2  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6939  0005E4  0E3E               	movlw	62
  6940  0005E6                     u7137:
  6941  0005E6  2EE8               	decfsz	wreg,f,c
  6942  0005E8  D7FE               	goto	u7137
  6943  0005EA  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6944  0005EC  D7FC               	goto	u7137
  6945                           
  6946                           ;sound_control.c: 67: _delay((unsigned long)((10)*(1000000/4000.0)));
  6947  0005EE  0E04               	movlw	4
  6948  0005F0  0100               	movlb	0	; () banked
  6949  0005F2  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6950  0005F4  0E3E               	movlw	62
  6951  0005F6                     u7147:
  6952  0005F6  2EE8               	decfsz	wreg,f,c
  6953  0005F8  D7FE               	goto	u7147
  6954  0005FA  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6955  0005FC  D7FC               	goto	u7147
  6956                           
  6957                           ;sound_control.c: 68: _delay((unsigned long)((10)*(1000000/4000.0)));
  6958  0005FE  0E04               	movlw	4
  6959  000600  0100               	movlb	0	; () banked
  6960  000602  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6961  000604  0E3E               	movlw	62
  6962  000606                     u7157:
  6963  000606  2EE8               	decfsz	wreg,f,c
  6964  000608  D7FE               	goto	u7157
  6965  00060A  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6966  00060C  D7FC               	goto	u7157
  6967                           
  6968                           ;sound_control.c: 69: _delay((unsigned long)((10)*(1000000/4000.0)));
  6969  00060E  0E04               	movlw	4
  6970  000610  0100               	movlb	0	; () banked
  6971  000612  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6972  000614  0E3E               	movlw	62
  6973  000616                     u7167:
  6974  000616  2EE8               	decfsz	wreg,f,c
  6975  000618  D7FE               	goto	u7167
  6976  00061A  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6977  00061C  D7FC               	goto	u7167
  6978                           
  6979                           ;sound_control.c: 70: _delay((unsigned long)((10)*(1000000/4000.0)));
  6980  00061E  0E04               	movlw	4
  6981  000620  0100               	movlb	0	; () banked
  6982  000622  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6983  000624  0E3E               	movlw	62
  6984  000626                     u7177:
  6985  000626  2EE8               	decfsz	wreg,f,c
  6986  000628  D7FE               	goto	u7177
  6987  00062A  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6988  00062C  D7FC               	goto	u7177
  6989                           
  6990                           ;sound_control.c: 71: _delay((unsigned long)((10)*(1000000/4000.0)));
  6991  00062E  0E04               	movlw	4
  6992  000630  0100               	movlb	0	; () banked
  6993  000632  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  6994  000634  0E3E               	movlw	62
  6995  000636                     u7187:
  6996  000636  2EE8               	decfsz	wreg,f,c
  6997  000638  D7FE               	goto	u7187
  6998  00063A  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  6999  00063C  D7FC               	goto	u7187
  7000                           
  7001                           ;sound_control.c: 72: _delay((unsigned long)((10)*(1000000/4000.0)));
  7002  00063E  0E04               	movlw	4
  7003  000640  0100               	movlb	0	; () banked
  7004  000642  6F67               	movwf	??_TAS2521_Initialize& (0+255),b
  7005  000644  0E3E               	movlw	62
  7006  000646                     u7197:
  7007  000646  2EE8               	decfsz	wreg,f,c
  7008  000648  D7FE               	goto	u7197
  7009  00064A  2F67               	decfsz	??_TAS2521_Initialize& (0+255),f,b
  7010  00064C  D7FC               	goto	u7197
  7011                           
  7012                           ;sound_control.c: 74: I2C_Write(0b0011000, 0x00, 0x00);
  7013  00064E  0E00               	movlw	0
  7014  000650  6E1D               	movwf	I2C_Write@Register,c
  7015  000652  0E00               	movlw	0
  7016  000654  6E1E               	movwf	I2C_Write@Data,c
  7017  000656  0E18               	movlw	24
  7018  000658  ECF5  F00E         	call	_I2C_Write
  7019                           
  7020                           ;sound_control.c: 75: I2C_Write(0b0011000, 0x3F, 0xB0);
  7021  00065C  0E3F               	movlw	63
  7022  00065E  6E1D               	movwf	I2C_Write@Register,c
  7023  000660  0EB0               	movlw	176
  7024  000662  6E1E               	movwf	I2C_Write@Data,c
  7025  000664  0E18               	movlw	24
  7026  000666  ECF5  F00E         	call	_I2C_Write
  7027                           
  7028                           ;sound_control.c: 76: I2C_Write(0b0011000, 0x40, 0x04);
  7029  00066A  0E40               	movlw	64
  7030  00066C  6E1D               	movwf	I2C_Write@Register,c
  7031  00066E  0E04               	movlw	4
  7032  000670  6E1E               	movwf	I2C_Write@Data,c
  7033  000672  0E18               	movlw	24
  7034  000674  ECF5  F00E         	call	_I2C_Write
  7035                           
  7036                           ;sound_control.c: 77: I2C_Write(0b0011000, 0x41, 0x00);
  7037  000678  0E41               	movlw	65
  7038  00067A  6E1D               	movwf	I2C_Write@Register,c
  7039  00067C  0E00               	movlw	0
  7040  00067E  6E1E               	movwf	I2C_Write@Data,c
  7041  000680  0E18               	movlw	24
  7042  000682  ECF5  F00E         	call	_I2C_Write
  7043  000686  0012               	return		;funcret
  7044  000688                     __end_of_TAS2521_Initialize:
  7045                           	opt stack 0
  7046                           tblptru	equ	0xFF8
  7047                           tblptrh	equ	0xFF7
  7048                           tblptrl	equ	0xFF6
  7049                           tablat	equ	0xFF5
  7050                           prodh	equ	0xFF4
  7051                           prodl	equ	0xFF3
  7052                           intcon	equ	0xFF2
  7053                           intcon2	equ	0xFF1
  7054                           intcon3	equ	0xFF0
  7055                           postinc0	equ	0xFEE
  7056                           wreg	equ	0xFE8
  7057                           postdec1	equ	0xFE5
  7058                           fsr1l	equ	0xFE1
  7059                           indf2	equ	0xFDF
  7060                           fsr2h	equ	0xFDA
  7061                           fsr2l	equ	0xFD9
  7062                           status	equ	0xFD8
  7063                           
  7064 ;; *************** function _I2C_Write *****************
  7065 ;; Defined at:
  7066 ;;		line 734 in file "mcc_generated_files/i2c.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  Address         1    wreg     unsigned char 
  7069 ;;  Register        1   28[COMRAM] unsigned char 
  7070 ;;  Data            1   29[COMRAM] unsigned char 
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;  Address         1   30[COMRAM] unsigned char 
  7073 ;;  writeBuffer     2   31[COMRAM] unsigned char [2]
  7074 ;;  timeOut         1   33[COMRAM] unsigned char 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7084 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7085 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7087 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7088 ;;Total ram usage:        6 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    6
  7091 ;; This function calls:
  7092 ;;		_I2C_MasterWrite
  7093 ;; This function is called by:
  7094 ;;		_TAS2521_Initialize
  7095 ;;		_Set_Volume
  7096 ;;		_Headphones
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text36
  7101  001DEA                     __ptext36:
  7102                           	opt stack 0
  7103  001DEA                     _I2C_Write:
  7104                           	opt stack 22
  7105                           
  7106                           ;incstack = 0
  7107                           ;I2C_Write@Address stored from wreg
  7108  001DEA  6E1F               	movwf	I2C_Write@Address,c
  7109                           
  7110                           ;i2c.c: 736: uint8_t timeOut = 0;
  7111  001DEC  0E00               	movlw	0
  7112  001DEE  6E22               	movwf	I2C_Write@timeOut,c
  7113                           
  7114                           ;i2c.c: 737: uint8_t writeBuffer[2];
  7115                           ;i2c.c: 740: writeBuffer[0] = Register;
  7116  001DF0  C01D  F020         	movff	I2C_Write@Register,I2C_Write@writeBuffer
  7117                           
  7118                           ;i2c.c: 741: writeBuffer[1] = Data;
  7119  001DF4  C01E  F021         	movff	I2C_Write@Data,I2C_Write@writeBuffer+1
  7120                           
  7121                           ;i2c.c: 746: timeOut = 0;
  7122  001DF8  0E00               	movlw	0
  7123  001DFA  6E22               	movwf	I2C_Write@timeOut,c
  7124                           
  7125                           ;i2c.c: 747: while(status != I2C_MESSAGE_FAIL)
  7126  001DFC  D021               	goto	l6293
  7127  001DFE                     l6277:
  7128                           
  7129                           ;i2c.c: 748: {
  7130                           ;i2c.c: 750: I2C_MasterWrite(writeBuffer, 2, Address, &status);
  7131  001DFE  0E20               	movlw	low I2C_Write@writeBuffer
  7132  001E00  0100               	movlb	0	; () banked
  7133  001E02  6F60               	movwf	I2C_MasterWrite@pdata& (0+255),b
  7134  001E04  0E00               	movlw	high I2C_Write@writeBuffer
  7135  001E06  0100               	movlb	0	; () banked
  7136  001E08  6F61               	movwf	(I2C_MasterWrite@pdata+1)& (0+255),b
  7137  001E0A  0E02               	movlw	2
  7138  001E0C  0100               	movlb	0	; () banked
  7139  001E0E  6F62               	movwf	I2C_MasterWrite@length& (0+255),b
  7140  001E10  C01F  F063         	movff	I2C_Write@Address,I2C_MasterWrite@address
  7141  001E14  0100               	movlb	0	; () banked
  7142  001E16  6B64               	clrf	(I2C_MasterWrite@address+1)& (0+255),b
  7143  001E18  0E47               	movlw	low _status
  7144  001E1A  0100               	movlb	0	; () banked
  7145  001E1C  6F65               	movwf	I2C_MasterWrite@pflag& (0+255),b
  7146  001E1E  0E00               	movlw	high _status
  7147  001E20  0100               	movlb	0	; () banked
  7148  001E22  6F66               	movwf	(I2C_MasterWrite@pflag+1)& (0+255),b
  7149  001E24  ECF2  F00F         	call	_I2C_MasterWrite	;wreg free
  7150  001E28                     l6279:
  7151  001E28  0E02               	movlw	2
  7152  001E2A  1847               	xorwf	_status,w,c
  7153  001E2C  B4D8               	btfsc	status,2,c
  7154  001E2E  D7FC               	goto	l6279
  7155                           
  7156                           ;i2c.c: 755: if (status == I2C_MESSAGE_COMPLETE)
  7157  001E30  5047               	movf	_status,w,c
  7158  001E32  B4D8               	btfsc	status,2,c
  7159  001E34  0012               	return	
  7160                           
  7161                           ;i2c.c: 765: if (timeOut == 25)
  7162                           
  7163                           ;i2c.c: 756: break;
  7164  001E36  0E19               	movlw	25
  7165  001E38  1822               	xorwf	I2C_Write@timeOut,w,c
  7166  001E3A  B4D8               	btfsc	status,2,c
  7167  001E3C  0012               	return	
  7168                           
  7169                           ;i2c.c: 767: else
  7170                           ;i2c.c: 768: timeOut++;
  7171                           
  7172                           ;i2c.c: 766: break;
  7173  001E3E  2A22               	incf	I2C_Write@timeOut,f,c
  7174  001E40                     l6293:
  7175  001E40  0447               	decf	_status,w,c
  7176  001E42  B4D8               	btfsc	status,2,c
  7177  001E44  0012               	return	
  7178  001E46  D7DB               	goto	l6277
  7179  001E48                     __end_of_I2C_Write:
  7180                           	opt stack 0
  7181                           tblptru	equ	0xFF8
  7182                           tblptrh	equ	0xFF7
  7183                           tblptrl	equ	0xFF6
  7184                           tablat	equ	0xFF5
  7185                           prodh	equ	0xFF4
  7186                           prodl	equ	0xFF3
  7187                           intcon	equ	0xFF2
  7188                           intcon2	equ	0xFF1
  7189                           intcon3	equ	0xFF0
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           postdec1	equ	0xFE5
  7193                           fsr1l	equ	0xFE1
  7194                           indf2	equ	0xFDF
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _Screen_Brightness_Debug *****************
  7200 ;; Defined at:
  7201 ;;		line 400 in file "Debug.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    8
  7222 ;; This function calls:
  7223 ;;		_EPWM1_LoadDutyValue
  7224 ;;		_Read_Commands
  7225 ;;		_atoi
  7226 ;;		_printf
  7227 ;;		_strcmp
  7228 ;;		_strcpy
  7229 ;; This function is called by:
  7230 ;;		_DebugMenu
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text37
  7235  0019C8                     __ptext37:
  7236                           	opt stack 0
  7237  0019C8                     _Screen_Brightness_Debug:
  7238                           	opt stack 20
  7239                           
  7240                           ;Debug.c: 403: strcpy(commands[0], "");
  7241                           
  7242                           ;incstack = 0
  7243  0019C8  0E42               	movlw	low _commands
  7244  0019CA  6E14               	movwf	strcpy@to,c
  7245  0019CC  0E01               	movlw	high _commands
  7246  0019CE  6E15               	movwf	strcpy@to+1,c
  7247  0019D0  0EEE               	movlw	low (STR_12+3)
  7248  0019D2  6E16               	movwf	strcpy@from,c
  7249  0019D4  0E7F               	movlw	high (STR_12+3)
  7250  0019D6  6E17               	movwf	strcpy@from+1,c
  7251  0019D8  ECA9  F010         	call	_strcpy	;wreg free
  7252                           
  7253                           ;Debug.c: 405: while(strcmp(commands[0], "Exit") != 0)
  7254  0019DC  D032               	goto	l6989
  7255  0019DE                     l6979:
  7256                           
  7257                           ;Debug.c: 406: {
  7258                           ;Debug.c: 407: printf("\n\nScreen Brightness debug (Exit to exit)");
  7259  0019DE  0EAB               	movlw	low STR_87
  7260  0019E0  0100               	movlb	0	; () banked
  7261  0019E2  6F60               	movwf	printf@f& (0+255),b
  7262  0019E4  0E7C               	movlw	high STR_87
  7263  0019E6  0100               	movlb	0	; () banked
  7264  0019E8  6F61               	movwf	(printf@f+1)& (0+255),b
  7265  0019EA  EC8D  F000         	call	_printf	;wreg free
  7266                           
  7267                           ;Debug.c: 408: printf("\nPWM Value:  ");
  7268  0019EE  0E44               	movlw	low STR_88
  7269  0019F0  0100               	movlb	0	; () banked
  7270  0019F2  6F60               	movwf	printf@f& (0+255),b
  7271  0019F4  0E7F               	movlw	high STR_88
  7272  0019F6  0100               	movlb	0	; () banked
  7273  0019F8  6F61               	movwf	(printf@f+1)& (0+255),b
  7274  0019FA  EC8D  F000         	call	_printf	;wreg free
  7275                           
  7276                           ;Debug.c: 410: command_count = Read_Commands(commands);
  7277  0019FE  0E42               	movlw	low _commands
  7278  001A00  6E20               	movwf	Read_Commands@cmds,c
  7279  001A02  0E01               	movlw	high _commands
  7280  001A04  6E21               	movwf	Read_Commands@cmds+1,c
  7281  001A06  ECB5  F008         	call	_Read_Commands	;wreg free
  7282  001A0A  0100               	movlb	0	; () banked
  7283  001A0C  6FBB               	movwf	_command_count& (0+255),b
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;Debug.c: 414: if(strcmp(commands[0], "Exit")==0)
  7287  001A0E  0E42               	movlw	low _commands
  7288  001A10  6E14               	movwf	strcmp@s1,c
  7289  001A12  0E01               	movlw	high _commands
  7290  001A14  6E15               	movwf	strcmp@s1+1,c
  7291  001A16  0EDC               	movlw	low (STR_75+1)
  7292  001A18  6E16               	movwf	strcmp@s2,c
  7293  001A1A  0E7F               	movlw	high (STR_75+1)
  7294  001A1C  6E17               	movwf	strcmp@s2+1,c
  7295  001A1E  EC63  F010         	call	_strcmp	;wreg free
  7296  001A22  5014               	movf	?_strcmp,w,c
  7297  001A24  1015               	iorwf	?_strcmp+1,w,c
  7298  001A26  B4D8               	btfsc	status,2,c
  7299  001A28  0012               	return	
  7300                           
  7301                           ;Debug.c: 419: else
  7302                           ;Debug.c: 420: {
  7303                           ;Debug.c: 421: EPWM1_LoadDutyValue(atoi(commands[0]));
  7304                           
  7305                           ;Debug.c: 418: }
  7306                           
  7307                           ;Debug.c: 415: {
  7308                           ;Debug.c: 417: break;
  7309  001A2A  0E42               	movlw	low _commands
  7310  001A2C  6E1A               	movwf	atoi@s,c
  7311  001A2E  0E01               	movlw	high _commands
  7312  001A30  6E1B               	movwf	atoi@s+1,c
  7313  001A32  EC08  F00B         	call	_atoi	;wreg free
  7314  001A36  C01A  F021         	movff	?_atoi,EPWM1_LoadDutyValue@dutyValue
  7315  001A3A  C01B  F022         	movff	?_atoi+1,EPWM1_LoadDutyValue@dutyValue+1
  7316  001A3E  ECE9  F011         	call	_EPWM1_LoadDutyValue	;wreg free
  7317  001A42                     l6989:
  7318  001A42  0E42               	movlw	low _commands
  7319  001A44  6E14               	movwf	strcmp@s1,c
  7320  001A46  0E01               	movlw	high _commands
  7321  001A48  6E15               	movwf	strcmp@s1+1,c
  7322  001A4A  0EDC               	movlw	low (STR_75+1)
  7323  001A4C  6E16               	movwf	strcmp@s2,c
  7324  001A4E  0E7F               	movlw	high (STR_75+1)
  7325  001A50  6E17               	movwf	strcmp@s2+1,c
  7326  001A52  EC63  F010         	call	_strcmp	;wreg free
  7327  001A56  5014               	movf	?_strcmp,w,c
  7328  001A58  1015               	iorwf	?_strcmp+1,w,c
  7329  001A5A  B4D8               	btfsc	status,2,c
  7330  001A5C  0012               	return	
  7331  001A5E  D7BF               	goto	l6979
  7332  001A60                     __end_of_Screen_Brightness_Debug:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           intcon2	equ	0xFF1
  7342                           intcon3	equ	0xFF0
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _MAX17048_Communication *****************
  7353 ;; Defined at:
  7354 ;;		line 221 in file "Debug.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;  i2c_data        2   14[BANK0 ] unsigned char [2]
  7359 ;;  ReadData        1   16[BANK0 ] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7370 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7372 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7373 ;;Total ram usage:        3 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    8
  7376 ;; This function calls:
  7377 ;;		_I2C_MasterQueueIsEmpty
  7378 ;;		_I2C_MasterWrite
  7379 ;;		_Read_Battery_Percent
  7380 ;;		_Read_Battery_Register
  7381 ;;		_Read_Battery_Voltage
  7382 ;;		_Read_Commands
  7383 ;;		_atoi
  7384 ;;		_printf
  7385 ;;		_strcmp
  7386 ;;		_strcpy
  7387 ;; This function is called by:
  7388 ;;		_DebugMenu
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text38
  7393  000B84                     __ptext38:
  7394                           	opt stack 0
  7395  000B84                     _MAX17048_Communication:
  7396                           	opt stack 20
  7397                           
  7398                           ;Debug.c: 223: uint8_t i2c_data[2];
  7399                           ;Debug.c: 224: uint8_t ReadData = 0;
  7400                           
  7401                           ;incstack = 0
  7402  000B84  0E00               	movlw	0
  7403  000B86  0100               	movlb	0	; () banked
  7404  000B88  6F70               	movwf	MAX17048_Communication@ReadData& (0+255),b
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;Debug.c: 226: printf("\n\nI2C interface for the TAS2521");
  7408  000B8A  0E20               	movlw	low STR_23
  7409  000B8C  0100               	movlb	0	; () banked
  7410  000B8E  6F60               	movwf	printf@f& (0+255),b
  7411  000B90  0E7D               	movlw	high STR_23
  7412  000B92  0100               	movlb	0	; () banked
  7413  000B94  6F61               	movwf	(printf@f+1)& (0+255),b
  7414  000B96  EC8D  F000         	call	_printf	;wreg free
  7415                           
  7416                           ;Debug.c: 227: printf("\nCommand Syntax (single spaces): Command Reg_Address Reg_Value")
      +                          ;
  7417  000B9A  0E75               	movlw	low STR_24
  7418  000B9C  0100               	movlb	0	; () banked
  7419  000B9E  6F60               	movwf	printf@f& (0+255),b
  7420  000BA0  0E7B               	movlw	high STR_24
  7421  000BA2  0100               	movlb	0	; () banked
  7422  000BA4  6F61               	movwf	(printf@f+1)& (0+255),b
  7423  000BA6  EC8D  F000         	call	_printf	;wreg free
  7424                           
  7425                           ;Debug.c: 228: printf("\nAllowed values:  ");
  7426  000BAA  0EFF               	movlw	low STR_25
  7427  000BAC  0100               	movlb	0	; () banked
  7428  000BAE  6F60               	movwf	printf@f& (0+255),b
  7429  000BB0  0E7E               	movlw	high STR_25
  7430  000BB2  0100               	movlb	0	; () banked
  7431  000BB4  6F61               	movwf	(printf@f+1)& (0+255),b
  7432  000BB6  EC8D  F000         	call	_printf	;wreg free
  7433                           
  7434                           ;Debug.c: 229: printf("\nCommand = Write, Read, Exit");
  7435  000BBA  0E7B               	movlw	low STR_41
  7436  000BBC  0100               	movlb	0	; () banked
  7437  000BBE  6F60               	movwf	printf@f& (0+255),b
  7438  000BC0  0E7D               	movlw	high STR_41
  7439  000BC2  0100               	movlb	0	; () banked
  7440  000BC4  6F61               	movwf	(printf@f+1)& (0+255),b
  7441  000BC6  EC8D  F000         	call	_printf	;wreg free
  7442                           
  7443                           ;Debug.c: 230: printf("\nCan Read Percent or Voltage");
  7444  000BCA  0E5E               	movlw	low STR_42
  7445  000BCC  0100               	movlb	0	; () banked
  7446  000BCE  6F60               	movwf	printf@f& (0+255),b
  7447  000BD0  0E7D               	movlw	high STR_42
  7448  000BD2  0100               	movlb	0	; () banked
  7449  000BD4  6F61               	movwf	(printf@f+1)& (0+255),b
  7450  000BD6  EC8D  F000         	call	_printf	;wreg free
  7451                           
  7452                           ;Debug.c: 231: printf("\nReg_Address = decimal register address");
  7453  000BDA  0ED4               	movlw	low STR_27
  7454  000BDC  0100               	movlb	0	; () banked
  7455  000BDE  6F60               	movwf	printf@f& (0+255),b
  7456  000BE0  0E7C               	movlw	high STR_27
  7457  000BE2  0100               	movlb	0	; () banked
  7458  000BE4  6F61               	movwf	(printf@f+1)& (0+255),b
  7459  000BE6  EC8D  F000         	call	_printf	;wreg free
  7460                           
  7461                           ;Debug.c: 232: printf("\nReg_Value = decimal register value");
  7462  000BEA  0EFC               	movlw	low STR_28
  7463  000BEC  0100               	movlb	0	; () banked
  7464  000BEE  6F60               	movwf	printf@f& (0+255),b
  7465  000BF0  0E7C               	movlw	high STR_28
  7466  000BF2  0100               	movlb	0	; () banked
  7467  000BF4  6F61               	movwf	(printf@f+1)& (0+255),b
  7468  000BF6  EC8D  F000         	call	_printf	;wreg free
  7469                           
  7470                           ;Debug.c: 234: strcpy(commands[0], "");
  7471  000BFA  0E42               	movlw	low _commands
  7472  000BFC  6E14               	movwf	strcpy@to,c
  7473  000BFE  0E01               	movlw	high _commands
  7474  000C00  6E15               	movwf	strcpy@to+1,c
  7475  000C02  0EEE               	movlw	low (STR_12+3)
  7476  000C04  6E16               	movwf	strcpy@from,c
  7477  000C06  0E7F               	movlw	high (STR_12+3)
  7478  000C08  6E17               	movwf	strcpy@from+1,c
  7479  000C0A  ECA9  F010         	call	_strcpy	;wreg free
  7480                           
  7481                           ;Debug.c: 236: while(strcmp(commands[0], "Exit") != 0)
  7482  000C0E  D0C5               	goto	l6909
  7483  000C10                     l6869:
  7484                           
  7485                           ;Debug.c: 237: {
  7486                           ;Debug.c: 238: printf("\n\nCommand: ");
  7487  000C10  0E6C               	movlw	low STR_31
  7488  000C12  0100               	movlb	0	; () banked
  7489  000C14  6F60               	movwf	printf@f& (0+255),b
  7490  000C16  0E7F               	movlw	high STR_31
  7491  000C18  0100               	movlb	0	; () banked
  7492  000C1A  6F61               	movwf	(printf@f+1)& (0+255),b
  7493  000C1C  EC8D  F000         	call	_printf	;wreg free
  7494                           
  7495                           ;Debug.c: 240: command_count = Read_Commands(commands);
  7496  000C20  0E42               	movlw	low _commands
  7497  000C22  6E20               	movwf	Read_Commands@cmds,c
  7498  000C24  0E01               	movlw	high _commands
  7499  000C26  6E21               	movwf	Read_Commands@cmds+1,c
  7500  000C28  ECB5  F008         	call	_Read_Commands	;wreg free
  7501  000C2C  0100               	movlb	0	; () banked
  7502  000C2E  6FBB               	movwf	_command_count& (0+255),b
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;Debug.c: 242: i2c_data[0] = atoi(commands[1]);
  7506  000C30  0E52               	movlw	low (_commands+16)
  7507  000C32  6E1A               	movwf	atoi@s,c
  7508  000C34  0E01               	movlw	high (_commands+16)
  7509  000C36  6E1B               	movwf	atoi@s+1,c
  7510  000C38  EC08  F00B         	call	_atoi	;wreg free
  7511  000C3C  501A               	movf	?_atoi,w,c
  7512  000C3E  0100               	movlb	0	; () banked
  7513  000C40  6F6E               	movwf	MAX17048_Communication@i2c_data& (0+255),b
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;Debug.c: 243: i2c_data[1] = atoi(commands[2]);
  7517  000C42  0E62               	movlw	low (_commands+32)
  7518  000C44  6E1A               	movwf	atoi@s,c
  7519  000C46  0E01               	movlw	high (_commands+32)
  7520  000C48  6E1B               	movwf	atoi@s+1,c
  7521  000C4A  EC08  F00B         	call	_atoi	;wreg free
  7522  000C4E  501A               	movf	?_atoi,w,c
  7523  000C50  0100               	movlb	0	; () banked
  7524  000C52  6F6F               	movwf	(MAX17048_Communication@i2c_data+1)& (0+255),b
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;Debug.c: 248: if(strcmp(commands[0], "Exit")==0)
  7528  000C54  0E42               	movlw	low _commands
  7529  000C56  6E14               	movwf	strcmp@s1,c
  7530  000C58  0E01               	movlw	high _commands
  7531  000C5A  6E15               	movwf	strcmp@s1+1,c
  7532  000C5C  0EDC               	movlw	low (STR_75+1)
  7533  000C5E  6E16               	movwf	strcmp@s2,c
  7534  000C60  0E7F               	movlw	high (STR_75+1)
  7535  000C62  6E17               	movwf	strcmp@s2+1,c
  7536  000C64  EC63  F010         	call	_strcmp	;wreg free
  7537  000C68  5014               	movf	?_strcmp,w,c
  7538  000C6A  1015               	iorwf	?_strcmp+1,w,c
  7539  000C6C  B4D8               	btfsc	status,2,c
  7540  000C6E  0012               	return	
  7541                           
  7542                           ;Debug.c: 254: else if(strcmp(commands[0], "Write")==0)
  7543                           
  7544                           ;Debug.c: 252: }
  7545                           
  7546                           ;Debug.c: 249: {
  7547                           ;Debug.c: 251: break;
  7548  000C70  0E42               	movlw	low _commands
  7549  000C72  6E14               	movwf	strcmp@s1,c
  7550  000C74  0E01               	movlw	high _commands
  7551  000C76  6E15               	movwf	strcmp@s1+1,c
  7552  000C78  0ECF               	movlw	low STR_34
  7553  000C7A  6E16               	movwf	strcmp@s2,c
  7554  000C7C  0E7F               	movlw	high STR_34
  7555  000C7E  6E17               	movwf	strcmp@s2+1,c
  7556  000C80  EC63  F010         	call	_strcmp	;wreg free
  7557  000C84  5014               	movf	?_strcmp,w,c
  7558  000C86  1015               	iorwf	?_strcmp+1,w,c
  7559  000C88  A4D8               	btfss	status,2,c
  7560  000C8A  D01C               	goto	l6889
  7561  000C8C                     l6885:
  7562  000C8C  ECDA  F014         	call	_I2C_MasterQueueIsEmpty	;wreg free
  7563  000C90  0900               	iorlw	0
  7564  000C92  B4D8               	btfsc	status,2,c
  7565  000C94  D7FB               	goto	l6885
  7566                           
  7567                           ;Debug.c: 263: I2C_MasterWrite(i2c_data, 2, 0b0110110, &status);
  7568  000C96  0E6E               	movlw	low MAX17048_Communication@i2c_data
  7569  000C98  0100               	movlb	0	; () banked
  7570  000C9A  6F60               	movwf	I2C_MasterWrite@pdata& (0+255),b
  7571  000C9C  0E00               	movlw	high MAX17048_Communication@i2c_data
  7572  000C9E  0100               	movlb	0	; () banked
  7573  000CA0  6F61               	movwf	(I2C_MasterWrite@pdata+1)& (0+255),b
  7574  000CA2  0E02               	movlw	2
  7575  000CA4  0100               	movlb	0	; () banked
  7576  000CA6  6F62               	movwf	I2C_MasterWrite@length& (0+255),b
  7577  000CA8  0E00               	movlw	0
  7578  000CAA  0100               	movlb	0	; () banked
  7579  000CAC  6F64               	movwf	(I2C_MasterWrite@address+1)& (0+255),b
  7580  000CAE  0E36               	movlw	54
  7581  000CB0  6F63               	movwf	I2C_MasterWrite@address& (0+255),b
  7582  000CB2  0E47               	movlw	low _status
  7583  000CB4  0100               	movlb	0	; () banked
  7584  000CB6  6F65               	movwf	I2C_MasterWrite@pflag& (0+255),b
  7585  000CB8  0E00               	movlw	high _status
  7586  000CBA  0100               	movlb	0	; () banked
  7587  000CBC  6F66               	movwf	(I2C_MasterWrite@pflag+1)& (0+255),b
  7588  000CBE  ECF2  F00F         	call	_I2C_MasterWrite	;wreg free
  7589                           
  7590                           ;Debug.c: 264: }
  7591  000CC2  D06B               	goto	l6909
  7592  000CC4                     l6889:
  7593                           
  7594                           ;Debug.c: 265: else if (strcmp(commands[0], "Read")==0)
  7595  000CC4  0E42               	movlw	low _commands
  7596  000CC6  6E14               	movwf	strcmp@s1,c
  7597  000CC8  0E01               	movlw	high _commands
  7598  000CCA  6E15               	movwf	strcmp@s1+1,c
  7599  000CCC  0EE1               	movlw	low STR_35
  7600  000CCE  6E16               	movwf	strcmp@s2,c
  7601  000CD0  0E7F               	movlw	high STR_35
  7602  000CD2  6E17               	movwf	strcmp@s2+1,c
  7603  000CD4  EC63  F010         	call	_strcmp	;wreg free
  7604  000CD8  5014               	movf	?_strcmp,w,c
  7605  000CDA  1015               	iorwf	?_strcmp+1,w,c
  7606  000CDC  A4D8               	btfss	status,2,c
  7607  000CDE  D05D               	goto	l6909
  7608                           
  7609                           ;Debug.c: 266: {
  7610                           ;Debug.c: 267: if(strcmp(commands[1], "Percent")==0)
  7611  000CE0  0E52               	movlw	low (_commands+16)
  7612  000CE2  6E14               	movwf	strcmp@s1,c
  7613  000CE4  0E01               	movlw	high (_commands+16)
  7614  000CE6  6E15               	movwf	strcmp@s1+1,c
  7615  000CE8  0EB2               	movlw	low STR_51
  7616  000CEA  6E16               	movwf	strcmp@s2,c
  7617  000CEC  0E7F               	movlw	high STR_51
  7618  000CEE  6E17               	movwf	strcmp@s2+1,c
  7619  000CF0  EC63  F010         	call	_strcmp	;wreg free
  7620  000CF4  5014               	movf	?_strcmp,w,c
  7621  000CF6  1015               	iorwf	?_strcmp+1,w,c
  7622  000CF8  A4D8               	btfss	status,2,c
  7623  000CFA  D011               	goto	l6897
  7624                           
  7625                           ;Debug.c: 268: {
  7626                           ;Debug.c: 269: ReadData = Read_Battery_Percent();
  7627  000CFC  EC67  F014         	call	_Read_Battery_Percent	;wreg free
  7628  000D00  0100               	movlb	0	; () banked
  7629  000D02  6F70               	movwf	MAX17048_Communication@ReadData& (0+255),b
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;Debug.c: 270: printf("\n\nBatt Percent = %d\n\n", ReadData);
  7633  000D04  0E44               	movlw	low STR_52
  7634  000D06  0100               	movlb	0	; () banked
  7635  000D08  6F60               	movwf	printf@f& (0+255),b
  7636  000D0A  0E7E               	movlw	high STR_52
  7637  000D0C  0100               	movlb	0	; () banked
  7638  000D0E  6F61               	movwf	(printf@f+1)& (0+255),b
  7639  000D10  C070  F062         	movff	MAX17048_Communication@ReadData,?_printf+2
  7640  000D14  0100               	movlb	0	; () banked
  7641  000D16  6B63               	clrf	(?_printf+3)& (0+255),b
  7642  000D18  EC8D  F000         	call	_printf	;wreg free
  7643                           
  7644                           ;Debug.c: 271: }
  7645  000D1C  D03E               	goto	l6909
  7646  000D1E                     l6897:
  7647                           
  7648                           ;Debug.c: 272: else if(strcmp(commands[1], "Voltage")==0)
  7649  000D1E  0E52               	movlw	low (_commands+16)
  7650  000D20  6E14               	movwf	strcmp@s1,c
  7651  000D22  0E01               	movlw	high (_commands+16)
  7652  000D24  6E15               	movwf	strcmp@s1+1,c
  7653  000D26  0E73               	movlw	low (STR_42+21)
  7654  000D28  6E16               	movwf	strcmp@s2,c
  7655  000D2A  0E7D               	movlw	high (STR_42+21)
  7656  000D2C  6E17               	movwf	strcmp@s2+1,c
  7657  000D2E  EC63  F010         	call	_strcmp	;wreg free
  7658  000D32  5014               	movf	?_strcmp,w,c
  7659  000D34  1015               	iorwf	?_strcmp+1,w,c
  7660  000D36  A4D8               	btfss	status,2,c
  7661  000D38  D019               	goto	l6905
  7662                           
  7663                           ;Debug.c: 273: {
  7664                           ;Debug.c: 274: ReadData = Read_Battery_Voltage();
  7665  000D3A  EC5A  F014         	call	_Read_Battery_Voltage	;wreg free
  7666  000D3E  0100               	movlb	0	; () banked
  7667  000D40  6F70               	movwf	MAX17048_Communication@ReadData& (0+255),b
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;Debug.c: 275: printf("\n\nBatt Voltage = %d\n", ReadData);
  7671  000D42  0E70               	movlw	low STR_54
  7672  000D44  0100               	movlb	0	; () banked
  7673  000D46  6F60               	movwf	printf@f& (0+255),b
  7674  000D48  0E7E               	movlw	high STR_54
  7675  000D4A  0100               	movlb	0	; () banked
  7676  000D4C  6F61               	movwf	(printf@f+1)& (0+255),b
  7677  000D4E  C070  F062         	movff	MAX17048_Communication@ReadData,?_printf+2
  7678  000D52  0100               	movlb	0	; () banked
  7679  000D54  6B63               	clrf	(?_printf+3)& (0+255),b
  7680  000D56  EC8D  F000         	call	_printf	;wreg free
  7681                           
  7682                           ;Debug.c: 276: printf("Actual voltage = (Batt Voltage << 8) * 156.25uV");
  7683  000D5A  0E20               	movlw	low STR_55
  7684  000D5C  0100               	movlb	0	; () banked
  7685  000D5E  6F60               	movwf	printf@f& (0+255),b
  7686  000D60  0E7C               	movlw	high STR_55
  7687  000D62  0100               	movlb	0	; () banked
  7688  000D64  6F61               	movwf	(printf@f+1)& (0+255),b
  7689  000D66  EC8D  F000         	call	_printf	;wreg free
  7690                           
  7691                           ;Debug.c: 277: }
  7692  000D6A  D017               	goto	l6909
  7693  000D6C                     l6905:
  7694                           
  7695                           ;Debug.c: 278: else
  7696                           ;Debug.c: 279: {
  7697                           ;Debug.c: 280: ReadData = Read_Battery_Register(atoi(commands[1]));
  7698  000D6C  0E52               	movlw	low (_commands+16)
  7699  000D6E  6E1A               	movwf	atoi@s,c
  7700  000D70  0E01               	movlw	high (_commands+16)
  7701  000D72  6E1B               	movwf	atoi@s+1,c
  7702  000D74  EC08  F00B         	call	_atoi	;wreg free
  7703  000D78  501A               	movf	?_atoi,w,c
  7704  000D7A  EC2E  F014         	call	_Read_Battery_Register
  7705  000D7E  0100               	movlb	0	; () banked
  7706  000D80  6F70               	movwf	MAX17048_Communication@ReadData& (0+255),b
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;Debug.c: 281: printf("\n\nRegister Data = 0x%x", ReadData);
  7710  000D82  0E2D               	movlw	low STR_56
  7711  000D84  0100               	movlb	0	; () banked
  7712  000D86  6F60               	movwf	printf@f& (0+255),b
  7713  000D88  0E7E               	movlw	high STR_56
  7714  000D8A  0100               	movlb	0	; () banked
  7715  000D8C  6F61               	movwf	(printf@f+1)& (0+255),b
  7716  000D8E  C070  F062         	movff	MAX17048_Communication@ReadData,?_printf+2
  7717  000D92  0100               	movlb	0	; () banked
  7718  000D94  6B63               	clrf	(?_printf+3)& (0+255),b
  7719  000D96  EC8D  F000         	call	_printf	;wreg free
  7720  000D9A                     l6909:
  7721  000D9A  0E42               	movlw	low _commands
  7722  000D9C  6E14               	movwf	strcmp@s1,c
  7723  000D9E  0E01               	movlw	high _commands
  7724  000DA0  6E15               	movwf	strcmp@s1+1,c
  7725  000DA2  0EDC               	movlw	low (STR_75+1)
  7726  000DA4  6E16               	movwf	strcmp@s2,c
  7727  000DA6  0E7F               	movlw	high (STR_75+1)
  7728  000DA8  6E17               	movwf	strcmp@s2+1,c
  7729  000DAA  EC63  F010         	call	_strcmp	;wreg free
  7730  000DAE  5014               	movf	?_strcmp,w,c
  7731  000DB0  1015               	iorwf	?_strcmp+1,w,c
  7732  000DB2  B4D8               	btfsc	status,2,c
  7733  000DB4  0012               	return	
  7734  000DB6  D72C               	goto	l6869
  7735  000DB8                     __end_of_MAX17048_Communication:
  7736                           	opt stack 0
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           intcon	equ	0xFF2
  7744                           intcon2	equ	0xFF1
  7745                           intcon3	equ	0xFF0
  7746                           postinc0	equ	0xFEE
  7747                           wreg	equ	0xFE8
  7748                           postdec1	equ	0xFE5
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function _Read_Battery_Voltage *****************
  7756 ;; Defined at:
  7757 ;;		line 27 in file "battery_control.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;		None
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  BatteryVolta    1    7[BANK0 ] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      unsigned char 
  7764 ;; Registers used:
  7765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7774 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7775 ;;Total ram usage:        1 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    7
  7778 ;; This function calls:
  7779 ;;		_I2C_Read
  7780 ;; This function is called by:
  7781 ;;		_MAX17048_Communication
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text39
  7786  0028B4                     __ptext39:
  7787                           	opt stack 0
  7788  0028B4                     _Read_Battery_Voltage:
  7789                           	opt stack 20
  7790                           
  7791                           ;battery_control.c: 29: uint8_t BatteryVoltage = 0;
  7792                           
  7793                           ;incstack = 0
  7794  0028B4  0E00               	movlw	0
  7795  0028B6  0100               	movlb	0	; () banked
  7796  0028B8  6F67               	movwf	Read_Battery_Voltage@BatteryVoltage& (0+255),b
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;battery_control.c: 32: BatteryVoltage = I2C_Read(0b0110110, 0x02);
  7800  0028BA  0E02               	movlw	2
  7801  0028BC  6E1D               	movwf	I2C_Read@Register,c
  7802  0028BE  0E36               	movlw	54
  7803  0028C0  EC88  F00C         	call	_I2C_Read
  7804  0028C4  0100               	movlb	0	; () banked
  7805  0028C6  6F67               	movwf	Read_Battery_Voltage@BatteryVoltage& (0+255),b
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;battery_control.c: 34: return BatteryVoltage;
  7809  0028C8  0100               	movlb	0	; () banked
  7810  0028CA  5167               	movf	Read_Battery_Voltage@BatteryVoltage& (0+255),w,b
  7811  0028CC  0012               	return	
  7812  0028CE                     __end_of_Read_Battery_Voltage:
  7813                           	opt stack 0
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           intcon2	equ	0xFF1
  7822                           intcon3	equ	0xFF0
  7823                           postinc0	equ	0xFEE
  7824                           wreg	equ	0xFE8
  7825                           postdec1	equ	0xFE5
  7826                           fsr1l	equ	0xFE1
  7827                           indf2	equ	0xFDF
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _Read_Battery_Register *****************
  7833 ;; Defined at:
  7834 ;;		line 38 in file "battery_control.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  Register        1    wreg     unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  Register        1    7[BANK0 ] unsigned char 
  7839 ;;  RegisterData    1    8[BANK0 ] unsigned char 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      unsigned char 
  7842 ;; Registers used:
  7843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7853 ;;Total ram usage:        2 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    7
  7856 ;; This function calls:
  7857 ;;		_I2C_Read
  7858 ;; This function is called by:
  7859 ;;		_MAX17048_Communication
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text40
  7864  00285C                     __ptext40:
  7865                           	opt stack 0
  7866  00285C                     _Read_Battery_Register:
  7867                           	opt stack 20
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;incstack = 0
  7871                           ;Read_Battery_Register@Register stored from wreg
  7872  00285C  0100               	movlb	0	; () banked
  7873  00285E  6F67               	movwf	Read_Battery_Register@Register& (0+255),b
  7874                           
  7875                           ;battery_control.c: 40: uint8_t RegisterData = 0;
  7876  002860  0E00               	movlw	0
  7877  002862  0100               	movlb	0	; () banked
  7878  002864  6F68               	movwf	Read_Battery_Register@RegisterData& (0+255),b
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;battery_control.c: 43: RegisterData = I2C_Read(0b0110110, Register);
  7882  002866  C067  F01D         	movff	Read_Battery_Register@Register,I2C_Read@Register
  7883  00286A  0E36               	movlw	54
  7884  00286C  EC88  F00C         	call	_I2C_Read
  7885  002870  0100               	movlb	0	; () banked
  7886  002872  6F68               	movwf	Read_Battery_Register@RegisterData& (0+255),b
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;battery_control.c: 45: return RegisterData;
  7890  002874  0100               	movlb	0	; () banked
  7891  002876  5168               	movf	Read_Battery_Register@RegisterData& (0+255),w,b
  7892  002878  0012               	return	
  7893  00287A                     __end_of_Read_Battery_Register:
  7894                           	opt stack 0
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           intcon	equ	0xFF2
  7902                           intcon2	equ	0xFF1
  7903                           intcon3	equ	0xFF0
  7904                           postinc0	equ	0xFEE
  7905                           wreg	equ	0xFE8
  7906                           postdec1	equ	0xFE5
  7907                           fsr1l	equ	0xFE1
  7908                           indf2	equ	0xFDF
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function _I2C_MasterQueueIsEmpty *****************
  7914 ;; Defined at:
  7915 ;;		line 716 in file "mcc_generated_files/i2c.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;		None
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      unsigned char 
  7922 ;; Registers used:
  7923 ;;		wreg
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7933 ;;Total ram usage:        0 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    4
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_TAS2521_Communication
  7940 ;;		_MAX17048_Communication
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text41
  7945  0029B4                     __ptext41:
  7946                           	opt stack 0
  7947  0029B4                     _I2C_MasterQueueIsEmpty:
  7948                           	opt stack 23
  7949                           
  7950                           ;i2c.c: 718: return(i2c_object.trStatus.s.empty);
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;incstack = 0
  7954  0029B4  0100               	movlb	0	; () banked
  7955  0029B6  A3AF               	btfss	(_i2c_object+4)& (0+255),1,b
  7956  0029B8  D002               	goto	u5520
  7957  0029BA  0E01               	movlw	1
  7958  0029BC  0012               	return	
  7959  0029BE                     u5520:
  7960  0029BE  0E00               	movlw	0
  7961  0029C0  0012               	return	
  7962  0029C2                     __end_of_I2C_MasterQueueIsEmpty:
  7963                           	opt stack 0
  7964                           tblptru	equ	0xFF8
  7965                           tblptrh	equ	0xFF7
  7966                           tblptrl	equ	0xFF6
  7967                           tablat	equ	0xFF5
  7968                           prodh	equ	0xFF4
  7969                           prodl	equ	0xFF3
  7970                           intcon	equ	0xFF2
  7971                           intcon2	equ	0xFF1
  7972                           intcon3	equ	0xFF0
  7973                           postinc0	equ	0xFEE
  7974                           wreg	equ	0xFE8
  7975                           postdec1	equ	0xFE5
  7976                           fsr1l	equ	0xFE1
  7977                           indf2	equ	0xFDF
  7978                           fsr2h	equ	0xFDA
  7979                           fsr2l	equ	0xFD9
  7980                           status	equ	0xFD8
  7981                           
  7982 ;; *************** function _LED_Control *****************
  7983 ;; Defined at:
  7984 ;;		line 79 in file "Debug.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;  command_inpu   16   51[BANK0 ] unsigned char [16]
  7989 ;;  second_comma   16   35[BANK0 ] unsigned char [16]
  7990 ;;  first_comman   16   19[BANK0 ] unsigned char [16]
  7991 ;;  token           2   70[BANK0 ] PTR unsigned char 
  7992 ;;		 -> Read_Commands@str(128), LED_Control@command_input(16), NULL(0), 
  7993 ;;  delim           2   68[BANK0 ] unsigned char [2]
  7994 ;;  counter         1   72[BANK0 ] unsigned char 
  7995 ;;  flush           1   67[BANK0 ] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      void 
  7998 ;; Registers used:
  7999 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8006 ;;      Locals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8007 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8008 ;;      Totals:         0      59       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8009 ;;Total ram usage:       59 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    7
  8012 ;; This function calls:
  8013 ;;		_EUSART1_Read
  8014 ;;		_EUSART1_Write
  8015 ;;		_printf
  8016 ;;		_strcmp
  8017 ;;		_strcpy
  8018 ;;		_strtok
  8019 ;; This function is called by:
  8020 ;;		_DebugMenu
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           	psect	text42
  8025  000688                     __ptext42:
  8026                           	opt stack 0
  8027  000688                     _LED_Control:
  8028                           	opt stack 21
  8029                           
  8030                           ;Debug.c: 81: unsigned char command_input[16];
  8031                           ;Debug.c: 82: unsigned char first_command[16];
  8032                           ;Debug.c: 83: unsigned char second_command[16];
  8033                           ;Debug.c: 84: char delim[] = " ";
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;incstack = 0
  8037  000688  C1E5  F0A4         	movff	LED_Control@F18486,LED_Control@delim
  8038  00068C  C1E6  F0A5         	movff	LED_Control@F18486+1,LED_Control@delim+1
  8039                           
  8040                           ;Debug.c: 85: char* token;
  8041                           ;Debug.c: 86: unsigned char counter = 0, flush = 0;
  8042  000690  0E00               	movlw	0
  8043  000692  0100               	movlb	0	; () banked
  8044  000694  6FA8               	movwf	LED_Control@counter& (0+255),b
  8045  000696  0E00               	movlw	0
  8046  000698  0100               	movlb	0	; () banked
  8047  00069A  6FA3               	movwf	LED_Control@flush& (0+255),b
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;Debug.c: 88: printf("\n\n\n");
  8051  00069C  0EEB               	movlw	low STR_12
  8052  00069E  0100               	movlb	0	; () banked
  8053  0006A0  6F60               	movwf	printf@f& (0+255),b
  8054  0006A2  0E7F               	movlw	high STR_12
  8055  0006A4  0100               	movlb	0	; () banked
  8056  0006A6  6F61               	movwf	(printf@f+1)& (0+255),b
  8057  0006A8  EC8D  F000         	call	_printf	;wreg free
  8058                           
  8059                           ;Debug.c: 90: printf("Controls the state of the Blue and Red LEDs\n");
  8060  0006AC  0E7E               	movlw	low STR_13
  8061  0006AE  0100               	movlb	0	; () banked
  8062  0006B0  6F60               	movwf	printf@f& (0+255),b
  8063  0006B2  0E7C               	movlw	high STR_13
  8064  0006B4  0100               	movlb	0	; () banked
  8065  0006B6  6F61               	movwf	(printf@f+1)& (0+255),b
  8066  0006B8  EC8D  F000         	call	_printf	;wreg free
  8067                           
  8068                           ;Debug.c: 91: printf("Command Syntax (single space between):  Blue ON\n\n");
  8069  0006BC  0EEE               	movlw	low STR_14
  8070  0006BE  0100               	movlb	0	; () banked
  8071  0006C0  6F60               	movwf	printf@f& (0+255),b
  8072  0006C2  0E7B               	movlw	high STR_14
  8073  0006C4  0100               	movlb	0	; () banked
  8074  0006C6  6F61               	movwf	(printf@f+1)& (0+255),b
  8075  0006C8  EC8D  F000         	call	_printf	;wreg free
  8076                           
  8077                           ;Debug.c: 92: printf("Command: ");
  8078  0006CC  0E6E               	movlw	low (STR_31+2)
  8079  0006CE  0100               	movlb	0	; () banked
  8080  0006D0  6F60               	movwf	printf@f& (0+255),b
  8081  0006D2  0E7F               	movlw	high (STR_31+2)
  8082  0006D4  0100               	movlb	0	; () banked
  8083  0006D6  6F61               	movwf	(printf@f+1)& (0+255),b
  8084  0006D8  EC8D  F000         	call	_printf	;wreg free
  8085                           
  8086                           ;Debug.c: 98: while(command_input[counter-1] != '\n' && command_input[counter-1] != '\r'
      +                          )
  8087  0006DC  D01D               	goto	l6783
  8088  0006DE                     l6779:
  8089                           
  8090                           ;Debug.c: 99: {
  8091                           ;Debug.c: 100: command_input[counter] = EUSART1_Read();
  8092  0006DE  ECA9  F012         	call	_EUSART1_Read	;wreg free
  8093  0006E2  0100               	movlb	0	; () banked
  8094  0006E4  6F6E               	movwf	??_LED_Control& (0+255),b
  8095  0006E6  0100               	movlb	0	; () banked
  8096  0006E8  51A8               	movf	LED_Control@counter& (0+255),w,b
  8097  0006EA  0D01               	mullw	1
  8098  0006EC  0E93               	movlw	low LED_Control@command_input
  8099  0006EE  24F3               	addwf	prodl,w,c
  8100  0006F0  6ED9               	movwf	fsr2l,c
  8101  0006F2  0E00               	movlw	high LED_Control@command_input
  8102  0006F4  20F4               	addwfc	prodh,w,c
  8103  0006F6  6EDA               	movwf	fsr2h,c
  8104  0006F8  C06E  FFDF         	movff	??_LED_Control,indf2
  8105                           
  8106                           ;Debug.c: 101: EUSART1_Write(command_input[counter]);
  8107  0006FC  0100               	movlb	0	; () banked
  8108  0006FE  51A8               	movf	LED_Control@counter& (0+255),w,b
  8109  000700  0D01               	mullw	1
  8110  000702  0E93               	movlw	low LED_Control@command_input
  8111  000704  24F3               	addwf	prodl,w,c
  8112  000706  6ED9               	movwf	fsr2l,c
  8113  000708  0E00               	movlw	high LED_Control@command_input
  8114  00070A  20F4               	addwfc	prodh,w,c
  8115  00070C  6EDA               	movwf	fsr2h,c
  8116  00070E  50DF               	movf	indf2,w,c
  8117  000710  EC6F  F011         	call	_EUSART1_Write
  8118                           
  8119                           ;Debug.c: 102: counter++;
  8120  000714  0100               	movlb	0	; () banked
  8121  000716  2BA8               	incf	LED_Control@counter& (0+255),f,b
  8122  000718                     l6783:
  8123  000718  0EFF               	movlw	255
  8124  00071A  0100               	movlb	0	; () banked
  8125  00071C  6F6E               	movwf	??_LED_Control& (0+255),b
  8126  00071E  0EFF               	movlw	255
  8127  000720  0100               	movlb	0	; () banked
  8128  000722  6F6F               	movwf	(??_LED_Control+1)& (0+255),b
  8129  000724  0100               	movlb	0	; () banked
  8130  000726  51A8               	movf	LED_Control@counter& (0+255),w,b
  8131  000728  0100               	movlb	0	; () banked
  8132  00072A  6F70               	movwf	(??_LED_Control+2)& (0+255),b
  8133  00072C  6B71               	clrf	(??_LED_Control+3)& (0+255),b
  8134  00072E  0100               	movlb	0	; () banked
  8135  000730  516E               	movf	??_LED_Control& (0+255),w,b
  8136  000732  0100               	movlb	0	; () banked
  8137  000734  2770               	addwf	(??_LED_Control+2)& (0+255),f,b
  8138  000736  0100               	movlb	0	; () banked
  8139  000738  516F               	movf	(??_LED_Control+1)& (0+255),w,b
  8140  00073A  0100               	movlb	0	; () banked
  8141  00073C  2371               	addwfc	(??_LED_Control+3)& (0+255),f,b
  8142  00073E  0E93               	movlw	low LED_Control@command_input
  8143  000740  0100               	movlb	0	; () banked
  8144  000742  2570               	addwf	(??_LED_Control+2)& (0+255),w,b
  8145  000744  6ED9               	movwf	fsr2l,c
  8146  000746  0E00               	movlw	high LED_Control@command_input
  8147  000748  0100               	movlb	0	; () banked
  8148  00074A  2171               	addwfc	(??_LED_Control+3)& (0+255),w,b
  8149  00074C  6EDA               	movwf	fsr2h,c
  8150  00074E  0E0A               	movlw	10
  8151  000750  18DE               	xorwf	postinc2,w,c
  8152  000752  B4D8               	btfsc	status,2,c
  8153  000754  D01F               	goto	l6787
  8154                           
  8155                           ; BSR set to: 0
  8156  000756  0EFF               	movlw	255
  8157  000758  0100               	movlb	0	; () banked
  8158  00075A  6F6E               	movwf	??_LED_Control& (0+255),b
  8159  00075C  0EFF               	movlw	255
  8160  00075E  0100               	movlb	0	; () banked
  8161  000760  6F6F               	movwf	(??_LED_Control+1)& (0+255),b
  8162  000762  0100               	movlb	0	; () banked
  8163  000764  51A8               	movf	LED_Control@counter& (0+255),w,b
  8164  000766  0100               	movlb	0	; () banked
  8165  000768  6F70               	movwf	(??_LED_Control+2)& (0+255),b
  8166  00076A  6B71               	clrf	(??_LED_Control+3)& (0+255),b
  8167  00076C  0100               	movlb	0	; () banked
  8168  00076E  516E               	movf	??_LED_Control& (0+255),w,b
  8169  000770  0100               	movlb	0	; () banked
  8170  000772  2770               	addwf	(??_LED_Control+2)& (0+255),f,b
  8171  000774  0100               	movlb	0	; () banked
  8172  000776  516F               	movf	(??_LED_Control+1)& (0+255),w,b
  8173  000778  0100               	movlb	0	; () banked
  8174  00077A  2371               	addwfc	(??_LED_Control+3)& (0+255),f,b
  8175  00077C  0E93               	movlw	low LED_Control@command_input
  8176  00077E  0100               	movlb	0	; () banked
  8177  000780  2570               	addwf	(??_LED_Control+2)& (0+255),w,b
  8178  000782  6ED9               	movwf	fsr2l,c
  8179  000784  0E00               	movlw	high LED_Control@command_input
  8180  000786  0100               	movlb	0	; () banked
  8181  000788  2171               	addwfc	(??_LED_Control+3)& (0+255),w,b
  8182  00078A  6EDA               	movwf	fsr2h,c
  8183  00078C  0E0D               	movlw	13
  8184  00078E  18DE               	xorwf	postinc2,w,c
  8185  000790  A4D8               	btfss	status,2,c
  8186  000792  D7A5               	goto	l6779
  8187  000794                     l6787:
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;Debug.c: 103: }
  8191                           ;Debug.c: 104: command_input[counter-1] = '\0';
  8192  000794  0EFF               	movlw	255
  8193  000796  0100               	movlb	0	; () banked
  8194  000798  6F6E               	movwf	??_LED_Control& (0+255),b
  8195  00079A  0EFF               	movlw	255
  8196  00079C  0100               	movlb	0	; () banked
  8197  00079E  6F6F               	movwf	(??_LED_Control+1)& (0+255),b
  8198  0007A0  0100               	movlb	0	; () banked
  8199  0007A2  51A8               	movf	LED_Control@counter& (0+255),w,b
  8200  0007A4  0100               	movlb	0	; () banked
  8201  0007A6  6F70               	movwf	(??_LED_Control+2)& (0+255),b
  8202  0007A8  6B71               	clrf	(??_LED_Control+3)& (0+255),b
  8203  0007AA  0100               	movlb	0	; () banked
  8204  0007AC  516E               	movf	??_LED_Control& (0+255),w,b
  8205  0007AE  0100               	movlb	0	; () banked
  8206  0007B0  2770               	addwf	(??_LED_Control+2)& (0+255),f,b
  8207  0007B2  0100               	movlb	0	; () banked
  8208  0007B4  516F               	movf	(??_LED_Control+1)& (0+255),w,b
  8209  0007B6  0100               	movlb	0	; () banked
  8210  0007B8  2371               	addwfc	(??_LED_Control+3)& (0+255),f,b
  8211  0007BA  0E93               	movlw	low LED_Control@command_input
  8212  0007BC  0100               	movlb	0	; () banked
  8213  0007BE  2570               	addwf	(??_LED_Control+2)& (0+255),w,b
  8214  0007C0  6ED9               	movwf	fsr2l,c
  8215  0007C2  0E00               	movlw	high LED_Control@command_input
  8216  0007C4  0100               	movlb	0	; () banked
  8217  0007C6  2171               	addwfc	(??_LED_Control+3)& (0+255),w,b
  8218  0007C8  6EDA               	movwf	fsr2h,c
  8219  0007CA  0E00               	movlw	0
  8220  0007CC  6EDF               	movwf	indf2,c
  8221                           
  8222                           ;Debug.c: 106: while((eusart1RxCount))
  8223  0007CE  D004               	goto	l6791
  8224  0007D0                     l6789:
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;Debug.c: 107: {
  8228                           ;Debug.c: 108: flush = EUSART1_Read();
  8229  0007D0  ECA9  F012         	call	_EUSART1_Read	;wreg free
  8230  0007D4  0100               	movlb	0	; () banked
  8231  0007D6  6FA3               	movwf	LED_Control@flush& (0+255),b
  8232  0007D8                     l6791:
  8233                           
  8234                           ; BSR set to: 0
  8235  0007D8  5035               	movf	_eusart1RxCount,w,c	;volatile
  8236  0007DA  A4D8               	btfss	status,2,c
  8237  0007DC  D7F9               	goto	l6789
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;Debug.c: 109: }
  8241                           ;Debug.c: 115: token = strtok(command_input, delim);
  8242                           
  8243                           ; BSR set to: 0
  8244  0007DE  0E93               	movlw	low LED_Control@command_input
  8245  0007E0  0100               	movlb	0	; () banked
  8246  0007E2  6F60               	movwf	strtok@s1& (0+255),b
  8247  0007E4  0E00               	movlw	high LED_Control@command_input
  8248  0007E6  0100               	movlb	0	; () banked
  8249  0007E8  6F61               	movwf	(strtok@s1+1)& (0+255),b
  8250  0007EA  0EA4               	movlw	low LED_Control@delim
  8251  0007EC  0100               	movlb	0	; () banked
  8252  0007EE  6F62               	movwf	strtok@s2& (0+255),b
  8253  0007F0  0E00               	movlw	high LED_Control@delim
  8254  0007F2  0100               	movlb	0	; () banked
  8255  0007F4  6F63               	movwf	(strtok@s2+1)& (0+255),b
  8256  0007F6  EC9F  F00A         	call	_strtok	;wreg free
  8257  0007FA  C060  F0A6         	movff	?_strtok,LED_Control@token
  8258  0007FE  C061  F0A7         	movff	?_strtok+1,LED_Control@token+1
  8259                           
  8260                           ;Debug.c: 116: printf("\ntoken=%s", token);
  8261  000802  0E98               	movlw	low STR_16
  8262  000804  0100               	movlb	0	; () banked
  8263  000806  6F60               	movwf	printf@f& (0+255),b
  8264  000808  0E7F               	movlw	high STR_16
  8265  00080A  0100               	movlb	0	; () banked
  8266  00080C  6F61               	movwf	(printf@f+1)& (0+255),b
  8267  00080E  C0A6  F062         	movff	LED_Control@token,?_printf+2
  8268  000812  C0A7  F063         	movff	LED_Control@token+1,?_printf+3
  8269  000816  EC8D  F000         	call	_printf	;wreg free
  8270                           
  8271                           ;Debug.c: 117: strcpy(first_command, token);
  8272  00081A  0E73               	movlw	low LED_Control@first_command
  8273  00081C  6E14               	movwf	strcpy@to,c
  8274  00081E  0E00               	movlw	high LED_Control@first_command
  8275  000820  6E15               	movwf	strcpy@to+1,c
  8276  000822  C0A6  F016         	movff	LED_Control@token,strcpy@from
  8277  000826  C0A7  F017         	movff	LED_Control@token+1,strcpy@from+1
  8278  00082A  ECA9  F010         	call	_strcpy	;wreg free
  8279                           
  8280                           ;Debug.c: 121: token = strtok((0), delim);
  8281  00082E  0E00               	movlw	0
  8282  000830  0100               	movlb	0	; () banked
  8283  000832  6F60               	movwf	strtok@s1& (0+255),b
  8284  000834  0E00               	movlw	0
  8285  000836  0100               	movlb	0	; () banked
  8286  000838  6F61               	movwf	(strtok@s1+1)& (0+255),b
  8287  00083A  0EA4               	movlw	low LED_Control@delim
  8288  00083C  0100               	movlb	0	; () banked
  8289  00083E  6F62               	movwf	strtok@s2& (0+255),b
  8290  000840  0E00               	movlw	high LED_Control@delim
  8291  000842  0100               	movlb	0	; () banked
  8292  000844  6F63               	movwf	(strtok@s2+1)& (0+255),b
  8293  000846  EC9F  F00A         	call	_strtok	;wreg free
  8294  00084A  C060  F0A6         	movff	?_strtok,LED_Control@token
  8295  00084E  C061  F0A7         	movff	?_strtok+1,LED_Control@token+1
  8296                           
  8297                           ;Debug.c: 122: printf("\ntoken=%s\n", token);
  8298  000852  0E83               	movlw	low STR_17
  8299  000854  0100               	movlb	0	; () banked
  8300  000856  6F60               	movwf	printf@f& (0+255),b
  8301  000858  0E7F               	movlw	high STR_17
  8302  00085A  0100               	movlb	0	; () banked
  8303  00085C  6F61               	movwf	(printf@f+1)& (0+255),b
  8304  00085E  C0A6  F062         	movff	LED_Control@token,?_printf+2
  8305  000862  C0A7  F063         	movff	LED_Control@token+1,?_printf+3
  8306  000866  EC8D  F000         	call	_printf	;wreg free
  8307                           
  8308                           ;Debug.c: 123: strcpy(second_command, token);
  8309  00086A  0E83               	movlw	low LED_Control@second_command
  8310  00086C  6E14               	movwf	strcpy@to,c
  8311  00086E  0E00               	movlw	high LED_Control@second_command
  8312  000870  6E15               	movwf	strcpy@to+1,c
  8313  000872  C0A6  F016         	movff	LED_Control@token,strcpy@from
  8314  000876  C0A7  F017         	movff	LED_Control@token+1,strcpy@from+1
  8315  00087A  ECA9  F010         	call	_strcpy	;wreg free
  8316                           
  8317                           ;Debug.c: 127: if((strcmp(first_command, "Blue") == 0))
  8318  00087E  0E73               	movlw	low LED_Control@first_command
  8319  000880  6E14               	movwf	strcmp@s1,c
  8320  000882  0E00               	movlw	high LED_Control@first_command
  8321  000884  6E15               	movwf	strcmp@s1+1,c
  8322  000886  0EE6               	movlw	low STR_18
  8323  000888  6E16               	movwf	strcmp@s2,c
  8324  00088A  0E7F               	movlw	high STR_18
  8325  00088C  6E17               	movwf	strcmp@s2+1,c
  8326  00088E  EC63  F010         	call	_strcmp	;wreg free
  8327  000892  5014               	movf	?_strcmp,w,c
  8328  000894  1015               	iorwf	?_strcmp+1,w,c
  8329  000896  A4D8               	btfss	status,2,c
  8330  000898  D012               	goto	l6807
  8331                           
  8332                           ;Debug.c: 128: {
  8333                           ;Debug.c: 129: if(strcmp(second_command, "ON") == 0)
  8334  00089A  0E83               	movlw	low LED_Control@second_command
  8335  00089C  6E14               	movwf	strcmp@s1,c
  8336  00089E  0E00               	movlw	high LED_Control@second_command
  8337  0008A0  6E15               	movwf	strcmp@s1+1,c
  8338  0008A2  0EF3               	movlw	low STR_19
  8339  0008A4  6E16               	movwf	strcmp@s2,c
  8340  0008A6  0E7F               	movlw	high STR_19
  8341  0008A8  6E17               	movwf	strcmp@s2+1,c
  8342  0008AA  EC63  F010         	call	_strcmp	;wreg free
  8343  0008AE  5014               	movf	?_strcmp,w,c
  8344  0008B0  1015               	iorwf	?_strcmp+1,w,c
  8345  0008B2  A4D8               	btfss	status,2,c
  8346  0008B4  D002               	goto	l1413
  8347                           
  8348                           ;Debug.c: 130: {
  8349                           ;Debug.c: 131: do { LATCbits.LATC0 = 1; } while(0);
  8350  0008B6  808B               	bsf	3979,0,c	;volatile
  8351                           
  8352                           ;Debug.c: 132: }
  8353  0008B8  0012               	return	
  8354  0008BA                     l1413:
  8355  0008BA  908B               	bcf	3979,0,c	;volatile
  8356                           
  8357                           ;Debug.c: 136: }
  8358                           ;Debug.c: 137: }
  8359  0008BC  0012               	return	
  8360  0008BE                     l6807:
  8361                           
  8362                           ;Debug.c: 138: else if((strcmp(first_command, "Red") == 0))
  8363  0008BE  0E73               	movlw	low LED_Control@first_command
  8364  0008C0  6E14               	movwf	strcmp@s1,c
  8365  0008C2  0E00               	movlw	high LED_Control@first_command
  8366  0008C4  6E15               	movwf	strcmp@s1+1,c
  8367  0008C6  0EEF               	movlw	low STR_20
  8368  0008C8  6E16               	movwf	strcmp@s2,c
  8369  0008CA  0E7F               	movlw	high STR_20
  8370  0008CC  6E17               	movwf	strcmp@s2+1,c
  8371  0008CE  EC63  F010         	call	_strcmp	;wreg free
  8372  0008D2  5014               	movf	?_strcmp,w,c
  8373  0008D4  1015               	iorwf	?_strcmp+1,w,c
  8374  0008D6  A4D8               	btfss	status,2,c
  8375  0008D8  D012               	goto	l6811
  8376                           
  8377                           ;Debug.c: 139: {
  8378                           ;Debug.c: 140: if(strcmp(second_command, "ON") == 0)
  8379  0008DA  0E83               	movlw	low LED_Control@second_command
  8380  0008DC  6E14               	movwf	strcmp@s1,c
  8381  0008DE  0E00               	movlw	high LED_Control@second_command
  8382  0008E0  6E15               	movwf	strcmp@s1+1,c
  8383  0008E2  0EF3               	movlw	low STR_19
  8384  0008E4  6E16               	movwf	strcmp@s2,c
  8385  0008E6  0E7F               	movlw	high STR_19
  8386  0008E8  6E17               	movwf	strcmp@s2+1,c
  8387  0008EA  EC63  F010         	call	_strcmp	;wreg free
  8388  0008EE  5014               	movf	?_strcmp,w,c
  8389  0008F0  1015               	iorwf	?_strcmp+1,w,c
  8390  0008F2  A4D8               	btfss	status,2,c
  8391  0008F4  D002               	goto	l1421
  8392                           
  8393                           ;Debug.c: 141: {
  8394                           ;Debug.c: 142: do { LATCbits.LATC1 = 1; } while(0);
  8395  0008F6  828B               	bsf	3979,1,c	;volatile
  8396                           
  8397                           ;Debug.c: 143: }
  8398  0008F8  0012               	return	
  8399  0008FA                     l1421:
  8400  0008FA  928B               	bcf	3979,1,c	;volatile
  8401                           
  8402                           ;Debug.c: 147: }
  8403                           ;Debug.c: 148: }
  8404  0008FC  0012               	return	
  8405  0008FE                     l6811:
  8406                           
  8407                           ;Debug.c: 149: else
  8408                           ;Debug.c: 150: {
  8409                           ;Debug.c: 151: printf("\nInvalid LED selection");
  8410  0008FE  0E16               	movlw	low STR_22
  8411  000900  0100               	movlb	0	; () banked
  8412  000902  6F60               	movwf	printf@f& (0+255),b
  8413  000904  0E7E               	movlw	high STR_22
  8414  000906  0100               	movlb	0	; () banked
  8415  000908  6F61               	movwf	(printf@f+1)& (0+255),b
  8416  00090A  EC8D  F000         	call	_printf	;wreg free
  8417  00090E  0012               	return	
  8418  000910                     __end_of_LED_Control:
  8419                           	opt stack 0
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodh	equ	0xFF4
  8425                           prodl	equ	0xFF3
  8426                           intcon	equ	0xFF2
  8427                           intcon2	equ	0xFF1
  8428                           intcon3	equ	0xFF0
  8429                           postinc0	equ	0xFEE
  8430                           wreg	equ	0xFE8
  8431                           postdec1	equ	0xFE5
  8432                           fsr1l	equ	0xFE1
  8433                           indf2	equ	0xFDF
  8434                           postinc2	equ	0xFDE
  8435                           fsr2h	equ	0xFDA
  8436                           fsr2l	equ	0xFD9
  8437                           status	equ	0xFD8
  8438                           
  8439 ;; *************** function _Battery_Display *****************
  8440 ;; Defined at:
  8441 ;;		line 342 in file "Debug.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;		None
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  data            2   14[BANK0 ] unsigned char [2]
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  1    wreg      void 
  8448 ;; Registers used:
  8449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8459 ;;Total ram usage:        2 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    8
  8462 ;; This function calls:
  8463 ;;		_EUSART2_Write_Array
  8464 ;;		_Read_Commands
  8465 ;;		_Update_Battery_Display
  8466 ;;		_Update_Battery_Icon
  8467 ;;		_Update_X_Offset
  8468 ;;		_Update_Y_Offset
  8469 ;;		_atoi
  8470 ;;		_printf
  8471 ;;		_strcmp
  8472 ;;		_strcpy
  8473 ;; This function is called by:
  8474 ;;		_DebugMenu
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text43
  8479  000DB8                     __ptext43:
  8480                           	opt stack 0
  8481  000DB8                     _Battery_Display:
  8482                           	opt stack 20
  8483                           
  8484                           ;Debug.c: 344: printf("\n\nBattery Display debug");
  8485                           
  8486                           ;incstack = 0
  8487  000DB8  0EE7               	movlw	low STR_68
  8488  000DBA  0100               	movlb	0	; () banked
  8489  000DBC  6F60               	movwf	printf@f& (0+255),b
  8490  000DBE  0E7D               	movlw	high STR_68
  8491  000DC0  0100               	movlb	0	; () banked
  8492  000DC2  6F61               	movwf	(printf@f+1)& (0+255),b
  8493  000DC4  EC8D  F000         	call	_printf	;wreg free
  8494                           
  8495                           ;Debug.c: 345: printf("\nAllowed commands:  ");
  8496  000DC8  0E85               	movlw	low STR_69
  8497  000DCA  0100               	movlb	0	; () banked
  8498  000DCC  6F60               	movwf	printf@f& (0+255),b
  8499  000DCE  0E7E               	movlw	high STR_69
  8500  000DD0  0100               	movlb	0	; () banked
  8501  000DD2  6F61               	movwf	(printf@f+1)& (0+255),b
  8502  000DD4  EC8D  F000         	call	_printf	;wreg free
  8503                           
  8504                           ;Debug.c: 346: printf("\nI [battery percent]");
  8505  000DD8  0E9A               	movlw	low STR_70
  8506  000DDA  0100               	movlb	0	; () banked
  8507  000DDC  6F60               	movwf	printf@f& (0+255),b
  8508  000DDE  0E7E               	movlw	high STR_70
  8509  000DE0  0100               	movlb	0	; () banked
  8510  000DE2  6F61               	movwf	(printf@f+1)& (0+255),b
  8511  000DE4  EC8D  F000         	call	_printf	;wreg free
  8512                           
  8513                           ;Debug.c: 347: printf("\nD [1, 0]");
  8514  000DE8  0E8E               	movlw	low STR_71
  8515  000DEA  0100               	movlb	0	; () banked
  8516  000DEC  6F60               	movwf	printf@f& (0+255),b
  8517  000DEE  0E7F               	movlw	high STR_71
  8518  000DF0  0100               	movlb	0	; () banked
  8519  000DF2  6F61               	movwf	(printf@f+1)& (0+255),b
  8520  000DF4  EC8D  F000         	call	_printf	;wreg free
  8521                           
  8522                           ;Debug.c: 348: printf("\nX [x pixel offset]");
  8523  000DF8  0EC3               	movlw	low STR_72
  8524  000DFA  0100               	movlb	0	; () banked
  8525  000DFC  6F60               	movwf	printf@f& (0+255),b
  8526  000DFE  0E7E               	movlw	high STR_72
  8527  000E00  0100               	movlb	0	; () banked
  8528  000E02  6F61               	movwf	(printf@f+1)& (0+255),b
  8529  000E04  EC8D  F000         	call	_printf	;wreg free
  8530                           
  8531                           ;Debug.c: 349: printf("\nY [y pixel offset]");
  8532  000E08  0ED7               	movlw	low STR_73
  8533  000E0A  0100               	movlb	0	; () banked
  8534  000E0C  6F60               	movwf	printf@f& (0+255),b
  8535  000E0E  0E7E               	movlw	high STR_73
  8536  000E10  0100               	movlb	0	; () banked
  8537  000E12  6F61               	movwf	(printf@f+1)& (0+255),b
  8538  000E14  EC8D  F000         	call	_printf	;wreg free
  8539                           
  8540                           ;Debug.c: 350: printf("\nEcho");
  8541  000E18  0ED5               	movlw	low STR_74
  8542  000E1A  0100               	movlb	0	; () banked
  8543  000E1C  6F60               	movwf	printf@f& (0+255),b
  8544  000E1E  0E7F               	movlw	high STR_74
  8545  000E20  0100               	movlb	0	; () banked
  8546  000E22  6F61               	movwf	(printf@f+1)& (0+255),b
  8547  000E24  EC8D  F000         	call	_printf	;wreg free
  8548                           
  8549                           ;Debug.c: 351: printf("\nExit");
  8550  000E28  0EDB               	movlw	low STR_75
  8551  000E2A  0100               	movlb	0	; () banked
  8552  000E2C  6F60               	movwf	printf@f& (0+255),b
  8553  000E2E  0E7F               	movlw	high STR_75
  8554  000E30  0100               	movlb	0	; () banked
  8555  000E32  6F61               	movwf	(printf@f+1)& (0+255),b
  8556  000E34  EC8D  F000         	call	_printf	;wreg free
  8557                           
  8558                           ;Debug.c: 353: strcpy(commands[0], "");
  8559  000E38  0E42               	movlw	low _commands
  8560  000E3A  6E14               	movwf	strcpy@to,c
  8561  000E3C  0E01               	movlw	high _commands
  8562  000E3E  6E15               	movwf	strcpy@to+1,c
  8563  000E40  0EEE               	movlw	low (STR_12+3)
  8564  000E42  6E16               	movwf	strcpy@from,c
  8565  000E44  0E7F               	movlw	high (STR_12+3)
  8566  000E46  6E17               	movwf	strcpy@from+1,c
  8567  000E48  ECA9  F010         	call	_strcpy	;wreg free
  8568                           
  8569                           ;Debug.c: 355: while(strcmp(commands[0], "Exit") != 0)
  8570  000E4C  D09E               	goto	l6975
  8571  000E4E                     l6945:
  8572                           
  8573                           ;Debug.c: 356: {
  8574                           ;Debug.c: 357: printf("\n\nCommand: ");
  8575  000E4E  0E6C               	movlw	low STR_31
  8576  000E50  0100               	movlb	0	; () banked
  8577  000E52  6F60               	movwf	printf@f& (0+255),b
  8578  000E54  0E7F               	movlw	high STR_31
  8579  000E56  0100               	movlb	0	; () banked
  8580  000E58  6F61               	movwf	(printf@f+1)& (0+255),b
  8581  000E5A  EC8D  F000         	call	_printf	;wreg free
  8582                           
  8583                           ;Debug.c: 359: command_count = Read_Commands(commands);
  8584  000E5E  0E42               	movlw	low _commands
  8585  000E60  6E20               	movwf	Read_Commands@cmds,c
  8586  000E62  0E01               	movlw	high _commands
  8587  000E64  6E21               	movwf	Read_Commands@cmds+1,c
  8588  000E66  ECB5  F008         	call	_Read_Commands	;wreg free
  8589  000E6A  0100               	movlb	0	; () banked
  8590  000E6C  6FBB               	movwf	_command_count& (0+255),b
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;Debug.c: 363: if(strcmp(commands[0], "Exit")==0)
  8594  000E6E  0E42               	movlw	low _commands
  8595  000E70  6E14               	movwf	strcmp@s1,c
  8596  000E72  0E01               	movlw	high _commands
  8597  000E74  6E15               	movwf	strcmp@s1+1,c
  8598  000E76  0EDC               	movlw	low (STR_75+1)
  8599  000E78  6E16               	movwf	strcmp@s2,c
  8600  000E7A  0E7F               	movlw	high (STR_75+1)
  8601  000E7C  6E17               	movwf	strcmp@s2+1,c
  8602  000E7E  EC63  F010         	call	_strcmp	;wreg free
  8603  000E82  5014               	movf	?_strcmp,w,c
  8604  000E84  1015               	iorwf	?_strcmp+1,w,c
  8605  000E86  B4D8               	btfsc	status,2,c
  8606  000E88  0012               	return	
  8607                           
  8608                           ;Debug.c: 369: else if(strcmp(commands[0], "I")==0)
  8609                           
  8610                           ;Debug.c: 367: }
  8611                           
  8612                           ;Debug.c: 364: {
  8613                           ;Debug.c: 366: break;
  8614  000E8A  0E42               	movlw	low _commands
  8615  000E8C  6E14               	movwf	strcmp@s1,c
  8616  000E8E  0E01               	movlw	high _commands
  8617  000E90  6E15               	movwf	strcmp@s1+1,c
  8618  000E92  0EF8               	movlw	low STR_80
  8619  000E94  6E16               	movwf	strcmp@s2,c
  8620  000E96  0E7F               	movlw	high STR_80
  8621  000E98  6E17               	movwf	strcmp@s2+1,c
  8622  000E9A  EC63  F010         	call	_strcmp	;wreg free
  8623  000E9E  5014               	movf	?_strcmp,w,c
  8624  000EA0  1015               	iorwf	?_strcmp+1,w,c
  8625  000EA2  A4D8               	btfss	status,2,c
  8626  000EA4  D00A               	goto	l6957
  8627                           
  8628                           ;Debug.c: 370: {
  8629                           ;Debug.c: 372: Update_Battery_Icon(atoi(commands[1]));
  8630  000EA6  0E52               	movlw	low (_commands+16)
  8631  000EA8  6E1A               	movwf	atoi@s,c
  8632  000EAA  0E01               	movlw	high (_commands+16)
  8633  000EAC  6E1B               	movwf	atoi@s+1,c
  8634  000EAE  EC08  F00B         	call	_atoi	;wreg free
  8635  000EB2  501A               	movf	?_atoi,w,c
  8636  000EB4  ECFE  F013         	call	_Update_Battery_Icon
  8637                           
  8638                           ;Debug.c: 373: }
  8639  000EB8  D068               	goto	l6975
  8640  000EBA                     l6957:
  8641                           
  8642                           ;Debug.c: 374: else if (strcmp(commands[0], "D")==0)
  8643  000EBA  0E42               	movlw	low _commands
  8644  000EBC  6E14               	movwf	strcmp@s1,c
  8645  000EBE  0E01               	movlw	high _commands
  8646  000EC0  6E15               	movwf	strcmp@s1+1,c
  8647  000EC2  0EF6               	movlw	low STR_81
  8648  000EC4  6E16               	movwf	strcmp@s2,c
  8649  000EC6  0E7F               	movlw	high STR_81
  8650  000EC8  6E17               	movwf	strcmp@s2+1,c
  8651  000ECA  EC63  F010         	call	_strcmp	;wreg free
  8652  000ECE  5014               	movf	?_strcmp,w,c
  8653  000ED0  1015               	iorwf	?_strcmp+1,w,c
  8654  000ED2  A4D8               	btfss	status,2,c
  8655  000ED4  D00A               	goto	l6961
  8656                           
  8657                           ;Debug.c: 375: {
  8658                           ;Debug.c: 377: Update_Battery_Display(atoi(commands[1]));
  8659  000ED6  0E52               	movlw	low (_commands+16)
  8660  000ED8  6E1A               	movwf	atoi@s,c
  8661  000EDA  0E01               	movlw	high (_commands+16)
  8662  000EDC  6E1B               	movwf	atoi@s+1,c
  8663  000EDE  EC08  F00B         	call	_atoi	;wreg free
  8664  000EE2  501A               	movf	?_atoi,w,c
  8665  000EE4  ECEC  F013         	call	_Update_Battery_Display
  8666                           
  8667                           ;Debug.c: 378: }
  8668  000EE8  D050               	goto	l6975
  8669  000EEA                     l6961:
  8670                           
  8671                           ;Debug.c: 379: else if (strcmp(commands[0], "X")==0)
  8672  000EEA  0E42               	movlw	low _commands
  8673  000EEC  6E14               	movwf	strcmp@s1,c
  8674  000EEE  0E01               	movlw	high _commands
  8675  000EF0  6E15               	movwf	strcmp@s1+1,c
  8676  000EF2  0EFA               	movlw	low STR_82
  8677  000EF4  6E16               	movwf	strcmp@s2,c
  8678  000EF6  0E7F               	movlw	high STR_82
  8679  000EF8  6E17               	movwf	strcmp@s2+1,c
  8680  000EFA  EC63  F010         	call	_strcmp	;wreg free
  8681  000EFE  5014               	movf	?_strcmp,w,c
  8682  000F00  1015               	iorwf	?_strcmp+1,w,c
  8683  000F02  A4D8               	btfss	status,2,c
  8684  000F04  D00D               	goto	l6965
  8685                           
  8686                           ;Debug.c: 380: {
  8687                           ;Debug.c: 382: Update_X_Offset(atoi(commands[1]));
  8688  000F06  0E52               	movlw	low (_commands+16)
  8689  000F08  6E1A               	movwf	atoi@s,c
  8690  000F0A  0E01               	movlw	high (_commands+16)
  8691  000F0C  6E1B               	movwf	atoi@s+1,c
  8692  000F0E  EC08  F00B         	call	_atoi	;wreg free
  8693  000F12  C01A  F021         	movff	?_atoi,Update_X_Offset@offset
  8694  000F16  C01B  F022         	movff	?_atoi+1,Update_X_Offset@offset+1
  8695  000F1A  EC84  F013         	call	_Update_X_Offset	;wreg free
  8696                           
  8697                           ;Debug.c: 383: }
  8698  000F1E  D035               	goto	l6975
  8699  000F20                     l6965:
  8700                           
  8701                           ;Debug.c: 384: else if (strcmp(commands[0], "Y")==0)
  8702  000F20  0E42               	movlw	low _commands
  8703  000F22  6E14               	movwf	strcmp@s1,c
  8704  000F24  0E01               	movlw	high _commands
  8705  000F26  6E15               	movwf	strcmp@s1+1,c
  8706  000F28  0EFC               	movlw	low STR_83
  8707  000F2A  6E16               	movwf	strcmp@s2,c
  8708  000F2C  0E7F               	movlw	high STR_83
  8709  000F2E  6E17               	movwf	strcmp@s2+1,c
  8710  000F30  EC63  F010         	call	_strcmp	;wreg free
  8711  000F34  5014               	movf	?_strcmp,w,c
  8712  000F36  1015               	iorwf	?_strcmp+1,w,c
  8713  000F38  A4D8               	btfss	status,2,c
  8714  000F3A  D00D               	goto	l6969
  8715                           
  8716                           ;Debug.c: 385: {
  8717                           ;Debug.c: 387: Update_Y_Offset(atoi(commands[1]));
  8718  000F3C  0E52               	movlw	low (_commands+16)
  8719  000F3E  6E1A               	movwf	atoi@s,c
  8720  000F40  0E01               	movlw	high (_commands+16)
  8721  000F42  6E1B               	movwf	atoi@s+1,c
  8722  000F44  EC08  F00B         	call	_atoi	;wreg free
  8723  000F48  C01A  F021         	movff	?_atoi,Update_Y_Offset@offset
  8724  000F4C  C01B  F022         	movff	?_atoi+1,Update_Y_Offset@offset+1
  8725  000F50  EC6E  F013         	call	_Update_Y_Offset	;wreg free
  8726                           
  8727                           ;Debug.c: 388: }
  8728  000F54  D01A               	goto	l6975
  8729  000F56                     l6969:
  8730                           
  8731                           ;Debug.c: 389: else if (strcmp(commands[0], "Echo")==0)
  8732  000F56  0E42               	movlw	low _commands
  8733  000F58  6E14               	movwf	strcmp@s1,c
  8734  000F5A  0E01               	movlw	high _commands
  8735  000F5C  6E15               	movwf	strcmp@s1+1,c
  8736  000F5E  0ED6               	movlw	low (STR_74+1)
  8737  000F60  6E16               	movwf	strcmp@s2,c
  8738  000F62  0E7F               	movlw	high (STR_74+1)
  8739  000F64  6E17               	movwf	strcmp@s2+1,c
  8740  000F66  EC63  F010         	call	_strcmp	;wreg free
  8741  000F6A  5014               	movf	?_strcmp,w,c
  8742  000F6C  1015               	iorwf	?_strcmp+1,w,c
  8743  000F6E  A4D8               	btfss	status,2,c
  8744  000F70  D00C               	goto	l6975
  8745                           
  8746                           ;Debug.c: 390: {
  8747                           ;Debug.c: 391: uint8_t data[2] = {'E','Q'};
  8748  000F72  C1E3  F06E         	movff	Battery_Display@F18498,Battery_Display@data
  8749  000F76  C1E4  F06F         	movff	Battery_Display@F18498+1,Battery_Display@data+1
  8750                           
  8751                           ;Debug.c: 392: EUSART2_Write_Array(data, sizeof(data));
  8752  000F7A  0E6E               	movlw	low Battery_Display@data
  8753  000F7C  6E15               	movwf	EUSART2_Write_Array@data,c
  8754  000F7E  0E00               	movlw	high Battery_Display@data
  8755  000F80  6E16               	movwf	EUSART2_Write_Array@data+1,c
  8756  000F82  0E02               	movlw	2
  8757  000F84  6E17               	movwf	EUSART2_Write_Array@length,c
  8758  000F86  ECC3  F012         	call	_EUSART2_Write_Array	;wreg free
  8759  000F8A                     l6975:
  8760  000F8A  0E42               	movlw	low _commands
  8761  000F8C  6E14               	movwf	strcmp@s1,c
  8762  000F8E  0E01               	movlw	high _commands
  8763  000F90  6E15               	movwf	strcmp@s1+1,c
  8764  000F92  0EDC               	movlw	low (STR_75+1)
  8765  000F94  6E16               	movwf	strcmp@s2,c
  8766  000F96  0E7F               	movlw	high (STR_75+1)
  8767  000F98  6E17               	movwf	strcmp@s2+1,c
  8768  000F9A  EC63  F010         	call	_strcmp	;wreg free
  8769  000F9E  5014               	movf	?_strcmp,w,c
  8770  000FA0  1015               	iorwf	?_strcmp+1,w,c
  8771  000FA2  B4D8               	btfsc	status,2,c
  8772  000FA4  0012               	return	
  8773  000FA6  D753               	goto	l6945
  8774  000FA8                     __end_of_Battery_Display:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           intcon	equ	0xFF2
  8783                           intcon2	equ	0xFF1
  8784                           intcon3	equ	0xFF0
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           postdec1	equ	0xFE5
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795 ;; *************** function _atoi *****************
  8796 ;; Defined at:
  8797 ;;		line 5 in file "F:\Microchip\XC8\sources\common\atoi.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;  s               2   25[COMRAM] PTR const unsigned char 
  8800 ;;		 -> commands(128), 
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;  a               2   30[COMRAM] int 
  8803 ;;  sign            1   29[COMRAM] unsigned char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  2   25[COMRAM] int 
  8806 ;; Registers used:
  8807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8814 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8816 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8817 ;;Total ram usage:        7 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    5
  8820 ;; This function calls:
  8821 ;;		___wmul
  8822 ;;		_isdigit
  8823 ;; This function is called by:
  8824 ;;		_TAS2521_Communication
  8825 ;;		_MAX17048_Communication
  8826 ;;		_Battery_Display
  8827 ;;		_Screen_Brightness_Debug
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text44
  8832  001610                     __ptext44:
  8833                           	opt stack 0
  8834  001610                     _atoi:
  8835                           	opt stack 22
  8836                           
  8837                           ;incstack = 0
  8838  001610  D002               	goto	l6711
  8839  001612                     l6709:
  8840  001612  4A1A               	infsnz	atoi@s,f,c
  8841  001614  2A1B               	incf	atoi@s+1,f,c
  8842  001616                     l6711:
  8843  001616  C01A  FFD9         	movff	atoi@s,fsr2l
  8844  00161A  C01B  FFDA         	movff	atoi@s+1,fsr2h
  8845  00161E  0E20               	movlw	32
  8846  001620  18DE               	xorwf	postinc2,w,c
  8847  001622  B4D8               	btfsc	status,2,c
  8848  001624  D7F6               	goto	l6709
  8849  001626  C01A  FFD9         	movff	atoi@s,fsr2l
  8850  00162A  C01B  FFDA         	movff	atoi@s+1,fsr2h
  8851  00162E  0E09               	movlw	9
  8852  001630  18DE               	xorwf	postinc2,w,c
  8853  001632  B4D8               	btfsc	status,2,c
  8854  001634  D7EE               	goto	l6709
  8855  001636  0E00               	movlw	0
  8856  001638  6E20               	movwf	atoi@a+1,c
  8857  00163A  0E00               	movlw	0
  8858  00163C  6E1F               	movwf	atoi@a,c
  8859  00163E  0E00               	movlw	0
  8860  001640  6E1E               	movwf	atoi@sign,c
  8861  001642  C01A  FFD9         	movff	atoi@s,fsr2l
  8862  001646  C01B  FFDA         	movff	atoi@s+1,fsr2h
  8863  00164A  0E2D               	movlw	45
  8864  00164C  18DE               	xorwf	postinc2,w,c
  8865  00164E  A4D8               	btfss	status,2,c
  8866  001650  D002               	goto	l6721
  8867  001652  2A1E               	incf	atoi@sign,f,c
  8868  001654  D024               	goto	l6727
  8869  001656                     l6721:
  8870  001656  C01A  FFD9         	movff	atoi@s,fsr2l
  8871  00165A  C01B  FFDA         	movff	atoi@s+1,fsr2h
  8872  00165E  0E2B               	movlw	43
  8873  001660  18DE               	xorwf	postinc2,w,c
  8874  001662  A4D8               	btfss	status,2,c
  8875  001664  D01E               	goto	l6729
  8876  001666  D01B               	goto	l6727
  8877  001668                     l6725:
  8878  001668  C01F  F014         	movff	atoi@a,___wmul@multiplier
  8879  00166C  C020  F015         	movff	atoi@a+1,___wmul@multiplier+1
  8880  001670  0E00               	movlw	0
  8881  001672  6E17               	movwf	___wmul@multiplicand+1,c
  8882  001674  0E0A               	movlw	10
  8883  001676  6E16               	movwf	___wmul@multiplicand,c
  8884  001678  ECC6  F013         	call	___wmul	;wreg free
  8885  00167C  C01A  FFD9         	movff	atoi@s,fsr2l
  8886  001680  C01B  FFDA         	movff	atoi@s+1,fsr2h
  8887  001684  50DF               	movf	indf2,w,c
  8888  001686  6E1C               	movwf	??_atoi& (0+255),c
  8889  001688  6A1D               	clrf	(??_atoi+1)& (0+255),c
  8890  00168A  5014               	movf	?___wmul,w,c
  8891  00168C  261C               	addwf	??_atoi,f,c
  8892  00168E  5015               	movf	?___wmul+1,w,c
  8893  001690  221D               	addwfc	??_atoi+1,f,c
  8894  001692  0ED0               	movlw	208
  8895  001694  241C               	addwf	??_atoi,w,c
  8896  001696  6E1F               	movwf	atoi@a,c
  8897  001698  0EFF               	movlw	255
  8898  00169A  201D               	addwfc	??_atoi+1,w,c
  8899  00169C  6E20               	movwf	atoi@a+1,c
  8900  00169E                     l6727:
  8901  00169E  4A1A               	infsnz	atoi@s,f,c
  8902  0016A0  2A1B               	incf	atoi@s+1,f,c
  8903  0016A2                     l6729:
  8904  0016A2  C01A  FFD9         	movff	atoi@s,fsr2l
  8905  0016A6  C01B  FFDA         	movff	atoi@s+1,fsr2h
  8906  0016AA  50DF               	movf	indf2,w,c
  8907  0016AC  EC3D  F014         	call	_isdigit
  8908  0016B0  B0D8               	btfsc	status,0,c
  8909  0016B2  D7DA               	goto	l6725
  8910  0016B4  501E               	movf	atoi@sign,w,c
  8911  0016B6  B4D8               	btfsc	status,2,c
  8912  0016B8  D00D               	goto	l1936
  8913  0016BA  C01F  F01C         	movff	atoi@a,??_atoi
  8914  0016BE  C020  F01D         	movff	atoi@a+1,??_atoi+1
  8915  0016C2  1E1C               	comf	??_atoi,f,c
  8916  0016C4  1E1D               	comf	??_atoi+1,f,c
  8917  0016C6  4A1C               	infsnz	??_atoi,f,c
  8918  0016C8  2A1D               	incf	??_atoi+1,f,c
  8919  0016CA  C01C  F01A         	movff	??_atoi,?_atoi
  8920  0016CE  C01D  F01B         	movff	??_atoi+1,?_atoi+1
  8921  0016D2  0012               	return	
  8922  0016D4                     l1936:
  8923  0016D4  C01F  F01A         	movff	atoi@a,?_atoi
  8924  0016D8  C020  F01B         	movff	atoi@a+1,?_atoi+1
  8925  0016DC  0012               	return		;funcret
  8926  0016DE                     __end_of_atoi:
  8927                           	opt stack 0
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           intcon	equ	0xFF2
  8935                           intcon2	equ	0xFF1
  8936                           intcon3	equ	0xFF0
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           postdec1	equ	0xFE5
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           postinc2	equ	0xFDE
  8943                           fsr2h	equ	0xFDA
  8944                           fsr2l	equ	0xFD9
  8945                           status	equ	0xFD8
  8946                           
  8947 ;; *************** function _isdigit *****************
  8948 ;; Defined at:
  8949 ;;		line 8 in file "F:\Microchip\XC8\sources\common\isdigit.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;  c               1    wreg     unsigned char 
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  c               1   21[COMRAM] unsigned char 
  8954 ;; Return value:  Size  Location     Type
  8955 ;;		None               void
  8956 ;; Registers used:
  8957 ;;		wreg, status,2, status,0
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8964 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8966 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8967 ;;Total ram usage:        3 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    4
  8970 ;; This function calls:
  8971 ;;		Nothing
  8972 ;; This function is called by:
  8973 ;;		_atoi
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text45
  8978  00287A                     __ptext45:
  8979                           	opt stack 0
  8980  00287A                     _isdigit:
  8981                           	opt stack 22
  8982                           
  8983                           ;incstack = 0
  8984                           ;isdigit@c stored from wreg
  8985  00287A  6E16               	movwf	isdigit@c,c
  8986  00287C  0E00               	movlw	0
  8987  00287E  6E15               	movwf	_isdigit$3579,c
  8988  002880  0E3A               	movlw	58
  8989  002882  6016               	cpfslt	isdigit@c,c
  8990  002884  D005               	goto	l6407
  8991  002886  0E2F               	movlw	47
  8992  002888  6416               	cpfsgt	isdigit@c,c
  8993  00288A  D002               	goto	l6407
  8994  00288C  0E01               	movlw	1
  8995  00288E  6E15               	movwf	_isdigit$3579,c
  8996  002890                     l6407:
  8997  002890  C015  F014         	movff	_isdigit$3579,??_isdigit
  8998  002894  3014               	rrcf	??_isdigit,w,c
  8999  002896  0012               	return	
  9000  002898                     __end_of_isdigit:
  9001                           	opt stack 0
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon	equ	0xFF2
  9009                           intcon2	equ	0xFF1
  9010                           intcon3	equ	0xFF0
  9011                           postinc0	equ	0xFEE
  9012                           wreg	equ	0xFE8
  9013                           postdec1	equ	0xFE5
  9014                           fsr1l	equ	0xFE1
  9015                           indf2	equ	0xFDF
  9016                           postinc2	equ	0xFDE
  9017                           fsr2h	equ	0xFDA
  9018                           fsr2l	equ	0xFD9
  9019                           status	equ	0xFD8
  9020                           
  9021 ;; *************** function ___wmul *****************
  9022 ;; Defined at:
  9023 ;;		line 15 in file "F:\Microchip\XC8\sources\common\Umul16.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  multiplier      2   19[COMRAM] unsigned int 
  9026 ;;  multiplicand    2   21[COMRAM] unsigned int 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  product         2   23[COMRAM] unsigned int 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  2   19[COMRAM] unsigned int 
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0, prodl, prodh
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9041 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9042 ;;Total ram usage:        6 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    4
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_atoi
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text46
  9053  00278C                     __ptext46:
  9054                           	opt stack 0
  9055  00278C                     ___wmul:
  9056                           	opt stack 22
  9057                           
  9058                           ;incstack = 0
  9059  00278C  5014               	movf	___wmul@multiplier,w,c
  9060  00278E  0216               	mulwf	___wmul@multiplicand,c
  9061  002790  CFF3 F018          	movff	prodl,___wmul@product
  9062  002794  CFF4 F019          	movff	prodh,___wmul@product+1
  9063  002798  5014               	movf	___wmul@multiplier,w,c
  9064  00279A  0217               	mulwf	___wmul@multiplicand+1,c
  9065  00279C  50F3               	movf	prodl,w,c
  9066  00279E  2619               	addwf	___wmul@product+1,f,c
  9067  0027A0  5015               	movf	___wmul@multiplier+1,w,c
  9068  0027A2  0216               	mulwf	___wmul@multiplicand,c
  9069  0027A4  50F3               	movf	prodl,w,c
  9070  0027A6  2619               	addwf	___wmul@product+1,f,c
  9071  0027A8  C018  F014         	movff	___wmul@product,?___wmul
  9072  0027AC  C019  F015         	movff	___wmul@product+1,?___wmul+1
  9073  0027B0  0012               	return	
  9074  0027B2                     __end_of___wmul:
  9075                           	opt stack 0
  9076                           tblptru	equ	0xFF8
  9077                           tblptrh	equ	0xFF7
  9078                           tblptrl	equ	0xFF6
  9079                           tablat	equ	0xFF5
  9080                           prodh	equ	0xFF4
  9081                           prodl	equ	0xFF3
  9082                           intcon	equ	0xFF2
  9083                           intcon2	equ	0xFF1
  9084                           intcon3	equ	0xFF0
  9085                           postinc0	equ	0xFEE
  9086                           wreg	equ	0xFE8
  9087                           postdec1	equ	0xFE5
  9088                           fsr1l	equ	0xFE1
  9089                           indf2	equ	0xFDF
  9090                           postinc2	equ	0xFDE
  9091                           fsr2h	equ	0xFDA
  9092                           fsr2l	equ	0xFD9
  9093                           status	equ	0xFD8
  9094                           
  9095 ;; *************** function _Update_Y_Offset *****************
  9096 ;; Defined at:
  9097 ;;		line 82 in file "battery_control.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  offset          2   32[COMRAM] unsigned int 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  data            4    0[BANK0 ] unsigned char [4]
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  1    wreg      void 
  9104 ;; Registers used:
  9105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9111 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9112 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9114 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9115 ;;Total ram usage:        6 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    6
  9118 ;; This function calls:
  9119 ;;		_EUSART2_Write_Array
  9120 ;; This function is called by:
  9121 ;;		_Battery_Display
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           	psect	text47
  9126  0026DC                     __ptext47:
  9127                           	opt stack 0
  9128  0026DC                     _Update_Y_Offset:
  9129                           	opt stack 21
  9130                           
  9131                           ;battery_control.c: 84: uint8_t data[4] = {'Y', 0, 0, 'Q'};
  9132                           
  9133                           ;incstack = 0
  9134  0026DC  C1D9  F060         	movff	Update_Y_Offset@F18455,Update_Y_Offset@data
  9135  0026E0  C1DA  F061         	movff	Update_Y_Offset@F18455+1,Update_Y_Offset@data+1
  9136  0026E4  C1DB  F062         	movff	Update_Y_Offset@F18455+2,Update_Y_Offset@data+2
  9137  0026E8  C1DC  F063         	movff	Update_Y_Offset@F18455+3,Update_Y_Offset@data+3
  9138                           
  9139                           ;battery_control.c: 86: data[1] = (uint8_t) ((offset >> 8) & 0xFF);
  9140  0026EC  5022               	movf	Update_Y_Offset@offset+1,w,c
  9141  0026EE  0100               	movlb	0	; () banked
  9142  0026F0  6F61               	movwf	(Update_Y_Offset@data+1)& (0+255),b
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;battery_control.c: 87: data[2] = (uint8_t) (offset & 0xFF);
  9146  0026F2  C021  F062         	movff	Update_Y_Offset@offset,Update_Y_Offset@data+2
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;battery_control.c: 89: EUSART2_Write_Array(data, sizeof(data));
  9150  0026F6  0E60               	movlw	low Update_Y_Offset@data
  9151  0026F8  6E15               	movwf	EUSART2_Write_Array@data,c
  9152  0026FA  0E00               	movlw	high Update_Y_Offset@data
  9153  0026FC  6E16               	movwf	EUSART2_Write_Array@data+1,c
  9154  0026FE  0E04               	movlw	4
  9155  002700  6E17               	movwf	EUSART2_Write_Array@length,c
  9156  002702  ECC3  F012         	call	_EUSART2_Write_Array	;wreg free
  9157  002706  0012               	return		;funcret
  9158  002708                     __end_of_Update_Y_Offset:
  9159                           	opt stack 0
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon	equ	0xFF2
  9167                           intcon2	equ	0xFF1
  9168                           intcon3	equ	0xFF0
  9169                           postinc0	equ	0xFEE
  9170                           wreg	equ	0xFE8
  9171                           postdec1	equ	0xFE5
  9172                           fsr1l	equ	0xFE1
  9173                           indf2	equ	0xFDF
  9174                           postinc2	equ	0xFDE
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _Update_X_Offset *****************
  9180 ;; Defined at:
  9181 ;;		line 70 in file "battery_control.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;  offset          2   32[COMRAM] unsigned int 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  data            4    0[BANK0 ] unsigned char [4]
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  1    wreg      void 
  9188 ;; Registers used:
  9189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9196 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9198 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9199 ;;Total ram usage:        6 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    6
  9202 ;; This function calls:
  9203 ;;		_EUSART2_Write_Array
  9204 ;; This function is called by:
  9205 ;;		_Battery_Display
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           	psect	text48
  9210  002708                     __ptext48:
  9211                           	opt stack 0
  9212  002708                     _Update_X_Offset:
  9213                           	opt stack 21
  9214                           
  9215                           ;battery_control.c: 72: uint8_t data[4] = {'X', 0, 0, 'Q'};
  9216                           
  9217                           ;incstack = 0
  9218  002708  C1D5  F060         	movff	Update_X_Offset@F18450,Update_X_Offset@data
  9219  00270C  C1D6  F061         	movff	Update_X_Offset@F18450+1,Update_X_Offset@data+1
  9220  002710  C1D7  F062         	movff	Update_X_Offset@F18450+2,Update_X_Offset@data+2
  9221  002714  C1D8  F063         	movff	Update_X_Offset@F18450+3,Update_X_Offset@data+3
  9222                           
  9223                           ;battery_control.c: 74: data[1] = (uint8_t) ((offset >> 8) & 0xFF);
  9224  002718  5022               	movf	Update_X_Offset@offset+1,w,c
  9225  00271A  0100               	movlb	0	; () banked
  9226  00271C  6F61               	movwf	(Update_X_Offset@data+1)& (0+255),b
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;battery_control.c: 75: data[2] = (uint8_t) (offset & 0xFF);
  9230  00271E  C021  F062         	movff	Update_X_Offset@offset,Update_X_Offset@data+2
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;battery_control.c: 77: EUSART2_Write_Array(data, sizeof(data));
  9234  002722  0E60               	movlw	low Update_X_Offset@data
  9235  002724  6E15               	movwf	EUSART2_Write_Array@data,c
  9236  002726  0E00               	movlw	high Update_X_Offset@data
  9237  002728  6E16               	movwf	EUSART2_Write_Array@data+1,c
  9238  00272A  0E04               	movlw	4
  9239  00272C  6E17               	movwf	EUSART2_Write_Array@length,c
  9240  00272E  ECC3  F012         	call	_EUSART2_Write_Array	;wreg free
  9241  002732  0012               	return		;funcret
  9242  002734                     __end_of_Update_X_Offset:
  9243                           	opt stack 0
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           prodh	equ	0xFF4
  9249                           prodl	equ	0xFF3
  9250                           intcon	equ	0xFF2
  9251                           intcon2	equ	0xFF1
  9252                           intcon3	equ	0xFF0
  9253                           postinc0	equ	0xFEE
  9254                           wreg	equ	0xFE8
  9255                           postdec1	equ	0xFE5
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           fsr2h	equ	0xFDA
  9260                           fsr2l	equ	0xFD9
  9261                           status	equ	0xFD8
  9262                           
  9263 ;; *************** function _ADC_Debug *****************
  9264 ;; Defined at:
  9265 ;;		line 293 in file "Debug.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;		None
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;		None
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      void 
  9272 ;; Registers used:
  9273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9283 ;;Total ram usage:        0 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    8
  9286 ;; This function calls:
  9287 ;;		_Read_Commands
  9288 ;;		_printf
  9289 ;;		_strcmp
  9290 ;;		_strcpy
  9291 ;; This function is called by:
  9292 ;;		_DebugMenu
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text49
  9297  001422                     __ptext49:
  9298                           	opt stack 0
  9299  001422                     _ADC_Debug:
  9300                           	opt stack 20
  9301                           
  9302                           ;Debug.c: 295: printf("\n\nADC Debug options");
  9303                           
  9304                           ;incstack = 0
  9305  001422  0EEB               	movlw	low STR_57
  9306  001424  0100               	movlb	0	; () banked
  9307  001426  6F60               	movwf	printf@f& (0+255),b
  9308  001428  0E7E               	movlw	high STR_57
  9309  00142A  0100               	movlb	0	; () banked
  9310  00142C  6F61               	movwf	(printf@f+1)& (0+255),b
  9311  00142E  EC8D  F000         	call	_printf	;wreg free
  9312                           
  9313                           ;Debug.c: 296: printf("\nAllowed values:  ");
  9314  001432  0EFF               	movlw	low STR_25
  9315  001434  0100               	movlb	0	; () banked
  9316  001436  6F60               	movwf	printf@f& (0+255),b
  9317  001438  0E7E               	movlw	high STR_25
  9318  00143A  0100               	movlb	0	; () banked
  9319  00143C  6F61               	movwf	(printf@f+1)& (0+255),b
  9320  00143E  EC8D  F000         	call	_printf	;wreg free
  9321                           
  9322                           ;Debug.c: 297: printf("\nCommand = Read, Stream, Exit");
  9323  001442  0E40               	movlw	low STR_59
  9324  001444  0100               	movlb	0	; () banked
  9325  001446  6F60               	movwf	printf@f& (0+255),b
  9326  001448  0E7D               	movlw	high STR_59
  9327  00144A  0100               	movlb	0	; () banked
  9328  00144C  6F61               	movwf	(printf@f+1)& (0+255),b
  9329  00144E  EC8D  F000         	call	_printf	;wreg free
  9330                           
  9331                           ;Debug.c: 299: strcpy(commands[0], "");
  9332  001452  0E42               	movlw	low _commands
  9333  001454  6E14               	movwf	strcpy@to,c
  9334  001456  0E01               	movlw	high _commands
  9335  001458  6E15               	movwf	strcpy@to+1,c
  9336  00145A  0EEE               	movlw	low (STR_12+3)
  9337  00145C  6E16               	movwf	strcpy@from,c
  9338  00145E  0E7F               	movlw	high (STR_12+3)
  9339  001460  6E17               	movwf	strcpy@from+1,c
  9340  001462  ECA9  F010         	call	_strcpy	;wreg free
  9341                           
  9342                           ;Debug.c: 301: while(strcmp(commands[0], "Exit") != 0)
  9343  001466  D05C               	goto	l6939
  9344  001468                     l6915:
  9345                           
  9346                           ;Debug.c: 302: {
  9347                           ;Debug.c: 303: printf("\n\nCommand: ");
  9348  001468  0E6C               	movlw	low STR_31
  9349  00146A  0100               	movlb	0	; () banked
  9350  00146C  6F60               	movwf	printf@f& (0+255),b
  9351  00146E  0E7F               	movlw	high STR_31
  9352  001470  0100               	movlb	0	; () banked
  9353  001472  6F61               	movwf	(printf@f+1)& (0+255),b
  9354  001474  EC8D  F000         	call	_printf	;wreg free
  9355                           
  9356                           ;Debug.c: 305: command_count = Read_Commands(commands);
  9357  001478  0E42               	movlw	low _commands
  9358  00147A  6E20               	movwf	Read_Commands@cmds,c
  9359  00147C  0E01               	movlw	high _commands
  9360  00147E  6E21               	movwf	Read_Commands@cmds+1,c
  9361  001480  ECB5  F008         	call	_Read_Commands	;wreg free
  9362  001484  0100               	movlb	0	; () banked
  9363  001486  6FBB               	movwf	_command_count& (0+255),b
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;Debug.c: 311: if(strcmp(commands[0], "Exit")==0)
  9367  001488  0E42               	movlw	low _commands
  9368  00148A  6E14               	movwf	strcmp@s1,c
  9369  00148C  0E01               	movlw	high _commands
  9370  00148E  6E15               	movwf	strcmp@s1+1,c
  9371  001490  0EDC               	movlw	low (STR_75+1)
  9372  001492  6E16               	movwf	strcmp@s2,c
  9373  001494  0E7F               	movlw	high (STR_75+1)
  9374  001496  6E17               	movwf	strcmp@s2+1,c
  9375  001498  EC63  F010         	call	_strcmp	;wreg free
  9376  00149C  5014               	movf	?_strcmp,w,c
  9377  00149E  1015               	iorwf	?_strcmp+1,w,c
  9378  0014A0  B4D8               	btfsc	status,2,c
  9379  0014A2  0012               	return	
  9380                           
  9381                           ;Debug.c: 317: else if(strcmp(commands[0], "Read")==0)
  9382                           
  9383                           ;Debug.c: 315: }
  9384                           
  9385                           ;Debug.c: 312: {
  9386                           ;Debug.c: 314: break;
  9387  0014A4  0E42               	movlw	low _commands
  9388  0014A6  6E14               	movwf	strcmp@s1,c
  9389  0014A8  0E01               	movlw	high _commands
  9390  0014AA  6E15               	movwf	strcmp@s1+1,c
  9391  0014AC  0EE1               	movlw	low STR_35
  9392  0014AE  6E16               	movwf	strcmp@s2,c
  9393  0014B0  0E7F               	movlw	high STR_35
  9394  0014B2  6E17               	movwf	strcmp@s2+1,c
  9395  0014B4  EC63  F010         	call	_strcmp	;wreg free
  9396  0014B8  5014               	movf	?_strcmp,w,c
  9397  0014BA  1015               	iorwf	?_strcmp+1,w,c
  9398  0014BC  A4D8               	btfss	status,2,c
  9399  0014BE  D00D               	goto	l6927
  9400                           
  9401                           ;Debug.c: 318: {
  9402                           ;Debug.c: 319: printf("\nConversion = %u", ADC_Data);
  9403  0014C0  0E23               	movlw	low STR_65
  9404  0014C2  0100               	movlb	0	; () banked
  9405  0014C4  6F60               	movwf	printf@f& (0+255),b
  9406  0014C6  0E7F               	movlw	high STR_65
  9407  0014C8  0100               	movlb	0	; () banked
  9408  0014CA  6F61               	movwf	(printf@f+1)& (0+255),b
  9409  0014CC  C027  F062         	movff	_ADC_Data,?_printf+2
  9410  0014D0  0100               	movlb	0	; () banked
  9411  0014D2  6B63               	clrf	(?_printf+3)& (0+255),b
  9412  0014D4  EC8D  F000         	call	_printf	;wreg free
  9413                           
  9414                           ;Debug.c: 320: }
  9415  0014D8  D023               	goto	l6939
  9416  0014DA                     l6927:
  9417                           
  9418                           ;Debug.c: 321: else if (strcmp(commands[0], "Stream")==0)
  9419  0014DA  0E42               	movlw	low _commands
  9420  0014DC  6E14               	movwf	strcmp@s1,c
  9421  0014DE  0E01               	movlw	high _commands
  9422  0014E0  6E15               	movwf	strcmp@s1+1,c
  9423  0014E2  0EC8               	movlw	low STR_66
  9424  0014E4  6E16               	movwf	strcmp@s2,c
  9425  0014E6  0E7F               	movlw	high STR_66
  9426  0014E8  6E17               	movwf	strcmp@s2+1,c
  9427  0014EA  EC63  F010         	call	_strcmp	;wreg free
  9428  0014EE  5014               	movf	?_strcmp,w,c
  9429  0014F0  1015               	iorwf	?_strcmp+1,w,c
  9430  0014F2  B4D8               	btfsc	status,2,c
  9431  0014F4  D012               	goto	l6937
  9432  0014F6  D014               	goto	l6939
  9433  0014F8                     l6931:
  9434                           
  9435                           ;Debug.c: 326: {
  9436                           ;Debug.c: 327: if(ADC_Data_Ready == 1)
  9437  0014F8  0428               	decf	_ADC_Data_Ready,w,c	;volatile
  9438  0014FA  A4D8               	btfss	status,2,c
  9439  0014FC  D00E               	goto	l6937
  9440                           
  9441                           ;Debug.c: 328: {
  9442                           ;Debug.c: 329: ADC_Data_Ready = 0;
  9443  0014FE  0E00               	movlw	0
  9444  001500  6E28               	movwf	_ADC_Data_Ready,c	;volatile
  9445                           
  9446                           ;Debug.c: 330: printf("\nConversion = %u", ADC_Data);
  9447  001502  0E23               	movlw	low STR_65
  9448  001504  0100               	movlb	0	; () banked
  9449  001506  6F60               	movwf	printf@f& (0+255),b
  9450  001508  0E7F               	movlw	high STR_65
  9451  00150A  0100               	movlb	0	; () banked
  9452  00150C  6F61               	movwf	(printf@f+1)& (0+255),b
  9453  00150E  C027  F062         	movff	_ADC_Data,?_printf+2
  9454  001512  0100               	movlb	0	; () banked
  9455  001514  6B63               	clrf	(?_printf+3)& (0+255),b
  9456  001516  EC8D  F000         	call	_printf	;wreg free
  9457  00151A                     l6937:
  9458  00151A  5035               	movf	_eusart1RxCount,w,c	;volatile
  9459  00151C  B4D8               	btfsc	status,2,c
  9460  00151E  D7EC               	goto	l6931
  9461  001520                     l6939:
  9462  001520  0E42               	movlw	low _commands
  9463  001522  6E14               	movwf	strcmp@s1,c
  9464  001524  0E01               	movlw	high _commands
  9465  001526  6E15               	movwf	strcmp@s1+1,c
  9466  001528  0EDC               	movlw	low (STR_75+1)
  9467  00152A  6E16               	movwf	strcmp@s2,c
  9468  00152C  0E7F               	movlw	high (STR_75+1)
  9469  00152E  6E17               	movwf	strcmp@s2+1,c
  9470  001530  EC63  F010         	call	_strcmp	;wreg free
  9471  001534  5014               	movf	?_strcmp,w,c
  9472  001536  1015               	iorwf	?_strcmp+1,w,c
  9473  001538  B4D8               	btfsc	status,2,c
  9474  00153A  0012               	return	
  9475  00153C  D795               	goto	l6915
  9476  00153E                     __end_of_ADC_Debug:
  9477                           	opt stack 0
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           prodh	equ	0xFF4
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           intcon2	equ	0xFF1
  9486                           intcon3	equ	0xFF0
  9487                           postinc0	equ	0xFEE
  9488                           wreg	equ	0xFE8
  9489                           postdec1	equ	0xFE5
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _strcmp *****************
  9498 ;; Defined at:
  9499 ;;		line 33 in file "F:\Microchip\XC8\sources\common\strcmp.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  s1              2   19[COMRAM] PTR const unsigned char 
  9502 ;;		 -> commands(128), LED_Control@second_command(16), LED_Control@first_command(16), 
  9503 ;;  s2              2   21[COMRAM] PTR const unsigned char 
  9504 ;;		 -> STR_86(5), STR_89(5), STR_77(5), STR_84(5), 
  9505 ;;		 -> STR_83(2), STR_82(2), STR_81(2), STR_80(2), 
  9506 ;;		 -> STR_79(5), STR_61(5), STR_66(7), STR_64(5), 
  9507 ;;		 -> STR_63(5), STR_46(5), STR_53(8), STR_51(8), 
  9508 ;;		 -> STR_50(5), STR_49(6), STR_48(5), STR_30(5), 
  9509 ;;		 -> STR_37(8), STR_36(7), STR_35(5), STR_34(6), 
  9510 ;;		 -> STR_33(11), STR_32(5), STR_21(3), STR_20(4), 
  9511 ;;		 -> STR_19(3), STR_18(5), 
  9512 ;; Auto vars:     Size  Location     Type
  9513 ;;  r               1   24[COMRAM] char 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  2   19[COMRAM] int 
  9516 ;; Registers used:
  9517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9526 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9527 ;;Total ram usage:        6 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; Hardware stack levels required when called:    4
  9530 ;; This function calls:
  9531 ;;		Nothing
  9532 ;; This function is called by:
  9533 ;;		_LED_Control
  9534 ;;		_TAS2521_Communication
  9535 ;;		_MAX17048_Communication
  9536 ;;		_ADC_Debug
  9537 ;;		_Battery_Display
  9538 ;;		_Screen_Brightness_Debug
  9539 ;; This function uses a non-reentrant model
  9540 ;;
  9541                           
  9542                           	psect	text50
  9543  0020C6                     __ptext50:
  9544                           	opt stack 0
  9545  0020C6                     _strcmp:
  9546                           	opt stack 23
  9547                           
  9548                           ;incstack = 0
  9549  0020C6  D004               	goto	l6667
  9550  0020C8                     l6665:
  9551  0020C8  4A14               	infsnz	strcmp@s1,f,c
  9552  0020CA  2A15               	incf	strcmp@s1+1,f,c
  9553  0020CC  4A16               	infsnz	strcmp@s2,f,c
  9554  0020CE  2A17               	incf	strcmp@s2+1,f,c
  9555  0020D0                     l6667:
  9556  0020D0  C014  FFD9         	movff	strcmp@s1,fsr2l
  9557  0020D4  C015  FFDA         	movff	strcmp@s1+1,fsr2h
  9558  0020D8  50DF               	movf	indf2,w,c
  9559  0020DA  6E18               	movwf	??_strcmp& (0+255),c
  9560  0020DC  C016  FFF6         	movff	strcmp@s2,tblptrl
  9561  0020E0  C017  FFF7         	movff	strcmp@s2+1,tblptrh
  9562  0020E4                     	if	0	;tblptru may be non-zero
  9563  0020E4                     	endif
  9564  0020E4                     	if	0	;tblptru may be non-zero
  9565  0020E4                     	endif
  9566  0020E4  0008               	tblrd		*
  9567  0020E6  50F5               	movf	tablat,w,c
  9568  0020E8  0800               	sublw	0
  9569  0020EA  2418               	addwf	??_strcmp,w,c
  9570  0020EC  6E19               	movwf	strcmp@r,c
  9571  0020EE  5019               	movf	strcmp@r,w,c
  9572  0020F0  A4D8               	btfss	status,2,c
  9573  0020F2  D007               	goto	l6671
  9574  0020F4  C014  FFD9         	movff	strcmp@s1,fsr2l
  9575  0020F8  C015  FFDA         	movff	strcmp@s1+1,fsr2h
  9576  0020FC  50DF               	movf	indf2,w,c
  9577  0020FE  A4D8               	btfss	status,2,c
  9578  002100  D7E3               	goto	l6665
  9579  002102                     l6671:
  9580  002102  5019               	movf	strcmp@r,w,c
  9581  002104  6E14               	movwf	?_strcmp,c
  9582  002106  6A15               	clrf	?_strcmp+1,c
  9583  002108  BE14               	btfsc	?_strcmp,7,c
  9584  00210A  0615               	decf	?_strcmp+1,f,c
  9585  00210C  0012               	return	
  9586  00210E                     __end_of_strcmp:
  9587                           	opt stack 0
  9588                           tblptru	equ	0xFF8
  9589                           tblptrh	equ	0xFF7
  9590                           tblptrl	equ	0xFF6
  9591                           tablat	equ	0xFF5
  9592                           prodh	equ	0xFF4
  9593                           prodl	equ	0xFF3
  9594                           intcon	equ	0xFF2
  9595                           intcon2	equ	0xFF1
  9596                           intcon3	equ	0xFF0
  9597                           postinc0	equ	0xFEE
  9598                           wreg	equ	0xFE8
  9599                           postdec1	equ	0xFE5
  9600                           fsr1l	equ	0xFE1
  9601                           indf2	equ	0xFDF
  9602                           postinc2	equ	0xFDE
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _printf *****************
  9608 ;; Defined at:
  9609 ;;		line 464 in file "F:\Microchip\XC8\sources\common\doprnt.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9612 ;;		 -> STR_90(13), STR_88(14), STR_87(41), STR_78(12), 
  9613 ;;		 -> STR_75(6), STR_74(6), STR_73(20), STR_72(20), 
  9614 ;;		 -> STR_71(10), STR_70(21), STR_69(21), STR_68(24), 
  9615 ;;		 -> STR_67(17), STR_65(17), STR_62(12), STR_59(30), 
  9616 ;;		 -> STR_58(19), STR_57(20), STR_56(23), STR_55(48), 
  9617 ;;		 -> STR_54(21), STR_52(22), STR_47(12), STR_44(36), 
  9618 ;;		 -> STR_43(40), STR_42(29), STR_41(29), STR_40(19), 
  9619 ;;		 -> STR_39(63), STR_38(32), STR_31(12), STR_28(36), 
  9620 ;;		 -> STR_27(40), STR_26(58), STR_25(19), STR_24(63), 
  9621 ;;		 -> STR_23(32), STR_22(23), STR_17(11), STR_16(10), 
  9622 ;;		 -> STR_15(10), STR_14(50), STR_13(45), STR_12(4), 
  9623 ;;		 -> STR_11(23), STR_10(26), STR_9(13), STR_8(11), 
  9624 ;;		 -> STR_7(22), STR_6(20), STR_5(8), STR_4(27), 
  9625 ;;		 -> STR_3(26), STR_2(16), STR_1(46), 
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;  idx             1    4[BANK0 ] unsigned char 
  9628 ;;  tmpval          4    0        struct .
  9629 ;;  val             2   11[BANK0 ] unsigned int 
  9630 ;;  ap              2    8[BANK0 ] PTR void [1]
  9631 ;;		 -> ?_printf(2), 
  9632 ;;  cp              2    6[BANK0 ] PTR const unsigned char 
  9633 ;;		 -> STR_91(7), Read_Commands@str(128), LED_Control@command_input(16), NULL(0), 
  9634 ;;  len             2    0        unsigned int 
  9635 ;;  c               1   13[BANK0 ] char 
  9636 ;;  flag            1   10[BANK0 ] unsigned char 
  9637 ;;  prec            1    5[BANK0 ] char 
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  2    0[BANK0 ] int 
  9640 ;; Registers used:
  9641 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9647 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9648 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9650 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9651 ;;Total ram usage:       15 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    6
  9654 ;; This function calls:
  9655 ;;		___lwdiv
  9656 ;;		___lwmod
  9657 ;;		_putch
  9658 ;; This function is called by:
  9659 ;;		_DebugMenu
  9660 ;;		_LED_Control
  9661 ;;		_TAS2521_Communication
  9662 ;;		_MAX17048_Communication
  9663 ;;		_ADC_Debug
  9664 ;;		_Battery_Display
  9665 ;;		_Screen_Brightness_Debug
  9666 ;;		_Set_Volume
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           	psect	text51
  9671  00011A                     __ptext51:
  9672                           	opt stack 0
  9673  00011A                     _printf:
  9674                           	opt stack 22
  9675                           
  9676                           ;doprnt.c: 466: va_list ap;
  9677                           ;doprnt.c: 499: signed char c;
  9678                           ;doprnt.c: 506: signed char prec;
  9679                           ;doprnt.c: 508: unsigned char flag;
  9680                           ;doprnt.c: 523: union {
  9681                           ;doprnt.c: 524: unsigned long vd;
  9682                           ;doprnt.c: 525: double integ;
  9683                           ;doprnt.c: 526: } tmpval;
  9684                           ;doprnt.c: 528: unsigned int val;
  9685                           ;doprnt.c: 529: unsigned len;
  9686                           ;doprnt.c: 530: const char * cp;
  9687                           ;doprnt.c: 533: *ap = __va_start();
  9688                           
  9689                           ;incstack = 0
  9690  00011A  0E62               	movlw	low (?_printf+2)
  9691  00011C  0100               	movlb	0	; () banked
  9692  00011E  6F68               	movwf	printf@ap& (0+255),b
  9693  000120  0E00               	movlw	high (?_printf+2)
  9694  000122  0100               	movlb	0	; () banked
  9695  000124  6F69               	movwf	(printf@ap+1)& (0+255),b
  9696                           
  9697                           ;doprnt.c: 536: while(c = *f++) {
  9698  000126  D158               	goto	l6661
  9699  000128                     l6565:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;doprnt.c: 538: if(c != '%')
  9703  000128  0E25               	movlw	37
  9704  00012A  0100               	movlb	0	; () banked
  9705  00012C  196D               	xorwf	printf@c& (0+255),w,b
  9706  00012E  B4D8               	btfsc	status,2,c
  9707  000130  D005               	goto	l6569
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;doprnt.c: 540: {
  9711                           ;doprnt.c: 541: (putch(c) );
  9712  000132  0100               	movlb	0	; () banked
  9713  000134  516D               	movf	printf@c& (0+255),w,b
  9714  000136  ECFF  F014         	call	_putch
  9715                           
  9716                           ;doprnt.c: 542: continue;
  9717  00013A  D14E               	goto	l6661
  9718  00013C                     l6569:
  9719                           
  9720                           ;doprnt.c: 543: }
  9721                           ;doprnt.c: 548: flag = 0;
  9722  00013C  0E00               	movlw	0
  9723  00013E  0100               	movlb	0	; () banked
  9724  000140  6F6A               	movwf	printf@flag& (0+255),b
  9725                           
  9726                           ;doprnt.c: 635: switch(c = *f++) {
  9727  000142  D04A               	goto	l6591
  9728  000144                     l6571:
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;doprnt.c: 721: flag |= 0x80;
  9732  000144  0100               	movlb	0	; () banked
  9733  000146  8F6A               	bsf	printf@flag& (0+255),7,b
  9734                           
  9735                           ;doprnt.c: 723: break;
  9736  000148  D066               	goto	l6593
  9737  00014A                     l6573:
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9741  00014A  C068  FFD9         	movff	printf@ap,fsr2l
  9742  00014E  C069  FFDA         	movff	printf@ap+1,fsr2h
  9743  000152  CFDE F066          	movff	postinc2,printf@cp
  9744  000156  CFDD F067          	movff	postdec2,printf@cp+1
  9745                           
  9746                           ; BSR set to: 0
  9747  00015A  0E02               	movlw	2
  9748  00015C  0100               	movlb	0	; () banked
  9749  00015E  2768               	addwf	printf@ap& (0+255),f,b
  9750  000160  0E00               	movlw	0
  9751  000162  2369               	addwfc	(printf@ap+1)& (0+255),f,b
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;doprnt.c: 740: if(!cp)
  9755  000164  0100               	movlb	0	; () banked
  9756  000166  5166               	movf	printf@cp& (0+255),w,b
  9757  000168  0100               	movlb	0	; () banked
  9758  00016A  1167               	iorwf	(printf@cp+1)& (0+255),w,b
  9759  00016C  A4D8               	btfss	status,2,c
  9760  00016E  D01C               	goto	l6585
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;doprnt.c: 741: cp = "(null)";
  9764  000170  0EBA               	movlw	low STR_91
  9765  000172  0100               	movlb	0	; () banked
  9766  000174  6F66               	movwf	printf@cp& (0+255),b
  9767  000176  0E7F               	movlw	high STR_91
  9768  000178  0100               	movlb	0	; () banked
  9769  00017A  6F67               	movwf	(printf@cp+1)& (0+255),b
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;doprnt.c: 777: while(*cp)
  9773  00017C  D015               	goto	l6585
  9774  00017E                     l6581:
  9775                           
  9776                           ;doprnt.c: 778: (putch(*cp++) );
  9777  00017E  C066  FFF6         	movff	printf@cp,tblptrl
  9778  000182  C067  FFF7         	movff	printf@cp+1,tblptrh
  9779  000186  6AF8               	clrf	tblptru,c
  9780  000188  0E0E               	movlw	(high __ramtop+-1)
  9781  00018A  64F7               	cpfsgt	tblptrh,c
  9782  00018C  D003               	bra	u5557
  9783  00018E  0008               	tblrd		*
  9784  000190  50F5               	movf	tablat,w,c
  9785  000192  D005               	bra	u5550
  9786  000194                     u5557:
  9787  000194  CFF6 FFE9          	movff	tblptrl,fsr0l
  9788  000198  CFF7 FFEA          	movff	tblptrh,fsr0h
  9789  00019C  50EF               	movf	indf0,w,c
  9790  00019E                     u5550:
  9791  00019E  ECFF  F014         	call	_putch
  9792  0001A2  0100               	movlb	0	; () banked
  9793  0001A4  4B66               	infsnz	printf@cp& (0+255),f,b
  9794  0001A6  2B67               	incf	(printf@cp+1)& (0+255),f,b
  9795  0001A8                     l6585:
  9796                           
  9797                           ; BSR set to: 0
  9798  0001A8  C066  FFF6         	movff	printf@cp,tblptrl
  9799  0001AC  C067  FFF7         	movff	printf@cp+1,tblptrh
  9800  0001B0  6AF8               	clrf	tblptru,c
  9801  0001B2  0E0E               	movlw	(high __ramtop+-1)
  9802  0001B4  64F7               	cpfsgt	tblptrh,c
  9803  0001B6  D003               	bra	u5567
  9804  0001B8  0008               	tblrd		*
  9805  0001BA  50F5               	movf	tablat,w,c
  9806  0001BC  D005               	bra	u5560
  9807  0001BE                     u5567:
  9808  0001BE  CFF6 FFE9          	movff	tblptrl,fsr0l
  9809  0001C2  CFF7 FFEA          	movff	tblptrh,fsr0h
  9810  0001C6  50EF               	movf	indf0,w,c
  9811  0001C8                     u5560:
  9812  0001C8  0900               	iorlw	0
  9813  0001CA  B4D8               	btfsc	status,2,c
  9814  0001CC  D105               	goto	l6661
  9815  0001CE  D7D7               	goto	l6581
  9816  0001D0                     l6587:
  9817                           
  9818                           ;doprnt.c: 818: flag |= 0xC0;
  9819  0001D0  0EC0               	movlw	192
  9820  0001D2  0100               	movlb	0	; () banked
  9821  0001D4  136A               	iorwf	printf@flag& (0+255),f,b
  9822                           
  9823                           ; BSR set to: 0
  9824                           ;doprnt.c: 822: }
  9825                           
  9826                           ;doprnt.c: 819: break;
  9827  0001D6  D01F               	goto	l6593
  9828  0001D8                     l6591:
  9829                           
  9830                           ; BSR set to: 0
  9831  0001D8  C060  FFF6         	movff	printf@f,tblptrl
  9832  0001DC  C061  FFF7         	movff	printf@f+1,tblptrh
  9833  0001E0  0100               	movlb	0	; () banked
  9834  0001E2  4B60               	infsnz	printf@f& (0+255),f,b
  9835  0001E4  2B61               	incf	(printf@f+1)& (0+255),f,b
  9836  0001E6                     	if	0	;tblptru may be non-zero
  9837  0001E6                     	endif
  9838  0001E6                     	if	0	;tblptru may be non-zero
  9839  0001E6                     	endif
  9840  0001E6  0008               	tblrd		*
  9841  0001E8  CFF5 F06D          	movff	tablat,printf@c
  9842  0001EC  0100               	movlb	0	; () banked
  9843  0001EE  516D               	movf	printf@c& (0+255),w,b
  9844                           
  9845                           ; Switch size 1, requested type "space"
  9846                           ; Number of cases is 6, Range of values is 0 to 120
  9847                           ; switch strategies available:
  9848                           ; Name         Instructions Cycles
  9849                           ; simple_byte           19    10 (average)
  9850                           ;	Chosen strategy is simple_byte
  9851  0001F0  0A00               	xorlw	0	; case 0
  9852  0001F2  B4D8               	btfsc	status,2,c
  9853  0001F4  0012               	return	
  9854  0001F6  0A64               	xorlw	100	; case 100
  9855  0001F8  B4D8               	btfsc	status,2,c
  9856  0001FA  D00D               	goto	l6593
  9857  0001FC  0A0D               	xorlw	13	; case 105
  9858  0001FE  B4D8               	btfsc	status,2,c
  9859  000200  D00A               	goto	l6593
  9860  000202  0A1A               	xorlw	26	; case 115
  9861  000204  B4D8               	btfsc	status,2,c
  9862  000206  D7A1               	goto	l6573
  9863  000208  0A06               	xorlw	6	; case 117
  9864  00020A  B4D8               	btfsc	status,2,c
  9865  00020C  D7E1               	goto	l6587
  9866  00020E  0A0D               	xorlw	13	; case 120
  9867  000210  B4D8               	btfsc	status,2,c
  9868  000212  D798               	goto	l6571
  9869  000214  D0E1               	goto	l6661
  9870  000216                     l6593:
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  9874  000216  C06A  F020         	movff	printf@flag,??_printf
  9875  00021A  0EC0               	movlw	192
  9876  00021C  1620               	andwf	??_printf,f,c
  9877  00021E  A4D8               	btfss	status,2,c
  9878  000220  D019               	goto	l6605
  9879                           
  9880                           ; BSR set to: 0
  9881                           ;doprnt.c: 1253: {
  9882                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9883  000222  C068  FFD9         	movff	printf@ap,fsr2l
  9884  000226  C069  FFDA         	movff	printf@ap+1,fsr2h
  9885  00022A  CFDE F06B          	movff	postinc2,printf@val
  9886  00022E  CFDD F06C          	movff	postdec2,printf@val+1
  9887                           
  9888                           ; BSR set to: 0
  9889  000232  0E02               	movlw	2
  9890  000234  0100               	movlb	0	; () banked
  9891  000236  2768               	addwf	printf@ap& (0+255),f,b
  9892  000238  0E00               	movlw	0
  9893  00023A  2369               	addwfc	(printf@ap+1)& (0+255),f,b
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;doprnt.c: 1261: if((int)val < 0) {
  9897  00023C  0100               	movlb	0	; () banked
  9898  00023E  AF6C               	btfss	(printf@val+1)& (0+255),7,b
  9899  000240  D053               	goto	l6639
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;doprnt.c: 1262: flag |= 0x03;
  9903  000242  0E03               	movlw	3
  9904  000244  0100               	movlb	0	; () banked
  9905  000246  136A               	iorwf	printf@flag& (0+255),f,b
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;doprnt.c: 1263: val = -val;
  9909  000248  0100               	movlb	0	; () banked
  9910  00024A  6D6B               	negf	printf@val& (0+255),b
  9911  00024C  1F6C               	comf	(printf@val+1)& (0+255),f,b
  9912  00024E  B0D8               	btfsc	status,0,c
  9913  000250  2B6C               	incf	(printf@val+1)& (0+255),f,b
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;doprnt.c: 1264: }
  9917                           ;doprnt.c: 1266: }
  9918  000252  D04A               	goto	l6639
  9919  000254                     l6605:
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;doprnt.c: 1268: else
  9923                           ;doprnt.c: 1273: {
  9924                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9925  000254  C068  FFD9         	movff	printf@ap,fsr2l
  9926  000258  C069  FFDA         	movff	printf@ap+1,fsr2h
  9927  00025C  CFDE F06B          	movff	postinc2,printf@val
  9928  000260  CFDD F06C          	movff	postdec2,printf@val+1
  9929                           
  9930                           ; BSR set to: 0
  9931  000264  0E02               	movlw	2
  9932  000266  0100               	movlb	0	; () banked
  9933  000268  2768               	addwf	printf@ap& (0+255),f,b
  9934  00026A  0E00               	movlw	0
  9935  00026C  2369               	addwfc	(printf@ap+1)& (0+255),f,b
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;doprnt.c: 1287: }
  9939                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9940  00026E  D03C               	goto	l6639
  9941  000270                     l6609:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;doprnt.c: 1302: case 0xC0:
  9945                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9946  000270  0E01               	movlw	1
  9947  000272  0100               	movlb	0	; () banked
  9948  000274  6F6D               	movwf	printf@c& (0+255),b
  9949  000276                     l6611:
  9950                           
  9951                           ; BSR set to: 0
  9952  000276  0E05               	movlw	5
  9953  000278  0100               	movlb	0	; () banked
  9954  00027A  196D               	xorwf	printf@c& (0+255),w,b
  9955  00027C  B4D8               	btfsc	status,2,c
  9956  00027E  D040               	goto	l6641
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;doprnt.c: 1306: if(val < dpowers[c])
  9960                           
  9961                           ; BSR set to: 0
  9962                           
  9963                           ; BSR set to: 0
  9964  000280  0100               	movlb	0	; () banked
  9965  000282  516D               	movf	printf@c& (0+255),w,b
  9966  000284  0D02               	mullw	2
  9967  000286  0E63               	movlw	low _dpowers
  9968  000288  24F3               	addwf	prodl,w,c
  9969  00028A  6EF6               	movwf	tblptrl,c
  9970  00028C  0E7B               	movlw	high _dpowers
  9971  00028E  20F4               	addwfc	prodh,w,c
  9972  000290  6EF7               	movwf	tblptrh,c
  9973  000292                     	if	0	;There are less than 3 active tblptr bytes
  9974  000292                     	endif
  9975  000292  0009               	tblrd		*+
  9976  000294  50F5               	movf	tablat,w,c
  9977  000296  0100               	movlb	0	; () banked
  9978  000298  5D6B               	subwf	printf@val& (0+255),w,b
  9979  00029A  0009               	tblrd		*+
  9980  00029C  50F5               	movf	tablat,w,c
  9981  00029E  0100               	movlb	0	; () banked
  9982  0002A0  596C               	subwfb	(printf@val+1)& (0+255),w,b
  9983  0002A2  A0D8               	btfss	status,0,c
  9984  0002A4  D02D               	goto	l6641
  9985                           
  9986                           ; BSR set to: 0
  9987                           
  9988                           ; BSR set to: 0
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;doprnt.c: 1307: break;
  9992  0002A6  0100               	movlb	0	; () banked
  9993  0002A8  2B6D               	incf	printf@c& (0+255),f,b
  9994  0002AA  D7E5               	goto	l6611
  9995  0002AC                     l6623:
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9999  0002AC  0E01               	movlw	1
 10000  0002AE  0100               	movlb	0	; () banked
 10001  0002B0  6F6D               	movwf	printf@c& (0+255),b
 10002  0002B2                     l6625:
 10003                           
 10004                           ; BSR set to: 0
 10005  0002B2  0E04               	movlw	4
 10006  0002B4  0100               	movlb	0	; () banked
 10007  0002B6  196D               	xorwf	printf@c& (0+255),w,b
 10008  0002B8  B4D8               	btfsc	status,2,c
 10009  0002BA  D022               	goto	l6641
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10013                           
 10014                           ; BSR set to: 0
 10015                           
 10016                           ; BSR set to: 0
 10017  0002BC  0100               	movlb	0	; () banked
 10018  0002BE  516D               	movf	printf@c& (0+255),w,b
 10019  0002C0  0D02               	mullw	2
 10020  0002C2  0E6D               	movlw	low _hexpowers
 10021  0002C4  24F3               	addwf	prodl,w,c
 10022  0002C6  6EF6               	movwf	tblptrl,c
 10023  0002C8  0E7B               	movlw	high _hexpowers
 10024  0002CA  20F4               	addwfc	prodh,w,c
 10025  0002CC  6EF7               	movwf	tblptrh,c
 10026  0002CE                     	if	0	;There are less than 3 active tblptr bytes
 10027  0002CE                     	endif
 10028  0002CE  0009               	tblrd		*+
 10029  0002D0  50F5               	movf	tablat,w,c
 10030  0002D2  0100               	movlb	0	; () banked
 10031  0002D4  5D6B               	subwf	printf@val& (0+255),w,b
 10032  0002D6  0009               	tblrd		*+
 10033  0002D8  50F5               	movf	tablat,w,c
 10034  0002DA  0100               	movlb	0	; () banked
 10035  0002DC  596C               	subwfb	(printf@val+1)& (0+255),w,b
 10036  0002DE  A0D8               	btfss	status,0,c
 10037  0002E0  D00F               	goto	l6641
 10038                           
 10039                           ; BSR set to: 0
 10040                           
 10041                           ; BSR set to: 0
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;doprnt.c: 1318: break;
 10045  0002E2  0100               	movlb	0	; () banked
 10046  0002E4  2B6D               	incf	printf@c& (0+255),f,b
 10047  0002E6  D7E5               	goto	l6625
 10048  0002E8                     l6639:
 10049                           
 10050                           ; BSR set to: 0
 10051  0002E8  0100               	movlb	0	; () banked
 10052  0002EA  516A               	movf	printf@flag& (0+255),w,b
 10053  0002EC  0BC0               	andlw	192
 10054                           
 10055                           ; Switch size 1, requested type "space"
 10056                           ; Number of cases is 3, Range of values is 0 to 192
 10057                           ; switch strategies available:
 10058                           ; Name         Instructions Cycles
 10059                           ; simple_byte           10     6 (average)
 10060                           ;	Chosen strategy is simple_byte
 10061  0002EE  0A00               	xorlw	0	; case 0
 10062  0002F0  B4D8               	btfsc	status,2,c
 10063  0002F2  D7BE               	goto	l6609
 10064  0002F4  0A80               	xorlw	128	; case 128
 10065  0002F6  B4D8               	btfsc	status,2,c
 10066  0002F8  D7D9               	goto	l6623
 10067  0002FA  0A40               	xorlw	64	; case 192
 10068  0002FC  B4D8               	btfsc	status,2,c
 10069  0002FE  D7B8               	goto	l6609
 10070  000300                     l6641:
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;doprnt.c: 1422: {
 10074                           ;doprnt.c: 1438: if(flag & 0x03)
 10075  000300  C06A  F020         	movff	printf@flag,??_printf
 10076  000304  0E03               	movlw	3
 10077  000306  1620               	andwf	??_printf,f,c
 10078  000308  B4D8               	btfsc	status,2,c
 10079  00030A  D003               	goto	l6645
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;doprnt.c: 1439: (putch('-') );
 10083  00030C  0E2D               	movlw	45
 10084  00030E  ECFF  F014         	call	_putch
 10085  000312                     l6645:
 10086                           
 10087                           ;doprnt.c: 1469: }
 10088                           ;doprnt.c: 1472: prec = c;
 10089  000312  C06D  F065         	movff	printf@c,printf@prec
 10090                           
 10091                           ;doprnt.c: 1474: while(prec--) {
 10092  000316  D05A               	goto	l6659
 10093  000318                     l6647:
 10094                           
 10095                           ;doprnt.c: 1486: case 0xC0:
 10096                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10097  000318  0100               	movlb	0	; () banked
 10098  00031A  5165               	movf	printf@prec& (0+255),w,b
 10099  00031C  0D02               	mullw	2
 10100  00031E  0E63               	movlw	low _dpowers
 10101  000320  24F3               	addwf	prodl,w,c
 10102  000322  6EF6               	movwf	tblptrl,c
 10103  000324  0E7B               	movlw	high _dpowers
 10104  000326  20F4               	addwfc	prodh,w,c
 10105  000328  6EF7               	movwf	tblptrh,c
 10106  00032A                     	if	0	;There are less than 3 active tblptr bytes
 10107  00032A                     	endif
 10108  00032A  0009               	tblrd		*+
 10109  00032C  CFF5 F016          	movff	tablat,___lwdiv@divisor
 10110  000330  000A               	tblrd		*-
 10111  000332  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
 10112  000336  C06B  F014         	movff	printf@val,___lwdiv@dividend
 10113  00033A  C06C  F015         	movff	printf@val+1,___lwdiv@dividend+1
 10114  00033E  EC51  F00F         	call	___lwdiv	;wreg free
 10115  000342  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
 10116  000346  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
 10117  00034A  0E00               	movlw	0
 10118  00034C  6E1E               	movwf	___lwmod@divisor+1,c
 10119  00034E  0E0A               	movlw	10
 10120  000350  6E1D               	movwf	___lwmod@divisor,c
 10121  000352  EC0E  F011         	call	___lwmod	;wreg free
 10122  000356  501B               	movf	?___lwmod,w,c
 10123  000358  0F30               	addlw	48
 10124  00035A  0100               	movlb	0	; () banked
 10125  00035C  6F6D               	movwf	printf@c& (0+255),b
 10126                           
 10127                           ;doprnt.c: 1491: break;
 10128  00035E  D032               	goto	l6657
 10129  000360                     l6649:
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;doprnt.c: 1499: {
 10133                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10134  000360  C06B  F014         	movff	printf@val,___lwdiv@dividend
 10135  000364  C06C  F015         	movff	printf@val+1,___lwdiv@dividend+1
 10136  000368  0100               	movlb	0	; () banked
 10137  00036A  5165               	movf	printf@prec& (0+255),w,b
 10138  00036C  0D02               	mullw	2
 10139  00036E  0E6D               	movlw	low _hexpowers
 10140  000370  24F3               	addwf	prodl,w,c
 10141  000372  6EF6               	movwf	tblptrl,c
 10142  000374  0E7B               	movlw	high _hexpowers
 10143  000376  20F4               	addwfc	prodh,w,c
 10144  000378  6EF7               	movwf	tblptrh,c
 10145  00037A                     	if	0	;There are less than 3 active tblptr bytes
 10146  00037A                     	endif
 10147  00037A  0009               	tblrd		*+
 10148  00037C  CFF5 F016          	movff	tablat,___lwdiv@divisor
 10149  000380  000A               	tblrd		*-
 10150  000382  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
 10151  000386  EC51  F00F         	call	___lwdiv	;wreg free
 10152  00038A  5014               	movf	?___lwdiv,w,c
 10153  00038C  0B0F               	andlw	15
 10154  00038E  0100               	movlb	0	; () banked
 10155  000390  6F64               	movwf	printf@idx& (0+255),b
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10159  000392  0100               	movlb	0	; () banked
 10160  000394  5164               	movf	printf@idx& (0+255),w,b
 10161  000396  0D01               	mullw	1
 10162  000398  0E12               	movlw	low STR_92
 10163  00039A  24F3               	addwf	prodl,w,c
 10164  00039C  6EF6               	movwf	tblptrl,c
 10165  00039E  0E7F               	movlw	high STR_92
 10166  0003A0  20F4               	addwfc	prodh,w,c
 10167  0003A2  6EF7               	movwf	tblptrh,c
 10168  0003A4                     	if	0	;There are less than 3 active tblptr bytes
 10169  0003A4                     	endif
 10170  0003A4  0008               	tblrd		*
 10171  0003A6  CFF5 F06D          	movff	tablat,printf@c
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;doprnt.c: 1523: }
 10175                           
 10176                           ;doprnt.c: 1508: }
 10177                           ;doprnt.c: 1510: break;
 10178  0003AA  D00C               	goto	l6657
 10179  0003AC                     l6655:
 10180  0003AC  0100               	movlb	0	; () banked
 10181  0003AE  516A               	movf	printf@flag& (0+255),w,b
 10182  0003B0  0BC0               	andlw	192
 10183                           
 10184                           ; Switch size 1, requested type "space"
 10185                           ; Number of cases is 3, Range of values is 0 to 192
 10186                           ; switch strategies available:
 10187                           ; Name         Instructions Cycles
 10188                           ; simple_byte           10     6 (average)
 10189                           ;	Chosen strategy is simple_byte
 10190  0003B2  0A00               	xorlw	0	; case 0
 10191  0003B4  B4D8               	btfsc	status,2,c
 10192  0003B6  D7B0               	goto	l6647
 10193  0003B8  0A80               	xorlw	128	; case 128
 10194  0003BA  B4D8               	btfsc	status,2,c
 10195  0003BC  D7D1               	goto	l6649
 10196  0003BE  0A40               	xorlw	64	; case 192
 10197  0003C0  B4D8               	btfsc	status,2,c
 10198  0003C2  D7AA               	goto	l6647
 10199  0003C4                     l6657:
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;doprnt.c: 1524: (putch(c) );
 10203  0003C4  0100               	movlb	0	; () banked
 10204  0003C6  516D               	movf	printf@c& (0+255),w,b
 10205  0003C8  ECFF  F014         	call	_putch
 10206  0003CC                     l6659:
 10207  0003CC  0100               	movlb	0	; () banked
 10208  0003CE  0765               	decf	printf@prec& (0+255),f,b
 10209  0003D0  0100               	movlb	0	; () banked
 10210  0003D2  2965               	incf	printf@prec& (0+255),w,b
 10211  0003D4  A4D8               	btfss	status,2,c
 10212  0003D6  D7EA               	goto	l6655
 10213  0003D8                     l6661:
 10214  0003D8  C060  FFF6         	movff	printf@f,tblptrl
 10215  0003DC  C061  FFF7         	movff	printf@f+1,tblptrh
 10216  0003E0  0100               	movlb	0	; () banked
 10217  0003E2  4B60               	infsnz	printf@f& (0+255),f,b
 10218  0003E4  2B61               	incf	(printf@f+1)& (0+255),f,b
 10219  0003E6                     	if	0	;tblptru may be non-zero
 10220  0003E6                     	endif
 10221  0003E6                     	if	0	;tblptru may be non-zero
 10222  0003E6                     	endif
 10223  0003E6  0008               	tblrd		*
 10224  0003E8  CFF5 F06D          	movff	tablat,printf@c
 10225  0003EC  0100               	movlb	0	; () banked
 10226  0003EE  516D               	movf	printf@c& (0+255),w,b
 10227  0003F0  B4D8               	btfsc	status,2,c
 10228  0003F2  0012               	return	
 10229  0003F4  D699               	goto	l6565
 10230  0003F6                     __end_of_printf:
 10231                           	opt stack 0
 10232                           tblptru	equ	0xFF8
 10233                           tblptrh	equ	0xFF7
 10234                           tblptrl	equ	0xFF6
 10235                           tablat	equ	0xFF5
 10236                           prodh	equ	0xFF4
 10237                           prodl	equ	0xFF3
 10238                           intcon	equ	0xFF2
 10239                           intcon2	equ	0xFF1
 10240                           intcon3	equ	0xFF0
 10241                           indf0	equ	0xFEF
 10242                           postinc0	equ	0xFEE
 10243                           fsr0h	equ	0xFEA
 10244                           fsr0l	equ	0xFE9
 10245                           wreg	equ	0xFE8
 10246                           postdec1	equ	0xFE5
 10247                           fsr1l	equ	0xFE1
 10248                           indf2	equ	0xFDF
 10249                           postinc2	equ	0xFDE
 10250                           postdec2	equ	0xFDD
 10251                           fsr2h	equ	0xFDA
 10252                           fsr2l	equ	0xFD9
 10253                           status	equ	0xFD8
 10254                           
 10255 ;; *************** function ___lwmod *****************
 10256 ;; Defined at:
 10257 ;;		line 8 in file "F:\Microchip\XC8\sources\common\lwmod.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;  dividend        2   26[COMRAM] unsigned int 
 10260 ;;  divisor         2   28[COMRAM] unsigned int 
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;  counter         1   30[COMRAM] unsigned char 
 10263 ;; Return value:  Size  Location     Type
 10264 ;;                  2   26[COMRAM] unsigned int 
 10265 ;; Registers used:
 10266 ;;		wreg, status,2, status,0
 10267 ;; Tracked objects:
 10268 ;;		On entry : 0/0
 10269 ;;		On exit  : 0/0
 10270 ;;		Unchanged: 0/0
 10271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10275 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10276 ;;Total ram usage:        5 bytes
 10277 ;; Hardware stack levels used:    1
 10278 ;; Hardware stack levels required when called:    4
 10279 ;; This function calls:
 10280 ;;		Nothing
 10281 ;; This function is called by:
 10282 ;;		_printf
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           	psect	text52
 10287  00221C                     __ptext52:
 10288                           	opt stack 0
 10289  00221C                     ___lwmod:
 10290                           	opt stack 23
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;incstack = 0
 10294  00221C  501D               	movf	___lwmod@divisor,w,c
 10295  00221E  101E               	iorwf	___lwmod@divisor+1,w,c
 10296  002220  B4D8               	btfsc	status,2,c
 10297  002222  D018               	goto	l2196
 10298  002224  0E01               	movlw	1
 10299  002226  6E1F               	movwf	___lwmod@counter,c
 10300  002228  D004               	goto	l6439
 10301  00222A                     l6437:
 10302  00222A  90D8               	bcf	status,0,c
 10303  00222C  361D               	rlcf	___lwmod@divisor,f,c
 10304  00222E  361E               	rlcf	___lwmod@divisor+1,f,c
 10305  002230  2A1F               	incf	___lwmod@counter,f,c
 10306  002232                     l6439:
 10307  002232  AE1E               	btfss	___lwmod@divisor+1,7,c
 10308  002234  D7FA               	goto	l6437
 10309  002236                     l6441:
 10310  002236  501D               	movf	___lwmod@divisor,w,c
 10311  002238  5C1B               	subwf	___lwmod@dividend,w,c
 10312  00223A  501E               	movf	___lwmod@divisor+1,w,c
 10313  00223C  581C               	subwfb	___lwmod@dividend+1,w,c
 10314  00223E  A0D8               	btfss	status,0,c
 10315  002240  D004               	goto	l6445
 10316  002242  501D               	movf	___lwmod@divisor,w,c
 10317  002244  5E1B               	subwf	___lwmod@dividend,f,c
 10318  002246  501E               	movf	___lwmod@divisor+1,w,c
 10319  002248  5A1C               	subwfb	___lwmod@dividend+1,f,c
 10320  00224A                     l6445:
 10321  00224A  90D8               	bcf	status,0,c
 10322  00224C  321E               	rrcf	___lwmod@divisor+1,f,c
 10323  00224E  321D               	rrcf	___lwmod@divisor,f,c
 10324  002250  2E1F               	decfsz	___lwmod@counter,f,c
 10325  002252  D7F1               	goto	l6441
 10326  002254                     l2196:
 10327  002254  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
 10328  002258  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
 10329  00225C  0012               	return		;funcret
 10330  00225E                     __end_of___lwmod:
 10331                           	opt stack 0
 10332                           tblptru	equ	0xFF8
 10333                           tblptrh	equ	0xFF7
 10334                           tblptrl	equ	0xFF6
 10335                           tablat	equ	0xFF5
 10336                           prodh	equ	0xFF4
 10337                           prodl	equ	0xFF3
 10338                           intcon	equ	0xFF2
 10339                           intcon2	equ	0xFF1
 10340                           intcon3	equ	0xFF0
 10341                           indf0	equ	0xFEF
 10342                           postinc0	equ	0xFEE
 10343                           fsr0h	equ	0xFEA
 10344                           fsr0l	equ	0xFE9
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1l	equ	0xFE1
 10348                           indf2	equ	0xFDF
 10349                           postinc2	equ	0xFDE
 10350                           postdec2	equ	0xFDD
 10351                           fsr2h	equ	0xFDA
 10352                           fsr2l	equ	0xFD9
 10353                           status	equ	0xFD8
 10354                           
 10355 ;; *************** function ___lwdiv *****************
 10356 ;; Defined at:
 10357 ;;		line 8 in file "F:\Microchip\XC8\sources\common\lwdiv.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;  dividend        2   19[COMRAM] unsigned int 
 10360 ;;  divisor         2   21[COMRAM] unsigned int 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  quotient        2   24[COMRAM] unsigned int 
 10363 ;;  counter         1   23[COMRAM] unsigned char 
 10364 ;; Return value:  Size  Location     Type
 10365 ;;                  2   19[COMRAM] unsigned int 
 10366 ;; Registers used:
 10367 ;;		wreg, status,2, status,0
 10368 ;; Tracked objects:
 10369 ;;		On entry : 0/0
 10370 ;;		On exit  : 0/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10374 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10376 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10377 ;;Total ram usage:        7 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    4
 10380 ;; This function calls:
 10381 ;;		Nothing
 10382 ;; This function is called by:
 10383 ;;		_printf
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           	psect	text53
 10388  001EA2                     __ptext53:
 10389                           	opt stack 0
 10390  001EA2                     ___lwdiv:
 10391                           	opt stack 23
 10392                           
 10393                           ;incstack = 0
 10394  001EA2  0E00               	movlw	0
 10395  001EA4  6E1A               	movwf	___lwdiv@quotient+1,c
 10396  001EA6  0E00               	movlw	0
 10397  001EA8  6E19               	movwf	___lwdiv@quotient,c
 10398  001EAA  5016               	movf	___lwdiv@divisor,w,c
 10399  001EAC  1017               	iorwf	___lwdiv@divisor+1,w,c
 10400  001EAE  B4D8               	btfsc	status,2,c
 10401  001EB0  D01C               	goto	l2186
 10402  001EB2  0E01               	movlw	1
 10403  001EB4  6E18               	movwf	___lwdiv@counter,c
 10404  001EB6  D004               	goto	l6419
 10405  001EB8                     l6417:
 10406  001EB8  90D8               	bcf	status,0,c
 10407  001EBA  3616               	rlcf	___lwdiv@divisor,f,c
 10408  001EBC  3617               	rlcf	___lwdiv@divisor+1,f,c
 10409  001EBE  2A18               	incf	___lwdiv@counter,f,c
 10410  001EC0                     l6419:
 10411  001EC0  AE17               	btfss	___lwdiv@divisor+1,7,c
 10412  001EC2  D7FA               	goto	l6417
 10413  001EC4                     l6421:
 10414  001EC4  90D8               	bcf	status,0,c
 10415  001EC6  3619               	rlcf	___lwdiv@quotient,f,c
 10416  001EC8  361A               	rlcf	___lwdiv@quotient+1,f,c
 10417  001ECA  5016               	movf	___lwdiv@divisor,w,c
 10418  001ECC  5C14               	subwf	___lwdiv@dividend,w,c
 10419  001ECE  5017               	movf	___lwdiv@divisor+1,w,c
 10420  001ED0  5815               	subwfb	___lwdiv@dividend+1,w,c
 10421  001ED2  A0D8               	btfss	status,0,c
 10422  001ED4  D005               	goto	l6429
 10423  001ED6  5016               	movf	___lwdiv@divisor,w,c
 10424  001ED8  5E14               	subwf	___lwdiv@dividend,f,c
 10425  001EDA  5017               	movf	___lwdiv@divisor+1,w,c
 10426  001EDC  5A15               	subwfb	___lwdiv@dividend+1,f,c
 10427  001EDE  8019               	bsf	___lwdiv@quotient,0,c
 10428  001EE0                     l6429:
 10429  001EE0  90D8               	bcf	status,0,c
 10430  001EE2  3217               	rrcf	___lwdiv@divisor+1,f,c
 10431  001EE4  3216               	rrcf	___lwdiv@divisor,f,c
 10432  001EE6  2E18               	decfsz	___lwdiv@counter,f,c
 10433  001EE8  D7ED               	goto	l6421
 10434  001EEA                     l2186:
 10435  001EEA  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
 10436  001EEE  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10437  001EF2  0012               	return		;funcret
 10438  001EF4                     __end_of___lwdiv:
 10439                           	opt stack 0
 10440                           tblptru	equ	0xFF8
 10441                           tblptrh	equ	0xFF7
 10442                           tblptrl	equ	0xFF6
 10443                           tablat	equ	0xFF5
 10444                           prodh	equ	0xFF4
 10445                           prodl	equ	0xFF3
 10446                           intcon	equ	0xFF2
 10447                           intcon2	equ	0xFF1
 10448                           intcon3	equ	0xFF0
 10449                           indf0	equ	0xFEF
 10450                           postinc0	equ	0xFEE
 10451                           fsr0h	equ	0xFEA
 10452                           fsr0l	equ	0xFE9
 10453                           wreg	equ	0xFE8
 10454                           postdec1	equ	0xFE5
 10455                           fsr1l	equ	0xFE1
 10456                           indf2	equ	0xFDF
 10457                           postinc2	equ	0xFDE
 10458                           postdec2	equ	0xFDD
 10459                           fsr2h	equ	0xFDA
 10460                           fsr2l	equ	0xFD9
 10461                           status	equ	0xFD8
 10462                           
 10463 ;; *************** function _Read_Commands *****************
 10464 ;; Defined at:
 10465 ;;		line 438 in file "Debug.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;  cmds            2   31[COMRAM] PTR unsigned char [16]
 10468 ;;		 -> commands(128), 
 10469 ;; Auto vars:     Size  Location     Type
 10470 ;;  str           128    0[BANK2 ] unsigned char [128]
 10471 ;;  delim           4  128[BANK2 ] unsigned char [4]
 10472 ;;  token           2  133[BANK2 ] PTR unsigned char 
 10473 ;;		 -> Read_Commands@str(128), LED_Control@command_input(16), NULL(0), 
 10474 ;;  i               1  136[BANK2 ] unsigned char 
 10475 ;;  counter         1  135[BANK2 ] unsigned char 
 10476 ;;  flush           1  132[BANK2 ] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  1    wreg      unsigned char 
 10479 ;; Registers used:
 10480 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10487 ;;      Locals:         0       0       0     137       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10488 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10489 ;;      Totals:         2       5       0     137       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10490 ;;Total ram usage:      144 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    7
 10493 ;; This function calls:
 10494 ;;		_EUSART1_Read
 10495 ;;		_getch
 10496 ;;		_strcpy
 10497 ;;		_strtok
 10498 ;; This function is called by:
 10499 ;;		_TAS2521_Communication
 10500 ;;		_MAX17048_Communication
 10501 ;;		_ADC_Debug
 10502 ;;		_Battery_Display
 10503 ;;		_Screen_Brightness_Debug
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text54
 10508  00116A                     __ptext54:
 10509                           	opt stack 0
 10510  00116A                     _Read_Commands:
 10511                           	opt stack 20
 10512                           
 10513                           ;Debug.c: 440: char str[128];
 10514                           ;Debug.c: 441: char delim[] = " ,-";
 10515                           
 10516                           ;incstack = 0
 10517  00116A  C1D1  F280         	movff	Read_Commands@F18504,Read_Commands@delim
 10518  00116E  C1D2  F281         	movff	Read_Commands@F18504+1,Read_Commands@delim+1
 10519  001172  C1D3  F282         	movff	Read_Commands@F18504+2,Read_Commands@delim+2
 10520  001176  C1D4  F283         	movff	Read_Commands@F18504+3,Read_Commands@delim+3
 10521                           
 10522                           ;Debug.c: 442: char* token;
 10523                           ;Debug.c: 443: char i = 0;
 10524  00117A  0E00               	movlw	0
 10525  00117C  0102               	movlb	2	; () banked
 10526  00117E  6F88               	movwf	Read_Commands@i& (0+255),b
 10527                           
 10528                           ;Debug.c: 444: unsigned char counter = 0;
 10529  001180  0E00               	movlw	0
 10530  001182  0102               	movlb	2	; () banked
 10531  001184  6F87               	movwf	Read_Commands@counter& (0+255),b
 10532                           
 10533                           ;Debug.c: 445: char flush = 0;
 10534  001186  0E00               	movlw	0
 10535  001188  0102               	movlb	2	; () banked
 10536  00118A  6F84               	movwf	Read_Commands@flush& (0+255),b
 10537                           
 10538                           ;Debug.c: 447: while(str[i-1] != '\n' && str[i-1] != '\r')
 10539  00118C  D011               	goto	l6683
 10540  00118E                     l6679:
 10541                           
 10542                           ;Debug.c: 448: {
 10543                           ;Debug.c: 449: str[i] = getch();
 10544  00118E  ECCA  F014         	call	_getch	;wreg free
 10545  001192  0100               	movlb	0	; () banked
 10546  001194  6F64               	movwf	??_Read_Commands& (0+255),b
 10547  001196  0102               	movlb	2	; () banked
 10548  001198  5188               	movf	Read_Commands@i& (0+255),w,b
 10549  00119A  0D01               	mullw	1
 10550  00119C  0E00               	movlw	low Read_Commands@str
 10551  00119E  24F3               	addwf	prodl,w,c
 10552  0011A0  6ED9               	movwf	fsr2l,c
 10553  0011A2  0E02               	movlw	high Read_Commands@str
 10554  0011A4  20F4               	addwfc	prodh,w,c
 10555  0011A6  6EDA               	movwf	fsr2h,c
 10556  0011A8  C064  FFDF         	movff	??_Read_Commands,indf2
 10557                           
 10558                           ; BSR set to: 2
 10559                           ;Debug.c: 450: i++;
 10560  0011AC  0102               	movlb	2	; () banked
 10561  0011AE  2B88               	incf	Read_Commands@i& (0+255),f,b
 10562  0011B0                     l6683:
 10563                           
 10564                           ; BSR set to: 2
 10565  0011B0  0EFF               	movlw	255
 10566  0011B2  0100               	movlb	0	; () banked
 10567  0011B4  6F64               	movwf	??_Read_Commands& (0+255),b
 10568  0011B6  0EFF               	movlw	255
 10569  0011B8  0100               	movlb	0	; () banked
 10570  0011BA  6F65               	movwf	(??_Read_Commands+1)& (0+255),b
 10571  0011BC  0102               	movlb	2	; () banked
 10572  0011BE  5188               	movf	Read_Commands@i& (0+255),w,b
 10573  0011C0  0100               	movlb	0	; () banked
 10574  0011C2  6F66               	movwf	(??_Read_Commands+2)& (0+255),b
 10575  0011C4  6B67               	clrf	(??_Read_Commands+3)& (0+255),b
 10576  0011C6  0100               	movlb	0	; () banked
 10577  0011C8  5164               	movf	??_Read_Commands& (0+255),w,b
 10578  0011CA  0100               	movlb	0	; () banked
 10579  0011CC  2766               	addwf	(??_Read_Commands+2)& (0+255),f,b
 10580  0011CE  0100               	movlb	0	; () banked
 10581  0011D0  5165               	movf	(??_Read_Commands+1)& (0+255),w,b
 10582  0011D2  0100               	movlb	0	; () banked
 10583  0011D4  2367               	addwfc	(??_Read_Commands+3)& (0+255),f,b
 10584  0011D6  0E00               	movlw	low Read_Commands@str
 10585  0011D8  0100               	movlb	0	; () banked
 10586  0011DA  2566               	addwf	(??_Read_Commands+2)& (0+255),w,b
 10587  0011DC  6ED9               	movwf	fsr2l,c
 10588  0011DE  0E02               	movlw	high Read_Commands@str
 10589  0011E0  0100               	movlb	0	; () banked
 10590  0011E2  2167               	addwfc	(??_Read_Commands+3)& (0+255),w,b
 10591  0011E4  6EDA               	movwf	fsr2h,c
 10592  0011E6  0E0A               	movlw	10
 10593  0011E8  18DE               	xorwf	postinc2,w,c
 10594  0011EA  B4D8               	btfsc	status,2,c
 10595  0011EC  D01F               	goto	l6687
 10596                           
 10597                           ; BSR set to: 0
 10598  0011EE  0EFF               	movlw	255
 10599  0011F0  0100               	movlb	0	; () banked
 10600  0011F2  6F64               	movwf	??_Read_Commands& (0+255),b
 10601  0011F4  0EFF               	movlw	255
 10602  0011F6  0100               	movlb	0	; () banked
 10603  0011F8  6F65               	movwf	(??_Read_Commands+1)& (0+255),b
 10604  0011FA  0102               	movlb	2	; () banked
 10605  0011FC  5188               	movf	Read_Commands@i& (0+255),w,b
 10606  0011FE  0100               	movlb	0	; () banked
 10607  001200  6F66               	movwf	(??_Read_Commands+2)& (0+255),b
 10608  001202  6B67               	clrf	(??_Read_Commands+3)& (0+255),b
 10609  001204  0100               	movlb	0	; () banked
 10610  001206  5164               	movf	??_Read_Commands& (0+255),w,b
 10611  001208  0100               	movlb	0	; () banked
 10612  00120A  2766               	addwf	(??_Read_Commands+2)& (0+255),f,b
 10613  00120C  0100               	movlb	0	; () banked
 10614  00120E  5165               	movf	(??_Read_Commands+1)& (0+255),w,b
 10615  001210  0100               	movlb	0	; () banked
 10616  001212  2367               	addwfc	(??_Read_Commands+3)& (0+255),f,b
 10617  001214  0E00               	movlw	low Read_Commands@str
 10618  001216  0100               	movlb	0	; () banked
 10619  001218  2566               	addwf	(??_Read_Commands+2)& (0+255),w,b
 10620  00121A  6ED9               	movwf	fsr2l,c
 10621  00121C  0E02               	movlw	high Read_Commands@str
 10622  00121E  0100               	movlb	0	; () banked
 10623  001220  2167               	addwfc	(??_Read_Commands+3)& (0+255),w,b
 10624  001222  6EDA               	movwf	fsr2h,c
 10625  001224  0E0D               	movlw	13
 10626  001226  18DE               	xorwf	postinc2,w,c
 10627  001228  A4D8               	btfss	status,2,c
 10628  00122A  D7B1               	goto	l6679
 10629  00122C                     l6687:
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;Debug.c: 451: }
 10633                           ;Debug.c: 453: str[i-1] = '\0';
 10634  00122C  0EFF               	movlw	255
 10635  00122E  0100               	movlb	0	; () banked
 10636  001230  6F64               	movwf	??_Read_Commands& (0+255),b
 10637  001232  0EFF               	movlw	255
 10638  001234  0100               	movlb	0	; () banked
 10639  001236  6F65               	movwf	(??_Read_Commands+1)& (0+255),b
 10640  001238  0102               	movlb	2	; () banked
 10641  00123A  5188               	movf	Read_Commands@i& (0+255),w,b
 10642  00123C  0100               	movlb	0	; () banked
 10643  00123E  6F66               	movwf	(??_Read_Commands+2)& (0+255),b
 10644  001240  6B67               	clrf	(??_Read_Commands+3)& (0+255),b
 10645  001242  0100               	movlb	0	; () banked
 10646  001244  5164               	movf	??_Read_Commands& (0+255),w,b
 10647  001246  0100               	movlb	0	; () banked
 10648  001248  2766               	addwf	(??_Read_Commands+2)& (0+255),f,b
 10649  00124A  0100               	movlb	0	; () banked
 10650  00124C  5165               	movf	(??_Read_Commands+1)& (0+255),w,b
 10651  00124E  0100               	movlb	0	; () banked
 10652  001250  2367               	addwfc	(??_Read_Commands+3)& (0+255),f,b
 10653  001252  0E00               	movlw	low Read_Commands@str
 10654  001254  0100               	movlb	0	; () banked
 10655  001256  2566               	addwf	(??_Read_Commands+2)& (0+255),w,b
 10656  001258  6ED9               	movwf	fsr2l,c
 10657  00125A  0E02               	movlw	high Read_Commands@str
 10658  00125C  0100               	movlb	0	; () banked
 10659  00125E  2167               	addwfc	(??_Read_Commands+3)& (0+255),w,b
 10660  001260  6EDA               	movwf	fsr2h,c
 10661  001262  0E00               	movlw	0
 10662  001264  6EDF               	movwf	indf2,c
 10663                           
 10664                           ;Debug.c: 456: while((eusart1RxCount))
 10665  001266  D004               	goto	l6691
 10666  001268                     l6689:
 10667                           
 10668                           ;Debug.c: 457: {
 10669                           ;Debug.c: 458: flush = EUSART1_Read();
 10670  001268  ECA9  F012         	call	_EUSART1_Read	;wreg free
 10671  00126C  0102               	movlb	2	; () banked
 10672  00126E  6F84               	movwf	Read_Commands@flush& (0+255),b
 10673  001270                     l6691:
 10674  001270  5035               	movf	_eusart1RxCount,w,c	;volatile
 10675  001272  A4D8               	btfss	status,2,c
 10676  001274  D7F9               	goto	l6689
 10677                           
 10678                           ;Debug.c: 459: }
 10679                           ;Debug.c: 465: for (token = strtok(str, delim); token; token = strtok((0), delim))
 10680  001276  0E00               	movlw	low Read_Commands@str
 10681  001278  0100               	movlb	0	; () banked
 10682  00127A  6F60               	movwf	strtok@s1& (0+255),b
 10683  00127C  0E02               	movlw	high Read_Commands@str
 10684  00127E  0100               	movlb	0	; () banked
 10685  001280  6F61               	movwf	(strtok@s1+1)& (0+255),b
 10686  001282  0E80               	movlw	low Read_Commands@delim
 10687  001284  0100               	movlb	0	; () banked
 10688  001286  6F62               	movwf	strtok@s2& (0+255),b
 10689  001288  0E02               	movlw	high Read_Commands@delim
 10690  00128A  0100               	movlb	0	; () banked
 10691  00128C  6F63               	movwf	(strtok@s2+1)& (0+255),b
 10692  00128E  EC9F  F00A         	call	_strtok	;wreg free
 10693  001292  D01F               	goto	L2
 10694  001294                     l6695:
 10695                           
 10696                           ;Debug.c: 466: {
 10697                           ;Debug.c: 467: strcpy(&(cmds)[counter], token);
 10698  001294  0102               	movlb	2	; () banked
 10699  001296  5187               	movf	Read_Commands@counter& (0+255),w,b
 10700  001298  0D10               	mullw	16
 10701  00129A  50F3               	movf	prodl,w,c
 10702  00129C  2420               	addwf	Read_Commands@cmds,w,c
 10703  00129E  6E14               	movwf	strcpy@to,c
 10704  0012A0  50F4               	movf	prodh,w,c
 10705  0012A2  2021               	addwfc	Read_Commands@cmds+1,w,c
 10706  0012A4  6E15               	movwf	strcpy@to+1,c
 10707  0012A6  C285  F016         	movff	Read_Commands@token,strcpy@from
 10708  0012AA  C286  F017         	movff	Read_Commands@token+1,strcpy@from+1
 10709  0012AE  ECA9  F010         	call	_strcpy	;wreg free
 10710                           
 10711                           ;Debug.c: 469: counter++;
 10712  0012B2  0102               	movlb	2	; () banked
 10713  0012B4  2B87               	incf	Read_Commands@counter& (0+255),f,b
 10714                           
 10715                           ; BSR set to: 2
 10716  0012B6  0E00               	movlw	0
 10717  0012B8  0100               	movlb	0	; () banked
 10718  0012BA  6F60               	movwf	strtok@s1& (0+255),b
 10719  0012BC  0E00               	movlw	0
 10720  0012BE  0100               	movlb	0	; () banked
 10721  0012C0  6F61               	movwf	(strtok@s1+1)& (0+255),b
 10722  0012C2  0E80               	movlw	low Read_Commands@delim
 10723  0012C4  0100               	movlb	0	; () banked
 10724  0012C6  6F62               	movwf	strtok@s2& (0+255),b
 10725  0012C8  0E02               	movlw	high Read_Commands@delim
 10726  0012CA  0100               	movlb	0	; () banked
 10727  0012CC  6F63               	movwf	(strtok@s2+1)& (0+255),b
 10728  0012CE  EC9F  F00A         	call	_strtok	;wreg free
 10729  0012D2                     L2:
 10730  0012D2  C060  F285         	movff	?_strtok,Read_Commands@token
 10731  0012D6  C061  F286         	movff	?_strtok+1,Read_Commands@token+1
 10732  0012DA  0102               	movlb	2	; () banked
 10733  0012DC  5185               	movf	Read_Commands@token& (0+255),w,b
 10734  0012DE  0102               	movlb	2	; () banked
 10735  0012E0  1186               	iorwf	(Read_Commands@token+1)& (0+255),w,b
 10736  0012E2  A4D8               	btfss	status,2,c
 10737  0012E4  D7D7               	goto	l6695
 10738                           
 10739                           ; BSR set to: 2
 10740                           ;Debug.c: 470: }
 10741                           ;Debug.c: 473: return counter;
 10742                           
 10743                           ; BSR set to: 2
 10744  0012E6  0102               	movlb	2	; () banked
 10745  0012E8  5187               	movf	Read_Commands@counter& (0+255),w,b
 10746  0012EA  0012               	return	
 10747  0012EC                     __end_of_Read_Commands:
 10748                           	opt stack 0
 10749                           tblptru	equ	0xFF8
 10750                           tblptrh	equ	0xFF7
 10751                           tblptrl	equ	0xFF6
 10752                           tablat	equ	0xFF5
 10753                           prodh	equ	0xFF4
 10754                           prodl	equ	0xFF3
 10755                           intcon	equ	0xFF2
 10756                           intcon2	equ	0xFF1
 10757                           intcon3	equ	0xFF0
 10758                           indf0	equ	0xFEF
 10759                           postinc0	equ	0xFEE
 10760                           fsr0h	equ	0xFEA
 10761                           fsr0l	equ	0xFE9
 10762                           wreg	equ	0xFE8
 10763                           postdec1	equ	0xFE5
 10764                           fsr1l	equ	0xFE1
 10765                           indf2	equ	0xFDF
 10766                           postinc2	equ	0xFDE
 10767                           postdec2	equ	0xFDD
 10768                           fsr2h	equ	0xFDA
 10769                           fsr2l	equ	0xFD9
 10770                           status	equ	0xFD8
 10771                           
 10772 ;; *************** function _strtok *****************
 10773 ;; Defined at:
 10774 ;;		line 8 in file "F:\Microchip\XC8\sources\common\strtok.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  s1              2    0[BANK0 ] PTR unsigned char 
 10777 ;;		 -> Read_Commands@str(128), LED_Control@command_input(16), NULL(0), 
 10778 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 10779 ;;		 -> Read_Commands@delim(4), LED_Control@delim(2), 
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;		None
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  2    0[BANK0 ] PTR unsigned char 
 10784 ;; Registers used:
 10785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10791 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10794 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10795 ;;Total ram usage:        4 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    6
 10798 ;; This function calls:
 10799 ;;		_strcspn
 10800 ;;		_strspn
 10801 ;; This function is called by:
 10802 ;;		_LED_Control
 10803 ;;		_Read_Commands
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           	psect	text55
 10808  00153E                     __ptext55:
 10809                           	opt stack 0
 10810  00153E                     _strtok:
 10811                           	opt stack 20
 10812                           
 10813                           ; BSR set to: 2
 10814                           ;incstack = 0
 10815  00153E  0100               	movlb	0	; () banked
 10816  001540  5160               	movf	strtok@s1& (0+255),w,b
 10817  001542  0100               	movlb	0	; () banked
 10818  001544  1161               	iorwf	(strtok@s1+1)& (0+255),w,b
 10819  001546  A4D8               	btfss	status,2,c
 10820  001548  D004               	goto	l2351
 10821                           
 10822                           ; BSR set to: 0
 10823  00154A  C0B6  F060         	movff	strtok@sp,strtok@s1
 10824  00154E  C0B7  F061         	movff	strtok@sp+1,strtok@s1+1
 10825  001552                     l2351:
 10826                           
 10827                           ; BSR set to: 0
 10828  001552  0100               	movlb	0	; () banked
 10829  001554  5160               	movf	strtok@s1& (0+255),w,b
 10830  001556  0100               	movlb	0	; () banked
 10831  001558  1161               	iorwf	(strtok@s1+1)& (0+255),w,b
 10832  00155A  A4D8               	btfss	status,2,c
 10833  00155C  D007               	goto	l6367
 10834                           
 10835                           ; BSR set to: 0
 10836  00155E  0E00               	movlw	0
 10837  001560  0100               	movlb	0	; () banked
 10838  001562  6F60               	movwf	?_strtok& (0+255),b
 10839  001564  0E00               	movlw	0
 10840  001566  0100               	movlb	0	; () banked
 10841  001568  6F61               	movwf	(?_strtok+1)& (0+255),b
 10842                           
 10843                           ; BSR set to: 0
 10844  00156A  0012               	return	
 10845  00156C                     l6367:
 10846                           
 10847                           ; BSR set to: 0
 10848  00156C  C060  F019         	movff	strtok@s1,strspn@s1
 10849  001570  C061  F01A         	movff	strtok@s1+1,strspn@s1+1
 10850  001574  C062  F01B         	movff	strtok@s2,strspn@s2
 10851  001578  C063  F01C         	movff	strtok@s2+1,strspn@s2+1
 10852  00157C  EC7A  F00F         	call	_strspn	;wreg free
 10853  001580  5019               	movf	?_strspn,w,c
 10854  001582  0100               	movlb	0	; () banked
 10855  001584  2760               	addwf	strtok@s1& (0+255),f,b
 10856  001586  501A               	movf	?_strspn+1,w,c
 10857  001588  0100               	movlb	0	; () banked
 10858  00158A  2361               	addwfc	(strtok@s1+1)& (0+255),f,b
 10859                           
 10860                           ; BSR set to: 0
 10861  00158C  C060  FFD9         	movff	strtok@s1,fsr2l
 10862  001590  C061  FFDA         	movff	strtok@s1+1,fsr2h
 10863  001594  50DF               	movf	indf2,w,c
 10864  001596  A4D8               	btfss	status,2,c
 10865  001598  D00B               	goto	l6375
 10866                           
 10867                           ; BSR set to: 0
 10868  00159A  0E00               	movlw	0
 10869  00159C  0100               	movlb	0	; () banked
 10870  00159E  6FB6               	movwf	strtok@sp& (0+255),b
 10871  0015A0  0E00               	movlw	0
 10872  0015A2  0100               	movlb	0	; () banked
 10873  0015A4  6FB7               	movwf	(strtok@sp+1)& (0+255),b
 10874  0015A6  C0B6  F060         	movff	strtok@sp,?_strtok
 10875  0015AA  C0B7  F061         	movff	strtok@sp+1,?_strtok+1
 10876                           
 10877                           ; BSR set to: 0
 10878  0015AE  0012               	return	
 10879  0015B0                     l6375:
 10880                           
 10881                           ; BSR set to: 0
 10882  0015B0  C060  F019         	movff	strtok@s1,strcspn@s1
 10883  0015B4  C061  F01A         	movff	strtok@s1+1,strcspn@s1+1
 10884  0015B8  C062  F01B         	movff	strtok@s2,strcspn@s2
 10885  0015BC  C063  F01C         	movff	strtok@s2+1,strcspn@s2+1
 10886  0015C0  ECA2  F00F         	call	_strcspn	;wreg free
 10887  0015C4  5019               	movf	?_strcspn,w,c
 10888  0015C6  0100               	movlb	0	; () banked
 10889  0015C8  2560               	addwf	strtok@s1& (0+255),w,b
 10890  0015CA  0100               	movlb	0	; () banked
 10891  0015CC  6FB6               	movwf	strtok@sp& (0+255),b
 10892  0015CE  501A               	movf	?_strcspn+1,w,c
 10893  0015D0  0100               	movlb	0	; () banked
 10894  0015D2  2161               	addwfc	(strtok@s1+1)& (0+255),w,b
 10895  0015D4  0100               	movlb	0	; () banked
 10896  0015D6  6FB7               	movwf	(strtok@sp+1)& (0+255),b
 10897                           
 10898                           ; BSR set to: 0
 10899  0015D8  C0B6  FFD9         	movff	strtok@sp,fsr2l
 10900  0015DC  C0B7  FFDA         	movff	strtok@sp+1,fsr2h
 10901  0015E0  50DF               	movf	indf2,w,c
 10902  0015E2  B4D8               	btfsc	status,2,c
 10903  0015E4  D00A               	goto	l6383
 10904                           
 10905                           ; BSR set to: 0
 10906  0015E6  C0B6  FFD9         	movff	strtok@sp,fsr2l
 10907  0015EA  C0B7  FFDA         	movff	strtok@sp+1,fsr2h
 10908  0015EE  0E00               	movlw	0
 10909  0015F0  6EDF               	movwf	indf2,c
 10910                           
 10911                           ; BSR set to: 0
 10912  0015F2  0100               	movlb	0	; () banked
 10913  0015F4  4BB6               	infsnz	strtok@sp& (0+255),f,b
 10914  0015F6  2BB7               	incf	(strtok@sp+1)& (0+255),f,b
 10915  0015F8  D006               	goto	l2356
 10916  0015FA                     l6383:
 10917                           
 10918                           ; BSR set to: 0
 10919  0015FA  0E00               	movlw	0
 10920  0015FC  0100               	movlb	0	; () banked
 10921  0015FE  6FB6               	movwf	strtok@sp& (0+255),b
 10922  001600  0E00               	movlw	0
 10923  001602  0100               	movlb	0	; () banked
 10924  001604  6FB7               	movwf	(strtok@sp+1)& (0+255),b
 10925  001606                     l2356:
 10926                           
 10927                           ; BSR set to: 0
 10928  001606  C060  F060         	movff	strtok@s1,?_strtok
 10929  00160A  C061  F061         	movff	strtok@s1+1,?_strtok+1
 10930  00160E  0012               	return	
 10931  001610                     __end_of_strtok:
 10932                           	opt stack 0
 10933                           tblptru	equ	0xFF8
 10934                           tblptrh	equ	0xFF7
 10935                           tblptrl	equ	0xFF6
 10936                           tablat	equ	0xFF5
 10937                           prodh	equ	0xFF4
 10938                           prodl	equ	0xFF3
 10939                           intcon	equ	0xFF2
 10940                           intcon2	equ	0xFF1
 10941                           intcon3	equ	0xFF0
 10942                           indf0	equ	0xFEF
 10943                           postinc0	equ	0xFEE
 10944                           fsr0h	equ	0xFEA
 10945                           fsr0l	equ	0xFE9
 10946                           wreg	equ	0xFE8
 10947                           postdec1	equ	0xFE5
 10948                           fsr1l	equ	0xFE1
 10949                           indf2	equ	0xFDF
 10950                           postinc2	equ	0xFDE
 10951                           postdec2	equ	0xFDD
 10952                           fsr2h	equ	0xFDA
 10953                           fsr2l	equ	0xFD9
 10954                           status	equ	0xFD8
 10955                           
 10956 ;; *************** function _strspn *****************
 10957 ;; Defined at:
 10958 ;;		line 4 in file "F:\Microchip\XC8\sources\common\strspn.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;  s1              2   24[COMRAM] PTR const unsigned char 
 10961 ;;		 -> Read_Commands@str(128), LED_Control@command_input(16), NULL(0), 
 10962 ;;  s2              2   26[COMRAM] PTR const unsigned char 
 10963 ;;		 -> Read_Commands@delim(4), LED_Control@delim(2), 
 10964 ;; Auto vars:     Size  Location     Type
 10965 ;;  i               2   29[COMRAM] unsigned int 
 10966 ;; Return value:  Size  Location     Type
 10967 ;;                  2   24[COMRAM] unsigned int 
 10968 ;; Registers used:
 10969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10970 ;; Tracked objects:
 10971 ;;		On entry : 0/0
 10972 ;;		On exit  : 0/0
 10973 ;;		Unchanged: 0/0
 10974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10975 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10978 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10979 ;;Total ram usage:        7 bytes
 10980 ;; Hardware stack levels used:    1
 10981 ;; Hardware stack levels required when called:    5
 10982 ;; This function calls:
 10983 ;;		_strchr
 10984 ;; This function is called by:
 10985 ;;		_strtok
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text56
 10990  001EF4                     __ptext56:
 10991                           	opt stack 0
 10992  001EF4                     _strspn:
 10993                           	opt stack 20
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;incstack = 0
 10997  001EF4  0E00               	movlw	0
 10998  001EF6  6E1F               	movwf	strspn@i+1,c
 10999  001EF8  0E00               	movlw	0
 11000  001EFA  6E1E               	movwf	strspn@i,c
 11001  001EFC  D004               	goto	l6259
 11002  001EFE                     l6257:
 11003  001EFE  4A19               	infsnz	strspn@s1,f,c
 11004  001F00  2A1A               	incf	strspn@s1+1,f,c
 11005  001F02  4A1E               	infsnz	strspn@i,f,c
 11006  001F04  2A1F               	incf	strspn@i+1,f,c
 11007  001F06                     l6259:
 11008  001F06  C019  FFD9         	movff	strspn@s1,fsr2l
 11009  001F0A  C01A  FFDA         	movff	strspn@s1+1,fsr2h
 11010  001F0E  50DF               	movf	indf2,w,c
 11011  001F10  B4D8               	btfsc	status,2,c
 11012  001F12  D013               	goto	l2394
 11013  001F14  C01B  F014         	movff	strspn@s2,strchr@ptr
 11014  001F18  C01C  F015         	movff	strspn@s2+1,strchr@ptr+1
 11015  001F1C  C019  FFD9         	movff	strspn@s1,fsr2l
 11016  001F20  C01A  FFDA         	movff	strspn@s1+1,fsr2h
 11017  001F24  50DF               	movf	indf2,w,c
 11018  001F26  6E1D               	movwf	??_strspn& (0+255),c
 11019  001F28  501D               	movf	??_strspn,w,c
 11020  001F2A  6E16               	movwf	strchr@chr,c
 11021  001F2C  6A17               	clrf	strchr@chr+1,c
 11022  001F2E  EC74  F012         	call	_strchr	;wreg free
 11023  001F32  5014               	movf	?_strchr,w,c
 11024  001F34  1015               	iorwf	?_strchr+1,w,c
 11025  001F36  A4D8               	btfss	status,2,c
 11026  001F38  D7E2               	goto	l6257
 11027  001F3A                     l2394:
 11028  001F3A  C01E  F019         	movff	strspn@i,?_strspn
 11029  001F3E  C01F  F01A         	movff	strspn@i+1,?_strspn+1
 11030  001F42  0012               	return		;funcret
 11031  001F44                     __end_of_strspn:
 11032                           	opt stack 0
 11033                           tblptru	equ	0xFF8
 11034                           tblptrh	equ	0xFF7
 11035                           tblptrl	equ	0xFF6
 11036                           tablat	equ	0xFF5
 11037                           prodh	equ	0xFF4
 11038                           prodl	equ	0xFF3
 11039                           intcon	equ	0xFF2
 11040                           intcon2	equ	0xFF1
 11041                           intcon3	equ	0xFF0
 11042                           indf0	equ	0xFEF
 11043                           postinc0	equ	0xFEE
 11044                           fsr0h	equ	0xFEA
 11045                           fsr0l	equ	0xFE9
 11046                           wreg	equ	0xFE8
 11047                           postdec1	equ	0xFE5
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function _strcspn *****************
 11057 ;; Defined at:
 11058 ;;		line 4 in file "F:\Microchip\XC8\sources\common\strcspn.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;  s1              2   24[COMRAM] PTR const unsigned char 
 11061 ;;		 -> Read_Commands@str(128), LED_Control@command_input(16), NULL(0), 
 11062 ;;  s2              2   26[COMRAM] PTR const unsigned char 
 11063 ;;		 -> Read_Commands@delim(4), LED_Control@delim(2), 
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  i               2   29[COMRAM] unsigned int 
 11066 ;; Return value:  Size  Location     Type
 11067 ;;                  2   24[COMRAM] unsigned int 
 11068 ;; Registers used:
 11069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11075 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11078 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11079 ;;Total ram usage:        7 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    5
 11082 ;; This function calls:
 11083 ;;		_strchr
 11084 ;; This function is called by:
 11085 ;;		_strtok
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text57
 11090  001F44                     __ptext57:
 11091                           	opt stack 0
 11092  001F44                     _strcspn:
 11093                           	opt stack 20
 11094                           
 11095                           ;incstack = 0
 11096  001F44  0E00               	movlw	0
 11097  001F46  6E1F               	movwf	strcspn@i+1,c
 11098  001F48  0E00               	movlw	0
 11099  001F4A  6E1E               	movwf	strcspn@i,c
 11100  001F4C  D004               	goto	l6267
 11101  001F4E                     l6265:
 11102  001F4E  4A19               	infsnz	strcspn@s1,f,c
 11103  001F50  2A1A               	incf	strcspn@s1+1,f,c
 11104  001F52  4A1E               	infsnz	strcspn@i,f,c
 11105  001F54  2A1F               	incf	strcspn@i+1,f,c
 11106  001F56                     l6267:
 11107  001F56  C019  FFD9         	movff	strcspn@s1,fsr2l
 11108  001F5A  C01A  FFDA         	movff	strcspn@s1+1,fsr2h
 11109  001F5E  50DF               	movf	indf2,w,c
 11110  001F60  B4D8               	btfsc	status,2,c
 11111  001F62  D013               	goto	l2384
 11112  001F64  C01B  F014         	movff	strcspn@s2,strchr@ptr
 11113  001F68  C01C  F015         	movff	strcspn@s2+1,strchr@ptr+1
 11114  001F6C  C019  FFD9         	movff	strcspn@s1,fsr2l
 11115  001F70  C01A  FFDA         	movff	strcspn@s1+1,fsr2h
 11116  001F74  50DF               	movf	indf2,w,c
 11117  001F76  6E1D               	movwf	??_strcspn& (0+255),c
 11118  001F78  501D               	movf	??_strcspn,w,c
 11119  001F7A  6E16               	movwf	strchr@chr,c
 11120  001F7C  6A17               	clrf	strchr@chr+1,c
 11121  001F7E  EC74  F012         	call	_strchr	;wreg free
 11122  001F82  5014               	movf	?_strchr,w,c
 11123  001F84  1015               	iorwf	?_strchr+1,w,c
 11124  001F86  B4D8               	btfsc	status,2,c
 11125  001F88  D7E2               	goto	l6265
 11126  001F8A                     l2384:
 11127  001F8A  C01E  F019         	movff	strcspn@i,?_strcspn
 11128  001F8E  C01F  F01A         	movff	strcspn@i+1,?_strcspn+1
 11129  001F92  0012               	return		;funcret
 11130  001F94                     __end_of_strcspn:
 11131                           	opt stack 0
 11132                           tblptru	equ	0xFF8
 11133                           tblptrh	equ	0xFF7
 11134                           tblptrl	equ	0xFF6
 11135                           tablat	equ	0xFF5
 11136                           prodh	equ	0xFF4
 11137                           prodl	equ	0xFF3
 11138                           intcon	equ	0xFF2
 11139                           intcon2	equ	0xFF1
 11140                           intcon3	equ	0xFF0
 11141                           indf0	equ	0xFEF
 11142                           postinc0	equ	0xFEE
 11143                           fsr0h	equ	0xFEA
 11144                           fsr0l	equ	0xFE9
 11145                           wreg	equ	0xFE8
 11146                           postdec1	equ	0xFE5
 11147                           fsr1l	equ	0xFE1
 11148                           indf2	equ	0xFDF
 11149                           postinc2	equ	0xFDE
 11150                           postdec2	equ	0xFDD
 11151                           fsr2h	equ	0xFDA
 11152                           fsr2l	equ	0xFD9
 11153                           status	equ	0xFD8
 11154                           
 11155 ;; *************** function _strchr *****************
 11156 ;; Defined at:
 11157 ;;		line 4 in file "F:\Microchip\XC8\sources\common\strchr.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;  ptr             2   19[COMRAM] PTR const unsigned char 
 11160 ;;		 -> Read_Commands@delim(4), LED_Control@delim(2), 
 11161 ;;  chr             2   21[COMRAM] int 
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  2   19[COMRAM] PTR unsigned char 
 11166 ;; Registers used:
 11167 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11176 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11177 ;;Total ram usage:        5 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:    4
 11180 ;; This function calls:
 11181 ;;		Nothing
 11182 ;; This function is called by:
 11183 ;;		_strcspn
 11184 ;;		_strspn
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text58
 11189  0024E8                     __ptext58:
 11190                           	opt stack 0
 11191  0024E8                     _strchr:
 11192                           	opt stack 20
 11193  0024E8  C014  FFD9         	movff	strchr@ptr,fsr2l
 11194  0024EC  C015  FFDA         	movff	strchr@ptr+1,fsr2h
 11195  0024F0  5016               	movf	strchr@chr,w,c
 11196  0024F2  18DE               	xorwf	postinc2,w,c
 11197  0024F4  A4D8               	btfss	status,2,c
 11198  0024F6  D005               	goto	l6195
 11199  0024F8  C014  F014         	movff	strchr@ptr,?_strchr
 11200  0024FC  C015  F015         	movff	strchr@ptr+1,?_strchr+1
 11201  002500  0012               	return	
 11202  002502                     l6195:
 11203  002502  C014  FFD9         	movff	strchr@ptr,fsr2l
 11204  002506  C015  FFDA         	movff	strchr@ptr+1,fsr2h
 11205  00250A  4A14               	infsnz	strchr@ptr,f,c
 11206  00250C  2A15               	incf	strchr@ptr+1,f,c
 11207  00250E  50DF               	movf	indf2,w,c
 11208  002510  A4D8               	btfss	status,2,c
 11209  002512  D7EA               	goto	l6189
 11210  002514  0E00               	movlw	0
 11211  002516  6E14               	movwf	?_strchr,c
 11212  002518  0E00               	movlw	0
 11213  00251A  6E15               	movwf	?_strchr+1,c
 11214  00251C  0012               	return	
 11215  00251E                     __end_of_strchr:
 11216                           	opt stack 0
 11217                           tblptru	equ	0xFF8
 11218                           tblptrh	equ	0xFF7
 11219                           tblptrl	equ	0xFF6
 11220                           tablat	equ	0xFF5
 11221                           prodh	equ	0xFF4
 11222                           prodl	equ	0xFF3
 11223                           intcon	equ	0xFF2
 11224                           intcon2	equ	0xFF1
 11225                           intcon3	equ	0xFF0
 11226                           indf0	equ	0xFEF
 11227                           postinc0	equ	0xFEE
 11228                           fsr0h	equ	0xFEA
 11229                           fsr0l	equ	0xFE9
 11230                           wreg	equ	0xFE8
 11231                           postdec1	equ	0xFE5
 11232                           fsr1l	equ	0xFE1
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           fsr2h	equ	0xFDA
 11237                           fsr2l	equ	0xFD9
 11238                           status	equ	0xFD8
 11239                           
 11240 ;; *************** function _strcpy *****************
 11241 ;; Defined at:
 11242 ;;		line 8 in file "F:\Microchip\XC8\sources\common\strcpy.c"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;  to              2   19[COMRAM] PTR unsigned char 
 11245 ;;		 -> commands(128), LED_Control@second_command(16), LED_Control@first_command(16), 
 11246 ;;  from            2   21[COMRAM] PTR const unsigned char 
 11247 ;;		 -> Read_Commands@str(128), STR_85(1), STR_76(1), STR_60(1), 
 11248 ;;		 -> STR_45(1), STR_29(1), LED_Control@command_input(16), NULL(0), 
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;  cp              2   23[COMRAM] PTR unsigned char 
 11251 ;;		 -> commands(128), LED_Control@second_command(16), LED_Control@first_command(16), 
 11252 ;; Return value:  Size  Location     Type
 11253 ;;                  2   19[COMRAM] PTR unsigned char 
 11254 ;; Registers used:
 11255 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11261 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11264 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11265 ;;Total ram usage:        6 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    4
 11268 ;; This function calls:
 11269 ;;		Nothing
 11270 ;; This function is called by:
 11271 ;;		_LED_Control
 11272 ;;		_TAS2521_Communication
 11273 ;;		_MAX17048_Communication
 11274 ;;		_ADC_Debug
 11275 ;;		_Battery_Display
 11276 ;;		_Screen_Brightness_Debug
 11277 ;;		_Read_Commands
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           	psect	text59
 11282  002152                     __ptext59:
 11283                           	opt stack 0
 11284  002152                     _strcpy:
 11285                           	opt stack 23
 11286                           
 11287                           ;incstack = 0
 11288  002152  C014  F018         	movff	strcpy@to,strcpy@cp
 11289  002156  C015  F019         	movff	strcpy@to+1,strcpy@cp+1
 11290  00215A  D004               	goto	l6391
 11291  00215C                     l6389:
 11292  00215C  4A18               	infsnz	strcpy@cp,f,c
 11293  00215E  2A19               	incf	strcpy@cp+1,f,c
 11294  002160  4A16               	infsnz	strcpy@from,f,c
 11295  002162  2A17               	incf	strcpy@from+1,f,c
 11296  002164                     l6391:
 11297  002164  C016  FFF6         	movff	strcpy@from,tblptrl
 11298  002168  C017  FFF7         	movff	strcpy@from+1,tblptrh
 11299  00216C  6AF8               	clrf	tblptru,c
 11300  00216E  C018  FFD9         	movff	strcpy@cp,fsr2l
 11301  002172  C019  FFDA         	movff	strcpy@cp+1,fsr2h
 11302  002176  0E0E               	movlw	(high __ramtop+-1)
 11303  002178  64F7               	cpfsgt	tblptrh,c
 11304  00217A  D003               	bra	u5427
 11305  00217C  0008               	tblrd		*
 11306  00217E  50F5               	movf	tablat,w,c
 11307  002180  D005               	bra	u5420
 11308  002182                     u5427:
 11309  002182  CFF6 FFE9          	movff	tblptrl,fsr0l
 11310  002186  CFF7 FFEA          	movff	tblptrh,fsr0h
 11311  00218A  50EF               	movf	indf0,w,c
 11312  00218C                     u5420:
 11313  00218C  6EDF               	movwf	indf2,c
 11314  00218E  50DF               	movf	indf2,w,c
 11315  002190  B4D8               	btfsc	status,2,c
 11316  002192  0012               	return	
 11317  002194  D7E3               	goto	l6389
 11318  002196                     __end_of_strcpy:
 11319                           	opt stack 0
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           prodh	equ	0xFF4
 11325                           prodl	equ	0xFF3
 11326                           intcon	equ	0xFF2
 11327                           intcon2	equ	0xFF1
 11328                           intcon3	equ	0xFF0
 11329                           indf0	equ	0xFEF
 11330                           postinc0	equ	0xFEE
 11331                           fsr0h	equ	0xFEA
 11332                           fsr0l	equ	0xFE9
 11333                           wreg	equ	0xFE8
 11334                           postdec1	equ	0xFE5
 11335                           fsr1l	equ	0xFE1
 11336                           indf2	equ	0xFDF
 11337                           postinc2	equ	0xFDE
 11338                           postdec2	equ	0xFDD
 11339                           fsr2h	equ	0xFDA
 11340                           fsr2l	equ	0xFD9
 11341                           status	equ	0xFD8
 11342                           
 11343 ;; *************** function _getch *****************
 11344 ;; Defined at:
 11345 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;  data            1   21[COMRAM] unsigned char 
 11350 ;; Return value:  Size  Location     Type
 11351 ;;                  1    wreg      unsigned char 
 11352 ;; Registers used:
 11353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11363 ;;Total ram usage:        1 bytes
 11364 ;; Hardware stack levels used:    1
 11365 ;; Hardware stack levels required when called:    6
 11366 ;; This function calls:
 11367 ;;		_EUSART1_Read
 11368 ;;		_putch
 11369 ;; This function is called by:
 11370 ;;		_Read_Commands
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           	psect	text60
 11375  002994                     __ptext60:
 11376                           	opt stack 0
 11377  002994                     _getch:
 11378                           	opt stack 20
 11379                           
 11380                           ;eusart1.c: 157: unsigned char data;
 11381                           ;eusart1.c: 158: data = EUSART1_Read();
 11382                           
 11383                           ;incstack = 0
 11384  002994  ECA9  F012         	call	_EUSART1_Read	;wreg free
 11385  002998  6E16               	movwf	getch@data,c
 11386                           
 11387                           ;eusart1.c: 159: putch(data);
 11388  00299A  5016               	movf	getch@data,w,c
 11389  00299C  ECFF  F014         	call	_putch
 11390                           
 11391                           ;eusart1.c: 160: return data;
 11392  0029A0  5016               	movf	getch@data,w,c
 11393  0029A2  0012               	return	
 11394  0029A4                     __end_of_getch:
 11395                           	opt stack 0
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           intcon2	equ	0xFF1
 11404                           intcon3	equ	0xFF0
 11405                           indf0	equ	0xFEF
 11406                           postinc0	equ	0xFEE
 11407                           fsr0h	equ	0xFEA
 11408                           fsr0l	equ	0xFE9
 11409                           wreg	equ	0xFE8
 11410                           postdec1	equ	0xFE5
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _putch *****************
 11420 ;; Defined at:
 11421 ;;		line 163 in file "mcc_generated_files/eusart1.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;  txData          1    wreg     unsigned char 
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;  txData          1   20[COMRAM] unsigned char 
 11426 ;; Return value:  Size  Location     Type
 11427 ;;                  1    wreg      void 
 11428 ;; Registers used:
 11429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11439 ;;Total ram usage:        1 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; Hardware stack levels required when called:    5
 11442 ;; This function calls:
 11443 ;;		_EUSART1_Write
 11444 ;; This function is called by:
 11445 ;;		_getch
 11446 ;;		_printf
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450                           	psect	text61
 11451  0029FE                     __ptext61:
 11452                           	opt stack 0
 11453  0029FE                     _putch:
 11454                           	opt stack 22
 11455                           
 11456                           ;incstack = 0
 11457                           ;putch@txData stored from wreg
 11458  0029FE  6E15               	movwf	putch@txData,c
 11459                           
 11460                           ;eusart1.c: 165: EUSART1_Write(txData);
 11461  002A00  5015               	movf	putch@txData,w,c
 11462  002A02  EC6F  F011         	call	_EUSART1_Write
 11463  002A06  0012               	return		;funcret
 11464  002A08                     __end_of_putch:
 11465                           	opt stack 0
 11466                           tblptru	equ	0xFF8
 11467                           tblptrh	equ	0xFF7
 11468                           tblptrl	equ	0xFF6
 11469                           tablat	equ	0xFF5
 11470                           prodh	equ	0xFF4
 11471                           prodl	equ	0xFF3
 11472                           intcon	equ	0xFF2
 11473                           intcon2	equ	0xFF1
 11474                           intcon3	equ	0xFF0
 11475                           indf0	equ	0xFEF
 11476                           postinc0	equ	0xFEE
 11477                           fsr0h	equ	0xFEA
 11478                           fsr0l	equ	0xFE9
 11479                           wreg	equ	0xFE8
 11480                           postdec1	equ	0xFE5
 11481                           fsr1l	equ	0xFE1
 11482                           indf2	equ	0xFDF
 11483                           postinc2	equ	0xFDE
 11484                           postdec2	equ	0xFDD
 11485                           fsr2h	equ	0xFDA
 11486                           fsr2l	equ	0xFD9
 11487                           status	equ	0xFD8
 11488                           
 11489 ;; *************** function _EUSART1_Write *****************
 11490 ;; Defined at:
 11491 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;  txData          1    wreg     unsigned char 
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;  txData          1   19[COMRAM] unsigned char 
 11496 ;; Return value:  Size  Location     Type
 11497 ;;                  1    wreg      void 
 11498 ;; Registers used:
 11499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11508 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11509 ;;Total ram usage:        1 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; Hardware stack levels required when called:    4
 11512 ;; This function calls:
 11513 ;;		Nothing
 11514 ;; This function is called by:
 11515 ;;		_putch
 11516 ;;		_DebugMenu
 11517 ;;		_LED_Control
 11518 ;; This function uses a non-reentrant model
 11519 ;;
 11520                           
 11521                           	psect	text62
 11522  0022DE                     __ptext62:
 11523                           	opt stack 0
 11524  0022DE                     _EUSART1_Write:
 11525                           	opt stack 22
 11526                           
 11527                           ;incstack = 0
 11528                           ;EUSART1_Write@txData stored from wreg
 11529  0022DE  6E14               	movwf	EUSART1_Write@txData,c
 11530  0022E0                     l6173:
 11531  0022E0  0101               	movlb	1	; () banked
 11532  0022E2  51F6               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 11533  0022E4  B4D8               	btfsc	status,2,c
 11534  0022E6  D7FC               	goto	l6173
 11535                           
 11536                           ; BSR set to: 1
 11537                           ;eusart1.c: 136: }
 11538                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 11539  0022E8  B89D               	btfsc	3997,4,c	;volatile
 11540  0022EA  D003               	goto	l593
 11541                           
 11542                           ; BSR set to: 1
 11543                           ;eusart1.c: 139: {
 11544                           ;eusart1.c: 140: TXREG1 = txData;
 11545  0022EC  C014  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 11546                           
 11547                           ;eusart1.c: 141: }
 11548  0022F0  D013               	goto	l6187
 11549  0022F2                     l593:
 11550                           
 11551                           ; BSR set to: 1
 11552                           ;eusart1.c: 142: else
 11553                           ;eusart1.c: 143: {
 11554                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 11555  0022F2  989D               	bcf	3997,4,c	;volatile
 11556                           
 11557                           ; BSR set to: 1
 11558                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 11559  0022F4  5038               	movf	_eusart1TxHead,w,c	;volatile
 11560  0022F6  0D01               	mullw	1
 11561  0022F8  0E28               	movlw	low _eusart1TxBuffer
 11562  0022FA  24F3               	addwf	prodl,w,c
 11563  0022FC  6ED9               	movwf	fsr2l,c
 11564  0022FE  0E01               	movlw	high _eusart1TxBuffer
 11565  002300  20F4               	addwfc	prodh,w,c
 11566  002302  6EDA               	movwf	fsr2h,c
 11567  002304  C014  FFDF         	movff	EUSART1_Write@txData,indf2
 11568                           
 11569                           ; BSR set to: 1
 11570  002308  2A38               	incf	_eusart1TxHead,f,c	;volatile
 11571                           
 11572                           ; BSR set to: 1
 11573                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 11574  00230A  0E07               	movlw	7
 11575  00230C  6438               	cpfsgt	_eusart1TxHead,c	;volatile
 11576  00230E  D002               	goto	l6185
 11577                           
 11578                           ; BSR set to: 1
 11579                           ;eusart1.c: 147: {
 11580                           ;eusart1.c: 148: eusart1TxHead = 0;
 11581  002310  0E00               	movlw	0
 11582  002312  6E38               	movwf	_eusart1TxHead,c	;volatile
 11583  002314                     l6185:
 11584                           
 11585                           ; BSR set to: 1
 11586                           ;eusart1.c: 149: }
 11587                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 11588  002314  0101               	movlb	1	; () banked
 11589  002316  07F6               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 11590  002318                     l6187:
 11591                           
 11592                           ; BSR set to: 1
 11593                           ;eusart1.c: 151: }
 11594                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 11595  002318  889D               	bsf	3997,4,c	;volatile
 11596                           
 11597                           ; BSR set to: 1
 11598  00231A  0012               	return		;funcret
 11599  00231C                     __end_of_EUSART1_Write:
 11600                           	opt stack 0
 11601                           tblptru	equ	0xFF8
 11602                           tblptrh	equ	0xFF7
 11603                           tblptrl	equ	0xFF6
 11604                           tablat	equ	0xFF5
 11605                           prodh	equ	0xFF4
 11606                           prodl	equ	0xFF3
 11607                           intcon	equ	0xFF2
 11608                           intcon2	equ	0xFF1
 11609                           intcon3	equ	0xFF0
 11610                           indf0	equ	0xFEF
 11611                           postinc0	equ	0xFEE
 11612                           fsr0h	equ	0xFEA
 11613                           fsr0l	equ	0xFE9
 11614                           wreg	equ	0xFE8
 11615                           postdec1	equ	0xFE5
 11616                           fsr1l	equ	0xFE1
 11617                           indf2	equ	0xFDF
 11618                           postinc2	equ	0xFDE
 11619                           postdec2	equ	0xFDD
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624 ;; *************** function _EUSART1_Read *****************
 11625 ;; Defined at:
 11626 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;  readValue       1   19[COMRAM] unsigned char 
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  1    wreg      unsigned char 
 11633 ;; Registers used:
 11634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11644 ;;Total ram usage:        1 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    4
 11647 ;; This function calls:
 11648 ;;		Nothing
 11649 ;; This function is called by:
 11650 ;;		_getch
 11651 ;;		_main
 11652 ;;		_DebugMenu
 11653 ;;		_LED_Control
 11654 ;;		_Read_Commands
 11655 ;;		_Debug_Mode
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           	psect	text63
 11660  002552                     __ptext63:
 11661                           	opt stack 0
 11662  002552                     _EUSART1_Read:
 11663                           	opt stack 26
 11664                           
 11665                           ;eusart1.c: 114: uint8_t readValue = 0;
 11666                           
 11667                           ; BSR set to: 1
 11668                           ;incstack = 0
 11669  002552  0E00               	movlw	0
 11670  002554  6E14               	movwf	EUSART1_Read@readValue,c
 11671  002556                     l6215:
 11672  002556  5035               	movf	_eusart1RxCount,w,c	;volatile
 11673  002558  B4D8               	btfsc	status,2,c
 11674  00255A  D7FD               	goto	l6215
 11675                           
 11676                           ;eusart1.c: 118: }
 11677                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 11678  00255C  5037               	movf	_eusart1RxTail,w,c	;volatile
 11679  00255E  0D01               	mullw	1
 11680  002560  0E20               	movlw	low _eusart1RxBuffer
 11681  002562  24F3               	addwf	prodl,w,c
 11682  002564  6ED9               	movwf	fsr2l,c
 11683  002566  0E01               	movlw	high _eusart1RxBuffer
 11684  002568  20F4               	addwfc	prodh,w,c
 11685  00256A  6EDA               	movwf	fsr2h,c
 11686  00256C  50DF               	movf	indf2,w,c
 11687  00256E  6E14               	movwf	EUSART1_Read@readValue,c
 11688  002570  2A37               	incf	_eusart1RxTail,f,c	;volatile
 11689                           
 11690                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 11691  002572  0E07               	movlw	7
 11692  002574  6437               	cpfsgt	_eusart1RxTail,c	;volatile
 11693  002576  D002               	goto	l6225
 11694                           
 11695                           ;eusart1.c: 122: {
 11696                           ;eusart1.c: 123: eusart1RxTail = 0;
 11697  002578  0E00               	movlw	0
 11698  00257A  6E37               	movwf	_eusart1RxTail,c	;volatile
 11699  00257C                     l6225:
 11700                           
 11701                           ;eusart1.c: 124: }
 11702                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 11703  00257C  9A9D               	bcf	3997,5,c	;volatile
 11704                           
 11705                           ;eusart1.c: 126: eusart1RxCount--;
 11706  00257E  0635               	decf	_eusart1RxCount,f,c	;volatile
 11707                           
 11708                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 11709  002580  8A9D               	bsf	3997,5,c	;volatile
 11710                           
 11711                           ;eusart1.c: 129: return readValue;
 11712  002582  5014               	movf	EUSART1_Read@readValue,w,c
 11713  002584  0012               	return	
 11714  002586                     __end_of_EUSART1_Read:
 11715                           	opt stack 0
 11716                           tblptru	equ	0xFF8
 11717                           tblptrh	equ	0xFF7
 11718                           tblptrl	equ	0xFF6
 11719                           tablat	equ	0xFF5
 11720                           prodh	equ	0xFF4
 11721                           prodl	equ	0xFF3
 11722                           intcon	equ	0xFF2
 11723                           intcon2	equ	0xFF1
 11724                           intcon3	equ	0xFF0
 11725                           indf0	equ	0xFEF
 11726                           postinc0	equ	0xFEE
 11727                           fsr0h	equ	0xFEA
 11728                           fsr0l	equ	0xFE9
 11729                           wreg	equ	0xFE8
 11730                           postdec1	equ	0xFE5
 11731                           fsr1l	equ	0xFE1
 11732                           indf2	equ	0xFDF
 11733                           postinc2	equ	0xFDE
 11734                           postdec2	equ	0xFDD
 11735                           fsr2h	equ	0xFDA
 11736                           fsr2l	equ	0xFD9
 11737                           status	equ	0xFD8
 11738                           
 11739 ;; *************** function _Button_Check *****************
 11740 ;; Defined at:
 11741 ;;		line 402 in file "main.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;		None
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;		None
 11746 ;; Return value:  Size  Location     Type
 11747 ;;                  1    wreg      void 
 11748 ;; Registers used:
 11749 ;;		wreg, status,2, status,0, cstack
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11758 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11759 ;;Total ram usage:        1 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; Hardware stack levels required when called:    5
 11762 ;; This function calls:
 11763 ;;		_EPWM1_LoadDutyValue
 11764 ;; This function is called by:
 11765 ;;		_main
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           	psect	text64
 11770  001C12                     __ptext64:
 11771                           	opt stack 0
 11772  001C12                     _Button_Check:
 11773                           	opt stack 25
 11774                           
 11775                           ;main.c: 405: if(Screen_Control == 1)
 11776                           
 11777                           ;incstack = 0
 11778  001C12  0432               	decf	_Screen_Control,w,c
 11779  001C14  A4D8               	btfss	status,2,c
 11780  001C16  0012               	return	
 11781                           
 11782                           ;main.c: 406: {
 11783                           ;main.c: 408: if(PORTAbits.RA7 == 0)
 11784  001C18  BE80               	btfsc	3968,7,c	;volatile
 11785  001C1A  D01F               	goto	l1205
 11786                           
 11787                           ;main.c: 409: {
 11788                           ;main.c: 410: PWM_Value = PWM_Value + 1;
 11789  001C1C  0E01               	movlw	1
 11790  001C1E  2443               	addwf	_PWM_Value,w,c
 11791  001C20  6E43               	movwf	_PWM_Value,c
 11792  001C22  0E00               	movlw	0
 11793  001C24  2044               	addwfc	_PWM_Value+1,w,c
 11794  001C26  6E44               	movwf	_PWM_Value+1,c
 11795                           
 11796                           ;main.c: 411: if(PWM_Value > 499)
 11797  001C28  0EF4               	movlw	244
 11798  001C2A  5C43               	subwf	_PWM_Value,w,c
 11799  001C2C  0E01               	movlw	1
 11800  001C2E  5844               	subwfb	_PWM_Value+1,w,c
 11801  001C30  A0D8               	btfss	status,0,c
 11802  001C32  D004               	goto	l7339
 11803                           
 11804                           ;main.c: 412: {
 11805                           ;main.c: 413: PWM_Value = 499;
 11806  001C34  0E01               	movlw	1
 11807  001C36  6E44               	movwf	_PWM_Value+1,c
 11808  001C38  0EF3               	movlw	243
 11809  001C3A  6E43               	movwf	_PWM_Value,c
 11810  001C3C                     l7339:
 11811                           
 11812                           ;main.c: 414: }
 11813                           ;main.c: 416: EPWM1_LoadDutyValue(PWM_Value);
 11814  001C3C  C043  F021         	movff	_PWM_Value,EPWM1_LoadDutyValue@dutyValue
 11815  001C40  C044  F022         	movff	_PWM_Value+1,EPWM1_LoadDutyValue@dutyValue+1
 11816  001C44  ECE9  F011         	call	_EPWM1_LoadDutyValue	;wreg free
 11817                           
 11818                           ;main.c: 419: _delay((unsigned long)((10)*(1000000/4000.0)));
 11819  001C48  0E04               	movlw	4
 11820  001C4A  0100               	movlb	0	; () banked
 11821  001C4C  6F62               	movwf	??_Button_Check& (0+255),b
 11822  001C4E  0E3E               	movlw	62
 11823  001C50                     u7207:
 11824  001C50  2EE8               	decfsz	wreg,f,c
 11825  001C52  D7FE               	goto	u7207
 11826  001C54  2F62               	decfsz	??_Button_Check& (0+255),f,b
 11827  001C56  D7FC               	goto	u7207
 11828                           
 11829                           ;main.c: 420: }
 11830  001C58  0012               	return	
 11831  001C5A                     l1205:
 11832                           
 11833                           ;main.c: 421: else if(PORTAbits.RA5 == 0)
 11834  001C5A  BA80               	btfsc	3968,5,c	;volatile
 11835  001C5C  0012               	return	
 11836                           
 11837                           ;main.c: 422: {
 11838                           ;main.c: 423: PWM_Value = PWM_Value - 1;
 11839  001C5E  0EFF               	movlw	255
 11840  001C60  2443               	addwf	_PWM_Value,w,c
 11841  001C62  6E43               	movwf	_PWM_Value,c
 11842  001C64  0EFF               	movlw	255
 11843  001C66  2044               	addwfc	_PWM_Value+1,w,c
 11844  001C68  6E44               	movwf	_PWM_Value+1,c
 11845                           
 11846                           ;main.c: 424: if(PWM_Value < 2)
 11847  001C6A  5044               	movf	_PWM_Value+1,w,c
 11848  001C6C  E108               	bnz	l7347
 11849  001C6E  0E02               	movlw	2
 11850  001C70  5C43               	subwf	_PWM_Value,w,c
 11851  001C72  B0D8               	btfsc	status,0,c
 11852  001C74  D004               	goto	l7347
 11853                           
 11854                           ;main.c: 425: {
 11855                           ;main.c: 426: PWM_Value = 2;
 11856  001C76  0E00               	movlw	0
 11857  001C78  6E44               	movwf	_PWM_Value+1,c
 11858  001C7A  0E02               	movlw	2
 11859  001C7C  6E43               	movwf	_PWM_Value,c
 11860  001C7E                     l7347:
 11861                           
 11862                           ;main.c: 427: }
 11863                           ;main.c: 429: EPWM1_LoadDutyValue(PWM_Value);
 11864  001C7E  C043  F021         	movff	_PWM_Value,EPWM1_LoadDutyValue@dutyValue
 11865  001C82  C044  F022         	movff	_PWM_Value+1,EPWM1_LoadDutyValue@dutyValue+1
 11866  001C86  ECE9  F011         	call	_EPWM1_LoadDutyValue	;wreg free
 11867                           
 11868                           ;main.c: 432: _delay((unsigned long)((10)*(1000000/4000.0)));
 11869  001C8A  0E04               	movlw	4
 11870  001C8C  0100               	movlb	0	; () banked
 11871  001C8E  6F62               	movwf	??_Button_Check& (0+255),b
 11872  001C90  0E3E               	movlw	62
 11873  001C92                     u7217:
 11874  001C92  2EE8               	decfsz	wreg,f,c
 11875  001C94  D7FE               	goto	u7217
 11876  001C96  2F62               	decfsz	??_Button_Check& (0+255),f,b
 11877  001C98  D7FC               	goto	u7217
 11878  001C9A  0012               	return	
 11879  001C9C                     __end_of_Button_Check:
 11880                           	opt stack 0
 11881                           tblptru	equ	0xFF8
 11882                           tblptrh	equ	0xFF7
 11883                           tblptrl	equ	0xFF6
 11884                           tablat	equ	0xFF5
 11885                           prodh	equ	0xFF4
 11886                           prodl	equ	0xFF3
 11887                           intcon	equ	0xFF2
 11888                           intcon2	equ	0xFF1
 11889                           intcon3	equ	0xFF0
 11890                           indf0	equ	0xFEF
 11891                           postinc0	equ	0xFEE
 11892                           fsr0h	equ	0xFEA
 11893                           fsr0l	equ	0xFE9
 11894                           wreg	equ	0xFE8
 11895                           postdec1	equ	0xFE5
 11896                           fsr1l	equ	0xFE1
 11897                           indf2	equ	0xFDF
 11898                           postinc2	equ	0xFDE
 11899                           postdec2	equ	0xFDD
 11900                           fsr2h	equ	0xFDA
 11901                           fsr2l	equ	0xFD9
 11902                           status	equ	0xFD8
 11903                           
 11904 ;; *************** function _EPWM1_LoadDutyValue *****************
 11905 ;; Defined at:
 11906 ;;		line 91 in file "mcc_generated_files/epwm1.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;  dutyValue       2   32[COMRAM] unsigned int 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;		None
 11911 ;; Return value:  Size  Location     Type
 11912 ;;                  1    wreg      void 
 11913 ;; Registers used:
 11914 ;;		wreg, status,2, status,0
 11915 ;; Tracked objects:
 11916 ;;		On entry : 0/0
 11917 ;;		On exit  : 0/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11922 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11923 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11924 ;;Total ram usage:        4 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    4
 11927 ;; This function calls:
 11928 ;;		Nothing
 11929 ;; This function is called by:
 11930 ;;		_main
 11931 ;;		_Button_Check
 11932 ;;		_Screen_Brightness_Debug
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           	psect	text65
 11937  0023D2                     __ptext65:
 11938                           	opt stack 0
 11939  0023D2                     _EPWM1_LoadDutyValue:
 11940                           	opt stack 26
 11941                           
 11942                           ;epwm1.c: 94: CCPR1L = ((dutyValue & 0x03FC)>>2);
 11943                           
 11944                           ;incstack = 0
 11945  0023D2  C021  F060         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 11946  0023D6  C022  F061         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
 11947  0023DA  0100               	movlb	0	; () banked
 11948  0023DC  90D8               	bcf	status,0,c
 11949  0023DE  3361               	rrcf	(??_EPWM1_LoadDutyValue+1)& (0+255),f,b
 11950  0023E0  3360               	rrcf	??_EPWM1_LoadDutyValue& (0+255),f,b
 11951  0023E2  0100               	movlb	0	; () banked
 11952  0023E4  90D8               	bcf	status,0,c
 11953  0023E6  3361               	rrcf	(??_EPWM1_LoadDutyValue+1)& (0+255),f,b
 11954  0023E8  3360               	rrcf	??_EPWM1_LoadDutyValue& (0+255),f,b
 11955  0023EA  0100               	movlb	0	; () banked
 11956  0023EC  5160               	movf	??_EPWM1_LoadDutyValue& (0+255),w,b
 11957  0023EE  6EBC               	movwf	4028,c	;volatile
 11958                           
 11959                           ;epwm1.c: 97: CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4));
 11960  0023F0  C021  F060         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 11961  0023F4  0E03               	movlw	3
 11962  0023F6  0100               	movlb	0	; () banked
 11963  0023F8  1760               	andwf	??_EPWM1_LoadDutyValue& (0+255),f,b
 11964  0023FA  0100               	movlb	0	; () banked
 11965  0023FC  3B60               	swapf	??_EPWM1_LoadDutyValue& (0+255),f,b
 11966  0023FE  0EF0               	movlw	240
 11967  002400  1760               	andwf	??_EPWM1_LoadDutyValue& (0+255),f,b
 11968  002402  50BB               	movf	4027,w,c	;volatile
 11969  002404  0BCF               	andlw	207
 11970  002406  0100               	movlb	0	; () banked
 11971  002408  1160               	iorwf	??_EPWM1_LoadDutyValue& (0+255),w,b
 11972  00240A  6EBB               	movwf	4027,c	;volatile
 11973                           
 11974                           ; BSR set to: 0
 11975  00240C  0012               	return		;funcret
 11976  00240E                     __end_of_EPWM1_LoadDutyValue:
 11977                           	opt stack 0
 11978                           tblptru	equ	0xFF8
 11979                           tblptrh	equ	0xFF7
 11980                           tblptrl	equ	0xFF6
 11981                           tablat	equ	0xFF5
 11982                           prodh	equ	0xFF4
 11983                           prodl	equ	0xFF3
 11984                           intcon	equ	0xFF2
 11985                           intcon2	equ	0xFF1
 11986                           intcon3	equ	0xFF0
 11987                           indf0	equ	0xFEF
 11988                           postinc0	equ	0xFEE
 11989                           fsr0h	equ	0xFEA
 11990                           fsr0l	equ	0xFE9
 11991                           wreg	equ	0xFE8
 11992                           postdec1	equ	0xFE5
 11993                           fsr1l	equ	0xFE1
 11994                           indf2	equ	0xFDF
 11995                           postinc2	equ	0xFDE
 11996                           postdec2	equ	0xFDD
 11997                           fsr2h	equ	0xFDA
 11998                           fsr2l	equ	0xFD9
 11999                           status	equ	0xFD8
 12000                           
 12001 ;; *************** function _Build_Volume_Array *****************
 12002 ;; Defined at:
 12003 ;;		line 134 in file "sound_control.c"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;		None
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;		None
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  1    wreg      void 
 12010 ;; Registers used:
 12011 ;;		None
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/0
 12014 ;;		On exit  : 0/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12021 ;;Total ram usage:        0 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    4
 12024 ;; This function calls:
 12025 ;;		Nothing
 12026 ;; This function is called by:
 12027 ;;		_main
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031                           	psect	text66
 12032  002A2C                     __ptext66:
 12033                           	opt stack 0
 12034  002A2C                     _Build_Volume_Array:
 12035                           	opt stack 26
 12036                           
 12037                           ; BSR set to: 0
 12038                           ;incstack = 0
 12039  002A2C  0012               	return		;funcret
 12040  002A2E                     __end_of_Build_Volume_Array:
 12041                           	opt stack 0
 12042                           tblptru	equ	0xFF8
 12043                           tblptrh	equ	0xFF7
 12044                           tblptrl	equ	0xFF6
 12045                           tablat	equ	0xFF5
 12046                           prodh	equ	0xFF4
 12047                           prodl	equ	0xFF3
 12048                           intcon	equ	0xFF2
 12049                           intcon2	equ	0xFF1
 12050                           intcon3	equ	0xFF0
 12051                           indf0	equ	0xFEF
 12052                           postinc0	equ	0xFEE
 12053                           fsr0h	equ	0xFEA
 12054                           fsr0l	equ	0xFE9
 12055                           wreg	equ	0xFE8
 12056                           postdec1	equ	0xFE5
 12057                           fsr1l	equ	0xFE1
 12058                           indf2	equ	0xFDF
 12059                           postinc2	equ	0xFDE
 12060                           postdec2	equ	0xFDD
 12061                           fsr2h	equ	0xFDA
 12062                           fsr2l	equ	0xFD9
 12063                           status	equ	0xFD8
 12064                           
 12065 ;; *************** function _Brightness_SW_Check *****************
 12066 ;; Defined at:
 12067 ;;		line 338 in file "main.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;		None
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;		None
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  1    wreg      void 
 12074 ;; Registers used:
 12075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12076 ;; Tracked objects:
 12077 ;;		On entry : 0/0
 12078 ;;		On exit  : 0/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12085 ;;Total ram usage:        0 bytes
 12086 ;; Hardware stack levels used:    1
 12087 ;; Hardware stack levels required when called:    7
 12088 ;; This function calls:
 12089 ;;		_Update_Battery_Display
 12090 ;;		_Update_Battery_Icon
 12091 ;; This function is called by:
 12092 ;;		_main
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           	psect	text67
 12097  001D86                     __ptext67:
 12098                           	opt stack 0
 12099  001D86                     _Brightness_SW_Check:
 12100                           	opt stack 23
 12101                           
 12102                           ;main.c: 342: if(PORTBbits.RB4 == 0)
 12103                           
 12104                           ;incstack = 0
 12105  001D86  B881               	btfsc	3969,4,c	;volatile
 12106  001D88  D008               	goto	l7255
 12107                           
 12108                           ;main.c: 343: {
 12109                           ;main.c: 344: Brightness_Count_Enable = 1;
 12110  001D8A  0E01               	movlw	1
 12111  001D8C  6E2C               	movwf	_Brightness_Count_Enable,c	;volatile
 12112                           
 12113                           ;main.c: 345: if(Brightness_Counter >= 250)
 12114  001D8E  0EF9               	movlw	249
 12115  001D90  642D               	cpfsgt	_Brightness_Counter,c	;volatile
 12116  001D92  0012               	return	
 12117                           
 12118                           ;main.c: 346: {
 12119                           ;main.c: 347: Brightness_Counter = 250;
 12120  001D94  0EFA               	movlw	250
 12121  001D96  6E2D               	movwf	_Brightness_Counter,c	;volatile
 12122                           
 12123                           ;main.c: 348: }
 12124                           ;main.c: 349: }
 12125  001D98  0012               	return	
 12126  001D9A                     l7255:
 12127                           
 12128                           ;main.c: 350: else
 12129                           ;main.c: 351: {
 12130                           ;main.c: 352: Brightness_Count_Enable = 0;
 12131  001D9A  0E00               	movlw	0
 12132  001D9C  6E2C               	movwf	_Brightness_Count_Enable,c	;volatile
 12133                           
 12134                           ;main.c: 353: if(Brightness_Counter < 2)
 12135  001D9E  0E02               	movlw	2
 12136  001DA0  602D               	cpfslt	_Brightness_Counter,c	;volatile
 12137  001DA2  D001               	goto	l7261
 12138  001DA4  D01F               	goto	l1190
 12139  001DA6                     l7261:
 12140                           
 12141                           ;main.c: 358: else if(Brightness_Counter < 20)
 12142  001DA6  0E14               	movlw	20
 12143  001DA8  602D               	cpfslt	_Brightness_Counter,c	;volatile
 12144  001DAA  D012               	goto	l7275
 12145                           
 12146                           ;main.c: 359: {
 12147                           ;main.c: 362: Update_Battery_Icon(Battery_Percent);
 12148  001DAC  5046               	movf	_Battery_Percent,w,c	;volatile
 12149  001DAE  ECFE  F013         	call	_Update_Battery_Icon
 12150                           
 12151                           ;main.c: 364: if(Battery_Displayed == 0)
 12152  001DB2  5029               	movf	_Battery_Displayed,w,c
 12153  001DB4  A4D8               	btfss	status,2,c
 12154  001DB6  D006               	goto	l7271
 12155                           
 12156                           ;main.c: 365: {
 12157                           ;main.c: 366: Battery_Displayed = 1;
 12158  001DB8  0E01               	movlw	1
 12159  001DBA  6E29               	movwf	_Battery_Displayed,c
 12160                           
 12161                           ;main.c: 367: Update_Battery_Display(1);
 12162  001DBC  0E01               	movlw	1
 12163  001DBE  ECEC  F013         	call	_Update_Battery_Display
 12164                           
 12165                           ;main.c: 368: }
 12166  001DC2  D010               	goto	l1190
 12167  001DC4                     l7271:
 12168                           
 12169                           ;main.c: 369: else
 12170                           ;main.c: 370: {
 12171                           ;main.c: 371: Battery_Displayed = 0;
 12172  001DC4  0E00               	movlw	0
 12173  001DC6  6E29               	movwf	_Battery_Displayed,c
 12174                           
 12175                           ;main.c: 372: Update_Battery_Display(0);
 12176  001DC8  0E00               	movlw	0
 12177  001DCA  ECEC  F013         	call	_Update_Battery_Display
 12178                           
 12179                           ;main.c: 373: }
 12180                           ;main.c: 375: }
 12181  001DCE  D00A               	goto	l1190
 12182  001DD0                     l7275:
 12183                           
 12184                           ;main.c: 376: else
 12185                           ;main.c: 377: {
 12186                           ;main.c: 378: if(Screen_Control == 1)
 12187  001DD0  0432               	decf	_Screen_Control,w,c
 12188  001DD2  A4D8               	btfss	status,2,c
 12189  001DD4  D004               	goto	l7281
 12190                           
 12191                           ;main.c: 379: {
 12192                           ;main.c: 380: Screen_Control = 0;
 12193  001DD6  0E00               	movlw	0
 12194  001DD8  6E32               	movwf	_Screen_Control,c
 12195                           
 12196                           ;main.c: 381: do { LATCbits.LATC2 = 0; } while(0);
 12197  001DDA  948B               	bcf	3979,2,c	;volatile
 12198                           
 12199                           ;main.c: 382: }
 12200  001DDC  D003               	goto	l1190
 12201  001DDE                     l7281:
 12202                           
 12203                           ;main.c: 383: else
 12204                           ;main.c: 384: {
 12205                           ;main.c: 385: Screen_Control = 1;
 12206  001DDE  0E01               	movlw	1
 12207  001DE0  6E32               	movwf	_Screen_Control,c
 12208                           
 12209                           ;main.c: 386: do { LATCbits.LATC2 = 1; } while(0);
 12210  001DE2  848B               	bsf	3979,2,c	;volatile
 12211  001DE4                     l1190:
 12212                           
 12213                           ;main.c: 387: }
 12214                           ;main.c: 388: }
 12215                           ;main.c: 391: Brightness_Counter = 0;
 12216  001DE4  0E00               	movlw	0
 12217  001DE6  6E2D               	movwf	_Brightness_Counter,c	;volatile
 12218  001DE8  0012               	return	
 12219  001DEA                     __end_of_Brightness_SW_Check:
 12220                           	opt stack 0
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           intcon	equ	0xFF2
 12228                           intcon2	equ	0xFF1
 12229                           intcon3	equ	0xFF0
 12230                           indf0	equ	0xFEF
 12231                           postinc0	equ	0xFEE
 12232                           fsr0h	equ	0xFEA
 12233                           fsr0l	equ	0xFE9
 12234                           wreg	equ	0xFE8
 12235                           postdec1	equ	0xFE5
 12236                           fsr1l	equ	0xFE1
 12237                           indf2	equ	0xFDF
 12238                           postinc2	equ	0xFDE
 12239                           postdec2	equ	0xFDD
 12240                           fsr2h	equ	0xFDA
 12241                           fsr2l	equ	0xFD9
 12242                           status	equ	0xFD8
 12243                           
 12244 ;; *************** function _Update_Battery_Display *****************
 12245 ;; Defined at:
 12246 ;;		line 60 in file "battery_control.c"
 12247 ;; Parameters:    Size  Location     Type
 12248 ;;  display         1    wreg     unsigned char 
 12249 ;; Auto vars:     Size  Location     Type
 12250 ;;  display         1   27[COMRAM] unsigned char 
 12251 ;;  data            3   24[COMRAM] unsigned char [3]
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  1    wreg      void 
 12254 ;; Registers used:
 12255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12262 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12265 ;;Total ram usage:        4 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    6
 12268 ;; This function calls:
 12269 ;;		_EUSART2_Write_Array
 12270 ;; This function is called by:
 12271 ;;		_Brightness_SW_Check
 12272 ;;		_Battery_Display
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text68
 12277  0027D8                     __ptext68:
 12278                           	opt stack 0
 12279  0027D8                     _Update_Battery_Display:
 12280                           	opt stack 21
 12281                           
 12282                           ;incstack = 0
 12283                           ;Update_Battery_Display@display stored from wreg
 12284  0027D8  6E1C               	movwf	Update_Battery_Display@display,c
 12285                           
 12286                           ;battery_control.c: 62: uint8_t data[3] = {'D', 0, 'Q'};
 12287  0027DA  C1DD  F019         	movff	Update_Battery_Display@F18447,Update_Battery_Display@data
 12288  0027DE  C1DE  F01A         	movff	Update_Battery_Display@F18447+1,Update_Battery_Display@data+1
 12289  0027E2  C1DF  F01B         	movff	Update_Battery_Display@F18447+2,Update_Battery_Display@data+2
 12290                           
 12291                           ;battery_control.c: 64: data[1] = display;
 12292  0027E6  C01C  F01A         	movff	Update_Battery_Display@display,Update_Battery_Display@data+1
 12293                           
 12294                           ;battery_control.c: 66: EUSART2_Write_Array(data, sizeof(data));
 12295  0027EA  0E19               	movlw	low Update_Battery_Display@data
 12296  0027EC  6E15               	movwf	EUSART2_Write_Array@data,c
 12297  0027EE  0E00               	movlw	high Update_Battery_Display@data
 12298  0027F0  6E16               	movwf	EUSART2_Write_Array@data+1,c
 12299  0027F2  0E03               	movlw	3
 12300  0027F4  6E17               	movwf	EUSART2_Write_Array@length,c
 12301  0027F6  ECC3  F012         	call	_EUSART2_Write_Array	;wreg free
 12302  0027FA  0012               	return		;funcret
 12303  0027FC                     __end_of_Update_Battery_Display:
 12304                           	opt stack 0
 12305                           tblptru	equ	0xFF8
 12306                           tblptrh	equ	0xFF7
 12307                           tblptrl	equ	0xFF6
 12308                           tablat	equ	0xFF5
 12309                           prodh	equ	0xFF4
 12310                           prodl	equ	0xFF3
 12311                           intcon	equ	0xFF2
 12312                           intcon2	equ	0xFF1
 12313                           intcon3	equ	0xFF0
 12314                           indf0	equ	0xFEF
 12315                           postinc0	equ	0xFEE
 12316                           fsr0h	equ	0xFEA
 12317                           fsr0l	equ	0xFE9
 12318                           wreg	equ	0xFE8
 12319                           postdec1	equ	0xFE5
 12320                           fsr1l	equ	0xFE1
 12321                           indf2	equ	0xFDF
 12322                           postinc2	equ	0xFDE
 12323                           postdec2	equ	0xFDD
 12324                           fsr2h	equ	0xFDA
 12325                           fsr2l	equ	0xFD9
 12326                           status	equ	0xFD8
 12327                           
 12328 ;; *************** function _Battery_Check *****************
 12329 ;; Defined at:
 12330 ;;		line 294 in file "main.c"
 12331 ;; Parameters:    Size  Location     Type
 12332 ;;		None
 12333 ;; Auto vars:     Size  Location     Type
 12334 ;;		None
 12335 ;; Return value:  Size  Location     Type
 12336 ;;                  1    wreg      void 
 12337 ;; Registers used:
 12338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12339 ;; Tracked objects:
 12340 ;;		On entry : 0/0
 12341 ;;		On exit  : 0/0
 12342 ;;		Unchanged: 0/0
 12343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12348 ;;Total ram usage:        0 bytes
 12349 ;; Hardware stack levels used:    1
 12350 ;; Hardware stack levels required when called:    8
 12351 ;; This function calls:
 12352 ;;		_Read_Battery_Percent
 12353 ;;		_Update_Battery_Icon
 12354 ;; This function is called by:
 12355 ;;		_main
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           	psect	text69
 12360  00207C                     __ptext69:
 12361                           	opt stack 0
 12362  00207C                     _Battery_Check:
 12363                           	opt stack 22
 12364                           
 12365                           ;main.c: 300: if(PORTAbits.RA1 == 0)
 12366                           
 12367                           ;incstack = 0
 12368  00207C  B280               	btfsc	3968,1,c	;volatile
 12369  00207E  D00B               	goto	l1177
 12370                           
 12371                           ;main.c: 301: {
 12372                           ;main.c: 302: Battery_Timer = 0;
 12373  002080  0E00               	movlw	0
 12374  002082  6E2A               	movwf	_Battery_Timer,c	;volatile
 12375                           
 12376                           ;main.c: 303: if(Battery_Percent < 100)
 12377  002084  0E64               	movlw	100
 12378  002086  6046               	cpfslt	_Battery_Percent,c	;volatile
 12379  002088  0012               	return	
 12380                           
 12381                           ;main.c: 304: {
 12382                           ;main.c: 305: Battery_Percent = 105;
 12383  00208A  0E69               	movlw	105
 12384  00208C  6E46               	movwf	_Battery_Percent,c	;volatile
 12385                           
 12386                           ;main.c: 306: Update_Battery_Icon(Battery_Percent);
 12387  00208E  5046               	movf	_Battery_Percent,w,c	;volatile
 12388  002090  ECFE  F013         	call	_Update_Battery_Icon
 12389                           
 12390                           ;main.c: 307: }
 12391                           ;main.c: 308: }
 12392  002094  0012               	return	
 12393  002096                     l1177:
 12394                           
 12395                           ;main.c: 312: else if((PORTAbits.RA1 == 1) && Battery_Percent > 100)
 12396  002096  A280               	btfss	3968,1,c	;volatile
 12397  002098  D00A               	goto	l7301
 12398  00209A  0E64               	movlw	100
 12399  00209C  6446               	cpfsgt	_Battery_Percent,c	;volatile
 12400  00209E  D007               	goto	l7301
 12401                           
 12402                           ;main.c: 313: {
 12403                           ;main.c: 314: Battery_Percent = Read_Battery_Percent();
 12404  0020A0  EC67  F014         	call	_Read_Battery_Percent	;wreg free
 12405  0020A4  6E46               	movwf	_Battery_Percent,c	;volatile
 12406                           
 12407                           ;main.c: 315: Update_Battery_Icon(Battery_Percent);
 12408  0020A6  5046               	movf	_Battery_Percent,w,c	;volatile
 12409  0020A8  ECFE  F013         	call	_Update_Battery_Icon
 12410                           
 12411                           ;main.c: 316: }
 12412  0020AC  0012               	return	
 12413  0020AE                     l7301:
 12414                           
 12415                           ;main.c: 319: else
 12416                           ;main.c: 320: {
 12417                           ;main.c: 323: if(Battery_Timer >= (30 << 2))
 12418  0020AE  0E77               	movlw	119
 12419  0020B0  642A               	cpfsgt	_Battery_Timer,c	;volatile
 12420  0020B2  0012               	return	
 12421                           
 12422                           ;main.c: 324: {
 12423                           ;main.c: 326: Battery_Timer = 0;
 12424  0020B4  0E00               	movlw	0
 12425  0020B6  6E2A               	movwf	_Battery_Timer,c	;volatile
 12426                           
 12427                           ;main.c: 329: Battery_Percent = Read_Battery_Percent();
 12428  0020B8  EC67  F014         	call	_Read_Battery_Percent	;wreg free
 12429  0020BC  6E46               	movwf	_Battery_Percent,c	;volatile
 12430                           
 12431                           ;main.c: 330: Update_Battery_Icon(Battery_Percent);
 12432  0020BE  5046               	movf	_Battery_Percent,w,c	;volatile
 12433  0020C0  ECFE  F013         	call	_Update_Battery_Icon
 12434  0020C4  0012               	return	
 12435  0020C6                     __end_of_Battery_Check:
 12436                           	opt stack 0
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           intcon	equ	0xFF2
 12444                           intcon2	equ	0xFF1
 12445                           intcon3	equ	0xFF0
 12446                           indf0	equ	0xFEF
 12447                           postinc0	equ	0xFEE
 12448                           fsr0h	equ	0xFEA
 12449                           fsr0l	equ	0xFE9
 12450                           wreg	equ	0xFE8
 12451                           postdec1	equ	0xFE5
 12452                           fsr1l	equ	0xFE1
 12453                           indf2	equ	0xFDF
 12454                           postinc2	equ	0xFDE
 12455                           postdec2	equ	0xFDD
 12456                           fsr2h	equ	0xFDA
 12457                           fsr2l	equ	0xFD9
 12458                           status	equ	0xFD8
 12459                           
 12460 ;; *************** function _Update_Battery_Icon *****************
 12461 ;; Defined at:
 12462 ;;		line 49 in file "battery_control.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;  charge          1    wreg     unsigned char 
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;  charge          1   27[COMRAM] unsigned char 
 12467 ;;  data            3   24[COMRAM] unsigned char [3]
 12468 ;; Return value:  Size  Location     Type
 12469 ;;                  1    wreg      void 
 12470 ;; Registers used:
 12471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12478 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12480 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12481 ;;Total ram usage:        4 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    6
 12484 ;; This function calls:
 12485 ;;		_EUSART2_Write_Array
 12486 ;; This function is called by:
 12487 ;;		_Battery_Check
 12488 ;;		_Brightness_SW_Check
 12489 ;;		_Battery_Display
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           	psect	text70
 12494  0027FC                     __ptext70:
 12495                           	opt stack 0
 12496  0027FC                     _Update_Battery_Icon:
 12497                           	opt stack 21
 12498                           
 12499                           ;incstack = 0
 12500                           ;Update_Battery_Icon@charge stored from wreg
 12501  0027FC  6E1C               	movwf	Update_Battery_Icon@charge,c
 12502                           
 12503                           ;battery_control.c: 51: uint8_t data[3] = {'I', 0, 'Q'};
 12504  0027FE  C1E0  F019         	movff	Update_Battery_Icon@F18444,Update_Battery_Icon@data
 12505  002802  C1E1  F01A         	movff	Update_Battery_Icon@F18444+1,Update_Battery_Icon@data+1
 12506  002806  C1E2  F01B         	movff	Update_Battery_Icon@F18444+2,Update_Battery_Icon@data+2
 12507                           
 12508                           ;battery_control.c: 53: data[1] = charge;
 12509  00280A  C01C  F01A         	movff	Update_Battery_Icon@charge,Update_Battery_Icon@data+1
 12510                           
 12511                           ;battery_control.c: 55: EUSART2_Write_Array(data, sizeof(data));
 12512  00280E  0E19               	movlw	low Update_Battery_Icon@data
 12513  002810  6E15               	movwf	EUSART2_Write_Array@data,c
 12514  002812  0E00               	movlw	high Update_Battery_Icon@data
 12515  002814  6E16               	movwf	EUSART2_Write_Array@data+1,c
 12516  002816  0E03               	movlw	3
 12517  002818  6E17               	movwf	EUSART2_Write_Array@length,c
 12518  00281A  ECC3  F012         	call	_EUSART2_Write_Array	;wreg free
 12519  00281E  0012               	return		;funcret
 12520  002820                     __end_of_Update_Battery_Icon:
 12521                           	opt stack 0
 12522                           tblptru	equ	0xFF8
 12523                           tblptrh	equ	0xFF7
 12524                           tblptrl	equ	0xFF6
 12525                           tablat	equ	0xFF5
 12526                           prodh	equ	0xFF4
 12527                           prodl	equ	0xFF3
 12528                           intcon	equ	0xFF2
 12529                           intcon2	equ	0xFF1
 12530                           intcon3	equ	0xFF0
 12531                           indf0	equ	0xFEF
 12532                           postinc0	equ	0xFEE
 12533                           fsr0h	equ	0xFEA
 12534                           fsr0l	equ	0xFE9
 12535                           wreg	equ	0xFE8
 12536                           postdec1	equ	0xFE5
 12537                           fsr1l	equ	0xFE1
 12538                           indf2	equ	0xFDF
 12539                           postinc2	equ	0xFDE
 12540                           postdec2	equ	0xFDD
 12541                           fsr2h	equ	0xFDA
 12542                           fsr2l	equ	0xFD9
 12543                           status	equ	0xFD8
 12544                           
 12545 ;; *************** function _EUSART2_Write_Array *****************
 12546 ;; Defined at:
 12547 ;;		line 199 in file "mcc_generated_files/eusart2.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;  data            2   20[COMRAM] PTR unsigned char 
 12550 ;;		 -> Update_Y_Offset@data(4), Update_X_Offset@data(4), Update_Battery_Display@data(3), Update_Battery_Icon@data(3), 
 12551 ;;		 -> Battery_Display@data(2), PI_UART_SYNC@data(2), 
 12552 ;;  length          1   22[COMRAM] unsigned char 
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  i               1   23[COMRAM] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  1    wreg      void 
 12557 ;; Registers used:
 12558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12564 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12567 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12568 ;;Total ram usage:        4 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    5
 12571 ;; This function calls:
 12572 ;;		_EUSART2_Write
 12573 ;; This function is called by:
 12574 ;;		_PI_UART_SYNC
 12575 ;;		_Battery_Display
 12576 ;;		_Update_Battery_Icon
 12577 ;;		_Update_Battery_Display
 12578 ;;		_Update_X_Offset
 12579 ;;		_Update_Y_Offset
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           	psect	text71
 12584  002586                     __ptext71:
 12585                           	opt stack 0
 12586  002586                     _EUSART2_Write_Array:
 12587                           	opt stack 24
 12588                           
 12589                           ;eusart2.c: 201: uint8_t i = 0;
 12590                           
 12591                           ;incstack = 0
 12592  002586  0E00               	movlw	0
 12593  002588  6E18               	movwf	EUSART2_Write_Array@i,c
 12594                           
 12595                           ;eusart2.c: 203: for(i = 0; i < length; i++)
 12596  00258A  0E00               	movlw	0
 12597  00258C  6E18               	movwf	EUSART2_Write_Array@i,c
 12598  00258E  D010               	goto	l6357
 12599  002590                     l6351:
 12600                           
 12601                           ;eusart2.c: 204: {
 12602                           ;eusart2.c: 205: EUSART2_Write(data[i]);
 12603  002590  5018               	movf	EUSART2_Write_Array@i,w,c
 12604  002592  0D01               	mullw	1
 12605  002594  50F3               	movf	prodl,w,c
 12606  002596  2415               	addwf	EUSART2_Write_Array@data,w,c
 12607  002598  6ED9               	movwf	fsr2l,c
 12608  00259A  50F4               	movf	prodh,w,c
 12609  00259C  2016               	addwfc	EUSART2_Write_Array@data+1,w,c
 12610  00259E  6EDA               	movwf	fsr2h,c
 12611  0025A0  50DF               	movf	indf2,w,c
 12612  0025A2  EC8E  F011         	call	_EUSART2_Write
 12613                           
 12614                           ;eusart2.c: 206: _delay((unsigned long)((2)*(1000000/4000.0)));
 12615  0025A6  0EA6               	movlw	166
 12616  0025A8                     u7227:
 12617  0025A8  2EE8               	decfsz	wreg,f,c
 12618  0025AA  D7FE               	goto	u7227
 12619  0025AC  D000               	nop2		;nop
 12620  0025AE  2A18               	incf	EUSART2_Write_Array@i,f,c
 12621  0025B0                     l6357:
 12622  0025B0  5017               	movf	EUSART2_Write_Array@length,w,c
 12623  0025B2  5C18               	subwf	EUSART2_Write_Array@i,w,c
 12624  0025B4  B0D8               	btfsc	status,0,c
 12625  0025B6  0012               	return	
 12626  0025B8  D7EB               	goto	l6351
 12627  0025BA                     __end_of_EUSART2_Write_Array:
 12628                           	opt stack 0
 12629                           tblptru	equ	0xFF8
 12630                           tblptrh	equ	0xFF7
 12631                           tblptrl	equ	0xFF6
 12632                           tablat	equ	0xFF5
 12633                           prodh	equ	0xFF4
 12634                           prodl	equ	0xFF3
 12635                           intcon	equ	0xFF2
 12636                           intcon2	equ	0xFF1
 12637                           intcon3	equ	0xFF0
 12638                           indf0	equ	0xFEF
 12639                           postinc0	equ	0xFEE
 12640                           fsr0h	equ	0xFEA
 12641                           fsr0l	equ	0xFE9
 12642                           wreg	equ	0xFE8
 12643                           postdec1	equ	0xFE5
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           postdec2	equ	0xFDD
 12648                           fsr2h	equ	0xFDA
 12649                           fsr2l	equ	0xFD9
 12650                           status	equ	0xFD8
 12651                           
 12652 ;; *************** function _EUSART2_Write *****************
 12653 ;; Defined at:
 12654 ;;		line 135 in file "mcc_generated_files/eusart2.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;  txData          1    wreg     unsigned char 
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;  txData          1   19[COMRAM] unsigned char 
 12659 ;; Return value:  Size  Location     Type
 12660 ;;                  1    wreg      void 
 12661 ;; Registers used:
 12662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12672 ;;Total ram usage:        1 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    4
 12675 ;; This function calls:
 12676 ;;		Nothing
 12677 ;; This function is called by:
 12678 ;;		_EUSART2_Write_Array
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           	psect	text72
 12683  00231C                     __ptext72:
 12684                           	opt stack 0
 12685  00231C                     _EUSART2_Write:
 12686                           	opt stack 24
 12687                           
 12688                           ;incstack = 0
 12689                           ;EUSART2_Write@txData stored from wreg
 12690  00231C  6E14               	movwf	EUSART2_Write@txData,c
 12691  00231E                     l6239:
 12692  00231E  0101               	movlb	1	; () banked
 12693  002320  51F7               	movf	_eusart2TxBufferRemaining& (0+255),w,b	;volatile
 12694  002322  B4D8               	btfsc	status,2,c
 12695  002324  D7FC               	goto	l6239
 12696                           
 12697                           ; BSR set to: 1
 12698                           ;eusart2.c: 139: }
 12699                           ;eusart2.c: 141: if(0 == PIE3bits.TX2IE)
 12700  002326  B8A3               	btfsc	4003,4,c	;volatile
 12701  002328  D003               	goto	l824
 12702                           
 12703                           ; BSR set to: 1
 12704                           ;eusart2.c: 142: {
 12705                           ;eusart2.c: 143: TXREG2 = txData;
 12706  00232A  C014  FF79         	movff	EUSART2_Write@txData,3961	;volatile
 12707                           
 12708                           ;eusart2.c: 144: }
 12709  00232E  D013               	goto	l6253
 12710  002330                     l824:
 12711                           
 12712                           ; BSR set to: 1
 12713                           ;eusart2.c: 145: else
 12714                           ;eusart2.c: 146: {
 12715                           ;eusart2.c: 147: PIE3bits.TX2IE = 0;
 12716  002330  98A3               	bcf	4003,4,c	;volatile
 12717                           
 12718                           ; BSR set to: 1
 12719                           ;eusart2.c: 148: eusart2TxBuffer[eusart2TxHead++] = txData;
 12720  002332  503D               	movf	_eusart2TxHead,w,c	;volatile
 12721  002334  0D01               	mullw	1
 12722  002336  0E38               	movlw	low _eusart2TxBuffer
 12723  002338  24F3               	addwf	prodl,w,c
 12724  00233A  6ED9               	movwf	fsr2l,c
 12725  00233C  0E01               	movlw	high _eusart2TxBuffer
 12726  00233E  20F4               	addwfc	prodh,w,c
 12727  002340  6EDA               	movwf	fsr2h,c
 12728  002342  C014  FFDF         	movff	EUSART2_Write@txData,indf2
 12729                           
 12730                           ; BSR set to: 1
 12731  002346  2A3D               	incf	_eusart2TxHead,f,c	;volatile
 12732                           
 12733                           ; BSR set to: 1
 12734                           ;eusart2.c: 149: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 12735  002348  0E07               	movlw	7
 12736  00234A  643D               	cpfsgt	_eusart2TxHead,c	;volatile
 12737  00234C  D002               	goto	l6251
 12738                           
 12739                           ; BSR set to: 1
 12740                           ;eusart2.c: 150: {
 12741                           ;eusart2.c: 151: eusart2TxHead = 0;
 12742  00234E  0E00               	movlw	0
 12743  002350  6E3D               	movwf	_eusart2TxHead,c	;volatile
 12744  002352                     l6251:
 12745                           
 12746                           ; BSR set to: 1
 12747                           ;eusart2.c: 152: }
 12748                           ;eusart2.c: 153: eusart2TxBufferRemaining--;
 12749  002352  0101               	movlb	1	; () banked
 12750  002354  07F7               	decf	_eusart2TxBufferRemaining& (0+255),f,b	;volatile
 12751  002356                     l6253:
 12752                           
 12753                           ; BSR set to: 1
 12754                           ;eusart2.c: 154: }
 12755                           ;eusart2.c: 155: PIE3bits.TX2IE = 1;
 12756  002356  88A3               	bsf	4003,4,c	;volatile
 12757                           
 12758                           ; BSR set to: 1
 12759  002358  0012               	return		;funcret
 12760  00235A                     __end_of_EUSART2_Write:
 12761                           	opt stack 0
 12762                           tblptru	equ	0xFF8
 12763                           tblptrh	equ	0xFF7
 12764                           tblptrl	equ	0xFF6
 12765                           tablat	equ	0xFF5
 12766                           prodh	equ	0xFF4
 12767                           prodl	equ	0xFF3
 12768                           intcon	equ	0xFF2
 12769                           intcon2	equ	0xFF1
 12770                           intcon3	equ	0xFF0
 12771                           indf0	equ	0xFEF
 12772                           postinc0	equ	0xFEE
 12773                           fsr0h	equ	0xFEA
 12774                           fsr0l	equ	0xFE9
 12775                           wreg	equ	0xFE8
 12776                           postdec1	equ	0xFE5
 12777                           fsr1l	equ	0xFE1
 12778                           indf2	equ	0xFDF
 12779                           postinc2	equ	0xFDE
 12780                           postdec2	equ	0xFDD
 12781                           fsr2h	equ	0xFDA
 12782                           fsr2l	equ	0xFD9
 12783                           status	equ	0xFD8
 12784                           
 12785 ;; *************** function _Read_Battery_Percent *****************
 12786 ;; Defined at:
 12787 ;;		line 16 in file "battery_control.c"
 12788 ;; Parameters:    Size  Location     Type
 12789 ;;		None
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;  BatteryPerce    1    7[BANK0 ] unsigned char 
 12792 ;; Return value:  Size  Location     Type
 12793 ;;                  1    wreg      unsigned char 
 12794 ;; Registers used:
 12795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12796 ;; Tracked objects:
 12797 ;;		On entry : 0/0
 12798 ;;		On exit  : 0/0
 12799 ;;		Unchanged: 0/0
 12800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12804 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12805 ;;Total ram usage:        1 bytes
 12806 ;; Hardware stack levels used:    1
 12807 ;; Hardware stack levels required when called:    7
 12808 ;; This function calls:
 12809 ;;		_I2C_Read
 12810 ;; This function is called by:
 12811 ;;		_main
 12812 ;;		_Battery_Check
 12813 ;;		_MAX17048_Communication
 12814 ;; This function uses a non-reentrant model
 12815 ;;
 12816                           
 12817                           	psect	text73
 12818  0028CE                     __ptext73:
 12819                           	opt stack 0
 12820  0028CE                     _Read_Battery_Percent:
 12821                           	opt stack 23
 12822                           
 12823                           ;battery_control.c: 18: uint8_t BatteryPercent = 0;
 12824                           
 12825                           ; BSR set to: 1
 12826                           ;incstack = 0
 12827  0028CE  0E00               	movlw	0
 12828  0028D0  0100               	movlb	0	; () banked
 12829  0028D2  6F67               	movwf	Read_Battery_Percent@BatteryPercent& (0+255),b
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;battery_control.c: 21: BatteryPercent = I2C_Read(0b0110110, 0x04);
 12833  0028D4  0E04               	movlw	4
 12834  0028D6  6E1D               	movwf	I2C_Read@Register,c
 12835  0028D8  0E36               	movlw	54
 12836  0028DA  EC88  F00C         	call	_I2C_Read
 12837  0028DE  0100               	movlb	0	; () banked
 12838  0028E0  6F67               	movwf	Read_Battery_Percent@BatteryPercent& (0+255),b
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;battery_control.c: 23: return BatteryPercent;
 12842  0028E2  0100               	movlb	0	; () banked
 12843  0028E4  5167               	movf	Read_Battery_Percent@BatteryPercent& (0+255),w,b
 12844  0028E6  0012               	return	
 12845  0028E8                     __end_of_Read_Battery_Percent:
 12846                           	opt stack 0
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           intcon	equ	0xFF2
 12854                           intcon2	equ	0xFF1
 12855                           intcon3	equ	0xFF0
 12856                           indf0	equ	0xFEF
 12857                           postinc0	equ	0xFEE
 12858                           fsr0h	equ	0xFEA
 12859                           fsr0l	equ	0xFE9
 12860                           wreg	equ	0xFE8
 12861                           postdec1	equ	0xFE5
 12862                           fsr1l	equ	0xFE1
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           fsr2h	equ	0xFDA
 12867                           fsr2l	equ	0xFD9
 12868                           status	equ	0xFD8
 12869                           
 12870 ;; *************** function _I2C_Read *****************
 12871 ;; Defined at:
 12872 ;;		line 772 in file "mcc_generated_files/i2c.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  Address         1    wreg     unsigned char 
 12875 ;;  Register        1   28[COMRAM] unsigned char 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  Address         1   29[COMRAM] unsigned char 
 12878 ;;  timeOut         2   31[COMRAM] unsigned int 
 12879 ;;  ReadData        1   33[COMRAM] unsigned char 
 12880 ;;  writeBuffer     1   30[COMRAM] unsigned char [1]
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  1    wreg      unsigned char 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12890 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12891 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12893 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12894 ;;Total ram usage:        6 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    6
 12897 ;; This function calls:
 12898 ;;		_I2C_MasterRead
 12899 ;;		_I2C_MasterWrite
 12900 ;; This function is called by:
 12901 ;;		_Read_Battery_Percent
 12902 ;;		_Read_Battery_Voltage
 12903 ;;		_Read_Battery_Register
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           	psect	text74
 12908  001910                     __ptext74:
 12909                           	opt stack 0
 12910  001910                     _I2C_Read:
 12911                           	opt stack 23
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;incstack = 0
 12915                           ;I2C_Read@Address stored from wreg
 12916  001910  6E1E               	movwf	I2C_Read@Address,c
 12917                           
 12918                           ;i2c.c: 774: uint8_t writeBuffer[1];
 12919                           ;i2c.c: 775: uint16_t timeOut;
 12920                           ;i2c.c: 776: uint8_t ReadData = 0;
 12921  001912  0E00               	movlw	0
 12922  001914  6E22               	movwf	I2C_Read@ReadData,c
 12923                           
 12924                           ;i2c.c: 779: writeBuffer[0] = Register;
 12925  001916  C01D  F01F         	movff	I2C_Read@Register,I2C_Read@writeBuffer
 12926                           
 12927                           ;i2c.c: 781: while(status != I2C_MESSAGE_FAIL)
 12928  00191A  D023               	goto	l6315
 12929  00191C                     l6299:
 12930                           
 12931                           ;i2c.c: 782: {
 12932                           ;i2c.c: 784: I2C_MasterWrite(writeBuffer, 1, Address, &status);
 12933  00191C  0E1F               	movlw	low I2C_Read@writeBuffer
 12934  00191E  0100               	movlb	0	; () banked
 12935  001920  6F60               	movwf	I2C_MasterWrite@pdata& (0+255),b
 12936  001922  0E00               	movlw	high I2C_Read@writeBuffer
 12937  001924  0100               	movlb	0	; () banked
 12938  001926  6F61               	movwf	(I2C_MasterWrite@pdata+1)& (0+255),b
 12939  001928  0E01               	movlw	1
 12940  00192A  0100               	movlb	0	; () banked
 12941  00192C  6F62               	movwf	I2C_MasterWrite@length& (0+255),b
 12942  00192E  C01E  F063         	movff	I2C_Read@Address,I2C_MasterWrite@address
 12943  001932  0100               	movlb	0	; () banked
 12944  001934  6B64               	clrf	(I2C_MasterWrite@address+1)& (0+255),b
 12945  001936  0E47               	movlw	low _status
 12946  001938  0100               	movlb	0	; () banked
 12947  00193A  6F65               	movwf	I2C_MasterWrite@pflag& (0+255),b
 12948  00193C  0E00               	movlw	high _status
 12949  00193E  0100               	movlb	0	; () banked
 12950  001940  6F66               	movwf	(I2C_MasterWrite@pflag+1)& (0+255),b
 12951  001942  ECF2  F00F         	call	_I2C_MasterWrite	;wreg free
 12952  001946                     l6301:
 12953  001946  0E02               	movlw	2
 12954  001948  1847               	xorwf	_status,w,c
 12955  00194A  B4D8               	btfsc	status,2,c
 12956  00194C  D7FC               	goto	l6301
 12957                           
 12958                           ;i2c.c: 789: if (status == I2C_MESSAGE_COMPLETE)
 12959  00194E  5047               	movf	_status,w,c
 12960  001950  B4D8               	btfsc	status,2,c
 12961  001952  D00A               	goto	l6317
 12962                           
 12963                           ;i2c.c: 799: if (timeOut == 25)
 12964                           
 12965                           ;i2c.c: 790: break;
 12966  001954  0E19               	movlw	25
 12967  001956  1820               	xorwf	I2C_Read@timeOut,w,c
 12968  001958  1021               	iorwf	I2C_Read@timeOut+1,w,c
 12969  00195A  B4D8               	btfsc	status,2,c
 12970  00195C  D005               	goto	l6317
 12971                           
 12972                           ;i2c.c: 801: else
 12973                           ;i2c.c: 802: timeOut++;
 12974                           
 12975                           ;i2c.c: 800: break;
 12976  00195E  4A20               	infsnz	I2C_Read@timeOut,f,c
 12977  001960  2A21               	incf	I2C_Read@timeOut+1,f,c
 12978  001962                     l6315:
 12979  001962  0447               	decf	_status,w,c
 12980  001964  A4D8               	btfss	status,2,c
 12981  001966  D7DA               	goto	l6299
 12982  001968                     l6317:
 12983                           
 12984                           ;i2c.c: 803: }
 12985                           ;i2c.c: 805: if (status == I2C_MESSAGE_COMPLETE)
 12986  001968  5047               	movf	_status,w,c
 12987  00196A  A4D8               	btfss	status,2,c
 12988  00196C  D02B               	goto	l6339
 12989                           
 12990                           ;i2c.c: 806: {
 12991                           ;i2c.c: 809: timeOut = 0;
 12992  00196E  0E00               	movlw	0
 12993  001970  6E21               	movwf	I2C_Read@timeOut+1,c
 12994  001972  0E00               	movlw	0
 12995  001974  6E20               	movwf	I2C_Read@timeOut,c
 12996                           
 12997                           ;i2c.c: 810: while(status != I2C_MESSAGE_FAIL)
 12998  001976  D023               	goto	l6337
 12999  001978                     l6321:
 13000                           
 13001                           ;i2c.c: 811: {
 13002                           ;i2c.c: 813: I2C_MasterRead(&ReadData, 1, Address, &status);
 13003  001978  0E22               	movlw	low I2C_Read@ReadData
 13004  00197A  0100               	movlb	0	; () banked
 13005  00197C  6F60               	movwf	I2C_MasterRead@pdata& (0+255),b
 13006  00197E  0E00               	movlw	high I2C_Read@ReadData
 13007  001980  0100               	movlb	0	; () banked
 13008  001982  6F61               	movwf	(I2C_MasterRead@pdata+1)& (0+255),b
 13009  001984  0E01               	movlw	1
 13010  001986  0100               	movlb	0	; () banked
 13011  001988  6F62               	movwf	I2C_MasterRead@length& (0+255),b
 13012  00198A  C01E  F063         	movff	I2C_Read@Address,I2C_MasterRead@address
 13013  00198E  0100               	movlb	0	; () banked
 13014  001990  6B64               	clrf	(I2C_MasterRead@address+1)& (0+255),b
 13015  001992  0E47               	movlw	low _status
 13016  001994  0100               	movlb	0	; () banked
 13017  001996  6F65               	movwf	I2C_MasterRead@pflag& (0+255),b
 13018  001998  0E00               	movlw	high _status
 13019  00199A  0100               	movlb	0	; () banked
 13020  00199C  6F66               	movwf	(I2C_MasterRead@pflag+1)& (0+255),b
 13021  00199E  EC18  F010         	call	_I2C_MasterRead	;wreg free
 13022  0019A2                     l6323:
 13023  0019A2  0E02               	movlw	2
 13024  0019A4  1847               	xorwf	_status,w,c
 13025  0019A6  B4D8               	btfsc	status,2,c
 13026  0019A8  D7FC               	goto	l6323
 13027                           
 13028                           ;i2c.c: 818: if (status == I2C_MESSAGE_COMPLETE)
 13029  0019AA  5047               	movf	_status,w,c
 13030  0019AC  B4D8               	btfsc	status,2,c
 13031  0019AE  D00A               	goto	l6339
 13032                           
 13033                           ;i2c.c: 828: if (timeOut == 25)
 13034                           
 13035                           ;i2c.c: 819: break;
 13036  0019B0  0E19               	movlw	25
 13037  0019B2  1820               	xorwf	I2C_Read@timeOut,w,c
 13038  0019B4  1021               	iorwf	I2C_Read@timeOut+1,w,c
 13039  0019B6  B4D8               	btfsc	status,2,c
 13040  0019B8  D005               	goto	l6339
 13041                           
 13042                           ;i2c.c: 830: else
 13043                           ;i2c.c: 831: timeOut++;
 13044                           
 13045                           ;i2c.c: 829: break;
 13046  0019BA  4A20               	infsnz	I2C_Read@timeOut,f,c
 13047  0019BC  2A21               	incf	I2C_Read@timeOut+1,f,c
 13048  0019BE                     l6337:
 13049  0019BE  0447               	decf	_status,w,c
 13050  0019C0  A4D8               	btfss	status,2,c
 13051  0019C2  D7DA               	goto	l6321
 13052  0019C4                     l6339:
 13053                           
 13054                           ;i2c.c: 832: }
 13055                           ;i2c.c: 833: }
 13056                           ;i2c.c: 835: return ReadData;
 13057  0019C4  5022               	movf	I2C_Read@ReadData,w,c
 13058  0019C6  0012               	return	
 13059  0019C8                     __end_of_I2C_Read:
 13060                           	opt stack 0
 13061                           tblptru	equ	0xFF8
 13062                           tblptrh	equ	0xFF7
 13063                           tblptrl	equ	0xFF6
 13064                           tablat	equ	0xFF5
 13065                           prodh	equ	0xFF4
 13066                           prodl	equ	0xFF3
 13067                           intcon	equ	0xFF2
 13068                           intcon2	equ	0xFF1
 13069                           intcon3	equ	0xFF0
 13070                           indf0	equ	0xFEF
 13071                           postinc0	equ	0xFEE
 13072                           fsr0h	equ	0xFEA
 13073                           fsr0l	equ	0xFE9
 13074                           wreg	equ	0xFE8
 13075                           postdec1	equ	0xFE5
 13076                           fsr1l	equ	0xFE1
 13077                           indf2	equ	0xFDF
 13078                           postinc2	equ	0xFDE
 13079                           postdec2	equ	0xFDD
 13080                           fsr2h	equ	0xFDA
 13081                           fsr2l	equ	0xFD9
 13082                           status	equ	0xFD8
 13083                           
 13084 ;; *************** function _I2C_MasterWrite *****************
 13085 ;; Defined at:
 13086 ;;		line 596 in file "mcc_generated_files/i2c.c"
 13087 ;; Parameters:    Size  Location     Type
 13088 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
 13089 ;;		 -> MAX17048_Communication@i2c_data(2), TAS2521_Communication@i2c_data(2), I2C_Read@writeBuffer(1), I2C_Write@writeB
      +uffer(2), 
 13090 ;;  length          1    2[BANK0 ] unsigned char 
 13091 ;;  address         2    3[BANK0 ] unsigned int 
 13092 ;;  pflag           2    5[BANK0 ] PTR enum E17875
 13093 ;;		 -> status(1), 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;		None
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13105 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13108 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13109 ;;Total ram usage:        7 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    5
 13112 ;; This function calls:
 13113 ;;		_I2C_MasterTRBInsert
 13114 ;;		_I2C_MasterWriteTRBBuild
 13115 ;; This function is called by:
 13116 ;;		_I2C_Write
 13117 ;;		_I2C_Read
 13118 ;;		_TAS2521_Communication
 13119 ;;		_MAX17048_Communication
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           	psect	text75
 13124  001FE4                     __ptext75:
 13125                           	opt stack 0
 13126  001FE4                     _I2C_MasterWrite:
 13127                           	opt stack 22
 13128                           
 13129                           ;i2c.c: 602: static I2C_TRANSACTION_REQUEST_BLOCK trBlock;
 13130                           ;i2c.c: 605: if (i2c_object.trStatus.s.full != 1)
 13131                           
 13132                           ;incstack = 0
 13133  001FE4  0100               	movlb	0	; () banked
 13134  001FE6  B1AF               	btfsc	(_i2c_object+4)& (0+255),0,b
 13135  001FE8  D01C               	goto	l6205
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;i2c.c: 606: {
 13139                           ;i2c.c: 607: I2C_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 13140  001FEA  0EC7               	movlw	low I2C_MasterWrite@trBlock
 13141  001FEC  6E14               	movwf	I2C_MasterWriteTRBBuild@ptrb,c
 13142  001FEE  0E01               	movlw	high I2C_MasterWrite@trBlock
 13143  001FF0  6E15               	movwf	I2C_MasterWriteTRBBuild@ptrb+1,c
 13144  001FF2  C060  F016         	movff	I2C_MasterWrite@pdata,I2C_MasterWriteTRBBuild@pdata
 13145  001FF6  C061  F017         	movff	I2C_MasterWrite@pdata+1,I2C_MasterWriteTRBBuild@pdata+1
 13146  001FFA  C062  F018         	movff	I2C_MasterWrite@length,I2C_MasterWriteTRBBuild@length
 13147  001FFE  C063  F019         	movff	I2C_MasterWrite@address,I2C_MasterWriteTRBBuild@address
 13148  002002  C064  F01A         	movff	I2C_MasterWrite@address+1,I2C_MasterWriteTRBBuild@address+1
 13149  002006  ECCB  F010         	call	_I2C_MasterWriteTRBBuild	;wreg free
 13150                           
 13151                           ;i2c.c: 608: I2C_MasterTRBInsert(1, &trBlock, pflag);
 13152  00200A  0EC7               	movlw	low I2C_MasterWrite@trBlock
 13153  00200C  6E14               	movwf	I2C_MasterTRBInsert@ptrb_list,c
 13154  00200E  0E01               	movlw	high I2C_MasterWrite@trBlock
 13155  002010  6E15               	movwf	I2C_MasterTRBInsert@ptrb_list+1,c
 13156  002012  C065  F016         	movff	I2C_MasterWrite@pflag,I2C_MasterTRBInsert@pflag
 13157  002016  C066  F017         	movff	I2C_MasterWrite@pflag+1,I2C_MasterTRBInsert@pflag+1
 13158  00201A  0E01               	movlw	1
 13159  00201C  ECCF  F00B         	call	_I2C_MasterTRBInsert
 13160                           
 13161                           ;i2c.c: 609: }
 13162  002020  0012               	return	
 13163  002022                     l6205:
 13164                           
 13165                           ;i2c.c: 610: else
 13166                           ;i2c.c: 611: {
 13167                           ;i2c.c: 612: *pflag = I2C_MESSAGE_FAIL;
 13168  002022  C065  FFD9         	movff	I2C_MasterWrite@pflag,fsr2l
 13169  002026  C066  FFDA         	movff	I2C_MasterWrite@pflag+1,fsr2h
 13170  00202A  0E01               	movlw	1
 13171  00202C  6EDF               	movwf	indf2,c
 13172  00202E  0012               	return	
 13173  002030                     __end_of_I2C_MasterWrite:
 13174                           	opt stack 0
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           intcon2	equ	0xFF1
 13183                           intcon3	equ	0xFF0
 13184                           indf0	equ	0xFEF
 13185                           postinc0	equ	0xFEE
 13186                           fsr0h	equ	0xFEA
 13187                           fsr0l	equ	0xFE9
 13188                           wreg	equ	0xFE8
 13189                           postdec1	equ	0xFE5
 13190                           fsr1l	equ	0xFE1
 13191                           indf2	equ	0xFDF
 13192                           postinc2	equ	0xFDE
 13193                           postdec2	equ	0xFDD
 13194                           fsr2h	equ	0xFDA
 13195                           fsr2l	equ	0xFD9
 13196                           status	equ	0xFD8
 13197                           
 13198 ;; *************** function _I2C_MasterWriteTRBBuild *****************
 13199 ;; Defined at:
 13200 ;;		line 705 in file "mcc_generated_files/i2c.c"
 13201 ;; Parameters:    Size  Location     Type
 13202 ;;  ptrb            2   19[COMRAM] PTR struct .
 13203 ;;		 -> I2C_MasterWrite@trBlock(5), 
 13204 ;;  pdata           2   21[COMRAM] PTR unsigned char 
 13205 ;;		 -> MAX17048_Communication@i2c_data(2), TAS2521_Communication@i2c_data(2), I2C_Read@writeBuffer(1), I2C_Write@writeB
      +uffer(2), 
 13206 ;;  length          1   23[COMRAM] unsigned char 
 13207 ;;  address         2   24[COMRAM] unsigned int 
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;		None
 13210 ;; Return value:  Size  Location     Type
 13211 ;;                  1    wreg      void 
 13212 ;; Registers used:
 13213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13214 ;; Tracked objects:
 13215 ;;		On entry : 0/0
 13216 ;;		On exit  : 0/0
 13217 ;;		Unchanged: 0/0
 13218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13219 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13222 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13223 ;;Total ram usage:        9 bytes
 13224 ;; Hardware stack levels used:    1
 13225 ;; Hardware stack levels required when called:    4
 13226 ;; This function calls:
 13227 ;;		Nothing
 13228 ;; This function is called by:
 13229 ;;		_I2C_MasterWrite
 13230 ;; This function uses a non-reentrant model
 13231 ;;
 13232                           
 13233                           	psect	text76
 13234  002196                     __ptext76:
 13235                           	opt stack 0
 13236  002196                     _I2C_MasterWriteTRBBuild:
 13237                           	opt stack 22
 13238                           
 13239                           ;i2c.c: 711: ptrb->address = address << 1;
 13240                           
 13241                           ;incstack = 0
 13242  002196  C019  F01B         	movff	I2C_MasterWriteTRBBuild@address,??_I2C_MasterWriteTRBBuild
 13243  00219A  C01A  F01C         	movff	I2C_MasterWriteTRBBuild@address+1,??_I2C_MasterWriteTRBBuild+1
 13244  00219E  90D8               	bcf	status,0,c
 13245  0021A0  361B               	rlcf	??_I2C_MasterWriteTRBBuild,f,c
 13246  0021A2  361C               	rlcf	??_I2C_MasterWriteTRBBuild+1,f,c
 13247  0021A4  C014  FFD9         	movff	I2C_MasterWriteTRBBuild@ptrb,fsr2l
 13248  0021A8  C015  FFDA         	movff	I2C_MasterWriteTRBBuild@ptrb+1,fsr2h
 13249  0021AC  C01B  FFDE         	movff	??_I2C_MasterWriteTRBBuild,postinc2
 13250  0021B0  C01C  FFDD         	movff	??_I2C_MasterWriteTRBBuild+1,postdec2
 13251                           
 13252                           ;i2c.c: 712: ptrb->length = length;
 13253  0021B4  EE20 F002          	lfsr	2,2
 13254  0021B8  5014               	movf	I2C_MasterWriteTRBBuild@ptrb,w,c
 13255  0021BA  26D9               	addwf	fsr2l,f,c
 13256  0021BC  5015               	movf	I2C_MasterWriteTRBBuild@ptrb+1,w,c
 13257  0021BE  22DA               	addwfc	fsr2h,f,c
 13258  0021C0  C018  FFDF         	movff	I2C_MasterWriteTRBBuild@length,indf2
 13259                           
 13260                           ;i2c.c: 713: ptrb->pbuffer = pdata;
 13261  0021C4  EE20 F003          	lfsr	2,3
 13262  0021C8  5014               	movf	I2C_MasterWriteTRBBuild@ptrb,w,c
 13263  0021CA  26D9               	addwf	fsr2l,f,c
 13264  0021CC  5015               	movf	I2C_MasterWriteTRBBuild@ptrb+1,w,c
 13265  0021CE  22DA               	addwfc	fsr2h,f,c
 13266  0021D0  C016  FFDE         	movff	I2C_MasterWriteTRBBuild@pdata,postinc2
 13267  0021D4  C017  FFDD         	movff	I2C_MasterWriteTRBBuild@pdata+1,postdec2
 13268  0021D8  0012               	return		;funcret
 13269  0021DA                     __end_of_I2C_MasterWriteTRBBuild:
 13270                           	opt stack 0
 13271                           tblptru	equ	0xFF8
 13272                           tblptrh	equ	0xFF7
 13273                           tblptrl	equ	0xFF6
 13274                           tablat	equ	0xFF5
 13275                           prodh	equ	0xFF4
 13276                           prodl	equ	0xFF3
 13277                           intcon	equ	0xFF2
 13278                           intcon2	equ	0xFF1
 13279                           intcon3	equ	0xFF0
 13280                           indf0	equ	0xFEF
 13281                           postinc0	equ	0xFEE
 13282                           fsr0h	equ	0xFEA
 13283                           fsr0l	equ	0xFE9
 13284                           wreg	equ	0xFE8
 13285                           postdec1	equ	0xFE5
 13286                           fsr1l	equ	0xFE1
 13287                           indf2	equ	0xFDF
 13288                           postinc2	equ	0xFDE
 13289                           postdec2	equ	0xFDD
 13290                           fsr2h	equ	0xFDA
 13291                           fsr2l	equ	0xFD9
 13292                           status	equ	0xFD8
 13293                           
 13294 ;; *************** function _I2C_MasterRead *****************
 13295 ;; Defined at:
 13296 ;;		line 617 in file "mcc_generated_files/i2c.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
 13299 ;;		 -> I2C_Read@ReadData(1), 
 13300 ;;  length          1    2[BANK0 ] unsigned char 
 13301 ;;  address         2    3[BANK0 ] unsigned int 
 13302 ;;  pflag           2    5[BANK0 ] PTR enum E17875
 13303 ;;		 -> status(1), 
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;		None
 13306 ;; Return value:  Size  Location     Type
 13307 ;;                  1    wreg      void 
 13308 ;; Registers used:
 13309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13310 ;; Tracked objects:
 13311 ;;		On entry : 0/0
 13312 ;;		On exit  : 0/0
 13313 ;;		Unchanged: 0/0
 13314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13315 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13318 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13319 ;;Total ram usage:        7 bytes
 13320 ;; Hardware stack levels used:    1
 13321 ;; Hardware stack levels required when called:    5
 13322 ;; This function calls:
 13323 ;;		_I2C_MasterReadTRBBuild
 13324 ;;		_I2C_MasterTRBInsert
 13325 ;; This function is called by:
 13326 ;;		_I2C_Read
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           	psect	text77
 13331  002030                     __ptext77:
 13332                           	opt stack 0
 13333  002030                     _I2C_MasterRead:
 13334                           	opt stack 23
 13335                           
 13336                           ;i2c.c: 623: static I2C_TRANSACTION_REQUEST_BLOCK trBlock;
 13337                           ;i2c.c: 627: if (i2c_object.trStatus.s.full != 1)
 13338                           
 13339                           ;incstack = 0
 13340  002030  0100               	movlb	0	; () banked
 13341  002032  B1AF               	btfsc	(_i2c_object+4)& (0+255),0,b
 13342  002034  D01C               	goto	l6211
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;i2c.c: 628: {
 13346                           ;i2c.c: 629: I2C_MasterReadTRBBuild(&trBlock, pdata, length, address);
 13347  002036  0EC2               	movlw	low I2C_MasterRead@trBlock
 13348  002038  6E14               	movwf	I2C_MasterReadTRBBuild@ptrb,c
 13349  00203A  0E01               	movlw	high I2C_MasterRead@trBlock
 13350  00203C  6E15               	movwf	I2C_MasterReadTRBBuild@ptrb+1,c
 13351  00203E  C060  F016         	movff	I2C_MasterRead@pdata,I2C_MasterReadTRBBuild@pdata
 13352  002042  C061  F017         	movff	I2C_MasterRead@pdata+1,I2C_MasterReadTRBBuild@pdata+1
 13353  002046  C062  F018         	movff	I2C_MasterRead@length,I2C_MasterReadTRBBuild@length
 13354  00204A  C063  F019         	movff	I2C_MasterRead@address,I2C_MasterReadTRBBuild@address
 13355  00204E  C064  F01A         	movff	I2C_MasterRead@address+1,I2C_MasterReadTRBBuild@address+1
 13356  002052  ECCA  F00F         	call	_I2C_MasterReadTRBBuild	;wreg free
 13357                           
 13358                           ;i2c.c: 630: I2C_MasterTRBInsert(1, &trBlock, pflag);
 13359  002056  0EC2               	movlw	low I2C_MasterRead@trBlock
 13360  002058  6E14               	movwf	I2C_MasterTRBInsert@ptrb_list,c
 13361  00205A  0E01               	movlw	high I2C_MasterRead@trBlock
 13362  00205C  6E15               	movwf	I2C_MasterTRBInsert@ptrb_list+1,c
 13363  00205E  C065  F016         	movff	I2C_MasterRead@pflag,I2C_MasterTRBInsert@pflag
 13364  002062  C066  F017         	movff	I2C_MasterRead@pflag+1,I2C_MasterTRBInsert@pflag+1
 13365  002066  0E01               	movlw	1
 13366  002068  ECCF  F00B         	call	_I2C_MasterTRBInsert
 13367                           
 13368                           ;i2c.c: 631: }
 13369  00206C  0012               	return	
 13370  00206E                     l6211:
 13371                           
 13372                           ;i2c.c: 632: else
 13373                           ;i2c.c: 633: {
 13374                           ;i2c.c: 634: *pflag = I2C_MESSAGE_FAIL;
 13375  00206E  C065  FFD9         	movff	I2C_MasterRead@pflag,fsr2l
 13376  002072  C066  FFDA         	movff	I2C_MasterRead@pflag+1,fsr2h
 13377  002076  0E01               	movlw	1
 13378  002078  6EDF               	movwf	indf2,c
 13379  00207A  0012               	return	
 13380  00207C                     __end_of_I2C_MasterRead:
 13381                           	opt stack 0
 13382                           tblptru	equ	0xFF8
 13383                           tblptrh	equ	0xFF7
 13384                           tblptrl	equ	0xFF6
 13385                           tablat	equ	0xFF5
 13386                           prodh	equ	0xFF4
 13387                           prodl	equ	0xFF3
 13388                           intcon	equ	0xFF2
 13389                           intcon2	equ	0xFF1
 13390                           intcon3	equ	0xFF0
 13391                           indf0	equ	0xFEF
 13392                           postinc0	equ	0xFEE
 13393                           fsr0h	equ	0xFEA
 13394                           fsr0l	equ	0xFE9
 13395                           wreg	equ	0xFE8
 13396                           postdec1	equ	0xFE5
 13397                           fsr1l	equ	0xFE1
 13398                           indf2	equ	0xFDF
 13399                           postinc2	equ	0xFDE
 13400                           postdec2	equ	0xFDD
 13401                           fsr2h	equ	0xFDA
 13402                           fsr2l	equ	0xFD9
 13403                           status	equ	0xFD8
 13404                           
 13405 ;; *************** function _I2C_MasterTRBInsert *****************
 13406 ;; Defined at:
 13407 ;;		line 639 in file "mcc_generated_files/i2c.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  count           1    wreg     unsigned char 
 13410 ;;  ptrb_list       2   19[COMRAM] PTR struct .
 13411 ;;		 -> I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
 13412 ;;  pflag           2   21[COMRAM] PTR enum E17875
 13413 ;;		 -> status(1), 
 13414 ;; Auto vars:     Size  Location     Type
 13415 ;;  count           1   24[COMRAM] unsigned char 
 13416 ;; Return value:  Size  Location     Type
 13417 ;;                  1    wreg      void 
 13418 ;; Registers used:
 13419 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13420 ;; Tracked objects:
 13421 ;;		On entry : 0/0
 13422 ;;		On exit  : 0/0
 13423 ;;		Unchanged: 0/0
 13424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13428 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13429 ;;Total ram usage:        6 bytes
 13430 ;; Hardware stack levels used:    1
 13431 ;; Hardware stack levels required when called:    4
 13432 ;; This function calls:
 13433 ;;		Nothing
 13434 ;; This function is called by:
 13435 ;;		_I2C_MasterWrite
 13436 ;;		_I2C_MasterRead
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           	psect	text78
 13441  00179E                     __ptext78:
 13442                           	opt stack 0
 13443  00179E                     _I2C_MasterTRBInsert:
 13444                           	opt stack 22
 13445                           
 13446                           ;incstack = 0
 13447                           ;I2C_MasterTRBInsert@count stored from wreg
 13448  00179E  6E19               	movwf	I2C_MasterTRBInsert@count,c
 13449                           
 13450                           ;i2c.c: 646: if (i2c_object.trStatus.s.full != 1)
 13451  0017A0  0100               	movlb	0	; () banked
 13452  0017A2  B1AF               	btfsc	(_i2c_object+4)& (0+255),0,b
 13453  0017A4  D046               	goto	l6155
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;i2c.c: 647: {
 13457                           ;i2c.c: 648: *pflag = I2C_MESSAGE_PENDING;
 13458  0017A6  C016  FFD9         	movff	I2C_MasterTRBInsert@pflag,fsr2l
 13459  0017AA  C017  FFDA         	movff	I2C_MasterTRBInsert@pflag+1,fsr2h
 13460  0017AE  0E02               	movlw	2
 13461  0017B0  6EDF               	movwf	indf2,c
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;i2c.c: 650: i2c_object.pTrTail->ptrb_list = ptrb_list;
 13465  0017B2  0100               	movlb	0	; () banked
 13466  0017B4  EE20 F001          	lfsr	2,1
 13467  0017B8  51AB               	movf	_i2c_object& (0+255),w,b
 13468  0017BA  26D9               	addwf	fsr2l,f,c
 13469  0017BC  51AC               	movf	(_i2c_object+1)& (0+255),w,b
 13470  0017BE  22DA               	addwfc	fsr2h,f,c
 13471  0017C0  C014  FFDE         	movff	I2C_MasterTRBInsert@ptrb_list,postinc2
 13472  0017C4  C015  FFDD         	movff	I2C_MasterTRBInsert@ptrb_list+1,postdec2
 13473                           
 13474                           ; BSR set to: 0
 13475                           ;i2c.c: 651: i2c_object.pTrTail->count = count;
 13476  0017C8  C0AB  FFD9         	movff	_i2c_object,fsr2l
 13477  0017CC  C0AC  FFDA         	movff	_i2c_object+1,fsr2h
 13478  0017D0  C019  FFDF         	movff	I2C_MasterTRBInsert@count,indf2
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;i2c.c: 652: i2c_object.pTrTail->pTrFlag = pflag;
 13482  0017D4  0100               	movlb	0	; () banked
 13483  0017D6  EE20 F003          	lfsr	2,3
 13484  0017DA  51AB               	movf	_i2c_object& (0+255),w,b
 13485  0017DC  26D9               	addwf	fsr2l,f,c
 13486  0017DE  51AC               	movf	(_i2c_object+1)& (0+255),w,b
 13487  0017E0  22DA               	addwfc	fsr2h,f,c
 13488  0017E2  C016  FFDE         	movff	I2C_MasterTRBInsert@pflag,postinc2
 13489  0017E6  C017  FFDD         	movff	I2C_MasterTRBInsert@pflag+1,postdec2
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;i2c.c: 653: i2c_object.pTrTail++;
 13493  0017EA  0E05               	movlw	5
 13494  0017EC  0100               	movlb	0	; () banked
 13495  0017EE  27AB               	addwf	_i2c_object& (0+255),f,b
 13496  0017F0  0E00               	movlw	0
 13497  0017F2  23AC               	addwfc	(_i2c_object+1)& (0+255),f,b
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;i2c.c: 656: if (i2c_object.pTrTail == (i2c_tr_queue + 1))
 13501  0017F4  0ED1               	movlw	low (_i2c_tr_queue+5)
 13502  0017F6  0100               	movlb	0	; () banked
 13503  0017F8  19AB               	xorwf	_i2c_object& (0+255),w,b
 13504  0017FA  E10B               	bnz	l6151
 13505  0017FC  0E01               	movlw	high (_i2c_tr_queue+5)
 13506  0017FE  0100               	movlb	0	; () banked
 13507  001800  19AC               	xorwf	(_i2c_object+1)& (0+255),w,b
 13508  001802  A4D8               	btfss	status,2,c
 13509  001804  D006               	goto	l6151
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;i2c.c: 657: {
 13513                           ;i2c.c: 659: i2c_object.pTrTail = i2c_tr_queue;
 13514  001806  0ECC               	movlw	low _i2c_tr_queue
 13515  001808  0100               	movlb	0	; () banked
 13516  00180A  6FAB               	movwf	_i2c_object& (0+255),b
 13517  00180C  0E01               	movlw	high _i2c_tr_queue
 13518  00180E  0100               	movlb	0	; () banked
 13519  001810  6FAC               	movwf	(_i2c_object+1)& (0+255),b
 13520  001812                     l6151:
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;i2c.c: 660: }
 13524                           ;i2c.c: 664: i2c_object.trStatus.s.empty = 0;
 13525  001812  0100               	movlb	0	; () banked
 13526  001814  93AF               	bcf	(_i2c_object+4)& (0+255),1,b
 13527                           
 13528                           ;i2c.c: 667: if (i2c_object.pTrHead == i2c_object.pTrTail)
 13529  001816  0100               	movlb	0	; () banked
 13530  001818  51AB               	movf	_i2c_object& (0+255),w,b
 13531  00181A  0100               	movlb	0	; () banked
 13532  00181C  19AD               	xorwf	(_i2c_object+2)& (0+255),w,b
 13533  00181E  E10F               	bnz	l6157
 13534  001820  0100               	movlb	0	; () banked
 13535  001822  51AC               	movf	(_i2c_object+1)& (0+255),w,b
 13536  001824  0100               	movlb	0	; () banked
 13537  001826  19AE               	xorwf	(_i2c_object+3)& (0+255),w,b
 13538  001828  A4D8               	btfss	status,2,c
 13539  00182A  D009               	goto	l6157
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;i2c.c: 668: {
 13543                           ;i2c.c: 670: i2c_object.trStatus.s.full = 1;
 13544  00182C  0100               	movlb	0	; () banked
 13545  00182E  81AF               	bsf	(_i2c_object+4)& (0+255),0,b
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;i2c.c: 671: }
 13549                           ;i2c.c: 673: }
 13550  001830  D006               	goto	l6157
 13551  001832                     l6155:
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;i2c.c: 674: else
 13555                           ;i2c.c: 675: {
 13556                           ;i2c.c: 676: *pflag = I2C_MESSAGE_FAIL;
 13557  001832  C016  FFD9         	movff	I2C_MasterTRBInsert@pflag,fsr2l
 13558  001836  C017  FFDA         	movff	I2C_MasterTRBInsert@pflag+1,fsr2h
 13559  00183A  0E01               	movlw	1
 13560  00183C  6EDF               	movwf	indf2,c
 13561  00183E                     l6157:
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;i2c.c: 677: }
 13565                           ;i2c.c: 680: if (*pflag == I2C_MESSAGE_PENDING)
 13566  00183E  C016  FFD9         	movff	I2C_MasterTRBInsert@pflag,fsr2l
 13567  001842  C017  FFDA         	movff	I2C_MasterTRBInsert@pflag+1,fsr2h
 13568  001846  0E02               	movlw	2
 13569  001848  18DE               	xorwf	postinc2,w,c
 13570  00184A  A4D8               	btfss	status,2,c
 13571  00184C  0012               	return	
 13572  00184E                     l6161:
 13573  00184E  503F               	movf	_i2c_state,w,c
 13574  001850  A4D8               	btfss	status,2,c
 13575  001852  D7FD               	goto	l6161
 13576                           
 13577                           ;i2c.c: 683: {
 13578                           ;i2c.c: 686: PIR1bits.SSPIF = 1;
 13579  001854  869E               	bsf	3998,3,c	;volatile
 13580  001856  0012               	return	
 13581  001858                     __end_of_I2C_MasterTRBInsert:
 13582                           	opt stack 0
 13583                           tblptru	equ	0xFF8
 13584                           tblptrh	equ	0xFF7
 13585                           tblptrl	equ	0xFF6
 13586                           tablat	equ	0xFF5
 13587                           prodh	equ	0xFF4
 13588                           prodl	equ	0xFF3
 13589                           intcon	equ	0xFF2
 13590                           intcon2	equ	0xFF1
 13591                           intcon3	equ	0xFF0
 13592                           indf0	equ	0xFEF
 13593                           postinc0	equ	0xFEE
 13594                           fsr0h	equ	0xFEA
 13595                           fsr0l	equ	0xFE9
 13596                           wreg	equ	0xFE8
 13597                           postdec1	equ	0xFE5
 13598                           fsr1l	equ	0xFE1
 13599                           indf2	equ	0xFDF
 13600                           postinc2	equ	0xFDE
 13601                           postdec2	equ	0xFDD
 13602                           fsr2h	equ	0xFDA
 13603                           fsr2l	equ	0xFD9
 13604                           status	equ	0xFD8
 13605                           
 13606 ;; *************** function _I2C_MasterReadTRBBuild *****************
 13607 ;; Defined at:
 13608 ;;		line 692 in file "mcc_generated_files/i2c.c"
 13609 ;; Parameters:    Size  Location     Type
 13610 ;;  ptrb            2   19[COMRAM] PTR struct .
 13611 ;;		 -> I2C_MasterRead@trBlock(5), 
 13612 ;;  pdata           2   21[COMRAM] PTR unsigned char 
 13613 ;;		 -> I2C_Read@ReadData(1), 
 13614 ;;  length          1   23[COMRAM] unsigned char 
 13615 ;;  address         2   24[COMRAM] unsigned int 
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;		None
 13618 ;; Return value:  Size  Location     Type
 13619 ;;                  1    wreg      void 
 13620 ;; Registers used:
 13621 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13622 ;; Tracked objects:
 13623 ;;		On entry : 0/0
 13624 ;;		On exit  : 0/0
 13625 ;;		Unchanged: 0/0
 13626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13627 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13630 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13631 ;;Total ram usage:        9 bytes
 13632 ;; Hardware stack levels used:    1
 13633 ;; Hardware stack levels required when called:    4
 13634 ;; This function calls:
 13635 ;;		Nothing
 13636 ;; This function is called by:
 13637 ;;		_I2C_MasterRead
 13638 ;; This function uses a non-reentrant model
 13639 ;;
 13640                           
 13641                           	psect	text79
 13642  001F94                     __ptext79:
 13643                           	opt stack 0
 13644  001F94                     _I2C_MasterReadTRBBuild:
 13645                           	opt stack 23
 13646                           
 13647                           ;i2c.c: 698: ptrb->address = address << 1;
 13648                           
 13649                           ;incstack = 0
 13650  001F94  C019  F01B         	movff	I2C_MasterReadTRBBuild@address,??_I2C_MasterReadTRBBuild
 13651  001F98  C01A  F01C         	movff	I2C_MasterReadTRBBuild@address+1,??_I2C_MasterReadTRBBuild+1
 13652  001F9C  90D8               	bcf	status,0,c
 13653  001F9E  361B               	rlcf	??_I2C_MasterReadTRBBuild,f,c
 13654  001FA0  361C               	rlcf	??_I2C_MasterReadTRBBuild+1,f,c
 13655  001FA2  C014  FFD9         	movff	I2C_MasterReadTRBBuild@ptrb,fsr2l
 13656  001FA6  C015  FFDA         	movff	I2C_MasterReadTRBBuild@ptrb+1,fsr2h
 13657  001FAA  C01B  FFDE         	movff	??_I2C_MasterReadTRBBuild,postinc2
 13658  001FAE  C01C  FFDD         	movff	??_I2C_MasterReadTRBBuild+1,postdec2
 13659                           
 13660                           ;i2c.c: 700: ptrb->address |= 0x01;
 13661  001FB2  C014  FFD9         	movff	I2C_MasterReadTRBBuild@ptrb,fsr2l
 13662  001FB6  C015  FFDA         	movff	I2C_MasterReadTRBBuild@ptrb+1,fsr2h
 13663  001FBA  0E00               	movlw	0
 13664  001FBC  80DB               	bsf	plusw2,0,c
 13665                           
 13666                           ;i2c.c: 701: ptrb->length = length;
 13667  001FBE  EE20 F002          	lfsr	2,2
 13668  001FC2  5014               	movf	I2C_MasterReadTRBBuild@ptrb,w,c
 13669  001FC4  26D9               	addwf	fsr2l,f,c
 13670  001FC6  5015               	movf	I2C_MasterReadTRBBuild@ptrb+1,w,c
 13671  001FC8  22DA               	addwfc	fsr2h,f,c
 13672  001FCA  C018  FFDF         	movff	I2C_MasterReadTRBBuild@length,indf2
 13673                           
 13674                           ;i2c.c: 702: ptrb->pbuffer = pdata;
 13675  001FCE  EE20 F003          	lfsr	2,3
 13676  001FD2  5014               	movf	I2C_MasterReadTRBBuild@ptrb,w,c
 13677  001FD4  26D9               	addwf	fsr2l,f,c
 13678  001FD6  5015               	movf	I2C_MasterReadTRBBuild@ptrb+1,w,c
 13679  001FD8  22DA               	addwfc	fsr2h,f,c
 13680  001FDA  C016  FFDE         	movff	I2C_MasterReadTRBBuild@pdata,postinc2
 13681  001FDE  C017  FFDD         	movff	I2C_MasterReadTRBBuild@pdata+1,postdec2
 13682  001FE2  0012               	return		;funcret
 13683  001FE4                     __end_of_I2C_MasterReadTRBBuild:
 13684                           	opt stack 0
 13685                           tblptru	equ	0xFF8
 13686                           tblptrh	equ	0xFF7
 13687                           tblptrl	equ	0xFF6
 13688                           tablat	equ	0xFF5
 13689                           prodh	equ	0xFF4
 13690                           prodl	equ	0xFF3
 13691                           intcon	equ	0xFF2
 13692                           intcon2	equ	0xFF1
 13693                           intcon3	equ	0xFF0
 13694                           indf0	equ	0xFEF
 13695                           postinc0	equ	0xFEE
 13696                           fsr0h	equ	0xFEA
 13697                           fsr0l	equ	0xFE9
 13698                           wreg	equ	0xFE8
 13699                           postdec1	equ	0xFE5
 13700                           fsr1l	equ	0xFE1
 13701                           indf2	equ	0xFDF
 13702                           postinc2	equ	0xFDE
 13703                           postdec2	equ	0xFDD
 13704                           plusw2	equ	0xFDB
 13705                           fsr2h	equ	0xFDA
 13706                           fsr2l	equ	0xFD9
 13707                           status	equ	0xFD8
 13708                           
 13709 ;; *************** function _ADC_StartConversion *****************
 13710 ;; Defined at:
 13711 ;;		line 83 in file "mcc_generated_files/adc.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;  channel         1    wreg     enum E17874
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;  channel         1   20[COMRAM] enum E17874
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      void 
 13718 ;; Registers used:
 13719 ;;		wreg, status,2, status,0
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13729 ;;Total ram usage:        2 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    4
 13732 ;; This function calls:
 13733 ;;		Nothing
 13734 ;; This function is called by:
 13735 ;;		_main
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739                           	psect	text80
 13740  0028E8                     __ptext80:
 13741                           	opt stack 0
 13742  0028E8                     _ADC_StartConversion:
 13743                           	opt stack 26
 13744                           
 13745                           ;incstack = 0
 13746                           ;ADC_StartConversion@channel stored from wreg
 13747  0028E8  6E15               	movwf	ADC_StartConversion@channel,c
 13748                           
 13749                           ;adc.c: 86: ADCON0bits.CHS = channel;
 13750  0028EA  C015  F014         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 13751  0028EE  4614               	rlncf	??_ADC_StartConversion,f,c
 13752  0028F0  4614               	rlncf	??_ADC_StartConversion,f,c
 13753  0028F2  50C2               	movf	4034,w,c	;volatile
 13754  0028F4  1814               	xorwf	??_ADC_StartConversion,w,c
 13755  0028F6  0B83               	andlw	-125
 13756  0028F8  1814               	xorwf	??_ADC_StartConversion,w,c
 13757  0028FA  6EC2               	movwf	4034,c	;volatile
 13758                           
 13759                           ;adc.c: 89: ADCON0bits.ADON = 1;
 13760  0028FC  80C2               	bsf	4034,0,c	;volatile
 13761                           
 13762                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
 13763  0028FE  82C2               	bsf	4034,1,c	;volatile
 13764  002900  0012               	return		;funcret
 13765  002902                     __end_of_ADC_StartConversion:
 13766                           	opt stack 0
 13767                           tblptru	equ	0xFF8
 13768                           tblptrh	equ	0xFF7
 13769                           tblptrl	equ	0xFF6
 13770                           tablat	equ	0xFF5
 13771                           prodh	equ	0xFF4
 13772                           prodl	equ	0xFF3
 13773                           intcon	equ	0xFF2
 13774                           intcon2	equ	0xFF1
 13775                           intcon3	equ	0xFF0
 13776                           indf0	equ	0xFEF
 13777                           postinc0	equ	0xFEE
 13778                           fsr0h	equ	0xFEA
 13779                           fsr0l	equ	0xFE9
 13780                           wreg	equ	0xFE8
 13781                           postdec1	equ	0xFE5
 13782                           fsr1l	equ	0xFE1
 13783                           indf2	equ	0xFDF
 13784                           postinc2	equ	0xFDE
 13785                           postdec2	equ	0xFDD
 13786                           plusw2	equ	0xFDB
 13787                           fsr2h	equ	0xFDA
 13788                           fsr2l	equ	0xFD9
 13789                           status	equ	0xFD8
 13790                           
 13791 ;; *************** function _INTERRUPT_InterruptManager *****************
 13792 ;; Defined at:
 13793 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;		None
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;		None
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13809 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13810 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13811 ;;Total ram usage:       14 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    3
 13814 ;; This function calls:
 13815 ;;		_ADC_ISR
 13816 ;;		_EUSART1_Receive_ISR
 13817 ;;		_EUSART1_Transmit_ISR
 13818 ;;		_EUSART2_Receive_ISR
 13819 ;;		_EUSART2_Transmit_ISR
 13820 ;;		_I2C_BusCollisionISR
 13821 ;;		_I2C_ISR
 13822 ;;		_INT3_ISR
 13823 ;;		_TMR1_ISR
 13824 ;;		_TMR3_ISR
 13825 ;; This function is called by:
 13826 ;;		Interrupt level 2
 13827 ;; This function uses a non-reentrant model
 13828 ;;
 13829                           
 13830                           	psect	intcode
 13831  000008                     __pintcode:
 13832                           	opt stack 0
 13833  000008                     _INTERRUPT_InterruptManager:
 13834                           	opt stack 20
 13835                           
 13836                           ;incstack = 0
 13837  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13838  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 13839  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 13840  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 13841  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 13842  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 13843  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 13844  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 13845  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 13846  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 13847  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 13848  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 13849  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 13850  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 13851  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 13852                           
 13853                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
 13854  000042  BCF2               	btfsc	intcon,6,c	;volatile
 13855  000044  AC9D               	btfss	3997,6,c	;volatile
 13856  000046  D005               	goto	i2l230
 13857  000048  AC9E               	btfss	3998,6,c	;volatile
 13858  00004A  D003               	goto	i2l230
 13859                           
 13860                           ;interrupt_manager.c: 61: {
 13861                           ;interrupt_manager.c: 62: ADC_ISR();
 13862  00004C  EC9A  F014         	call	_ADC_ISR	;wreg free
 13863                           
 13864                           ;interrupt_manager.c: 63: }
 13865  000050  D044               	goto	i2l250
 13866  000052                     i2l230:
 13867                           
 13868                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE2bits.BCLIE == 1 && PIR2bit
      +                          s.BCLIF == 1)
 13869  000052  BCF2               	btfsc	intcon,6,c	;volatile
 13870  000054  A6A0               	btfss	4000,3,c	;volatile
 13871  000056  D005               	goto	i2l232
 13872  000058  A6A1               	btfss	4001,3,c	;volatile
 13873  00005A  D003               	goto	i2l232
 13874                           
 13875                           ;interrupt_manager.c: 65: {
 13876                           ;interrupt_manager.c: 66: I2C_BusCollisionISR();
 13877  00005C  EC18  F015         	call	_I2C_BusCollisionISR	;wreg free
 13878                           
 13879                           ;interrupt_manager.c: 67: }
 13880  000060  D03C               	goto	i2l250
 13881  000062                     i2l232:
 13882                           
 13883                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bit
      +                          s.SSPIF == 1)
 13884  000062  BCF2               	btfsc	intcon,6,c	;volatile
 13885  000064  A69D               	btfss	3997,3,c	;volatile
 13886  000066  D005               	goto	i2l234
 13887  000068  A69E               	btfss	3998,3,c	;volatile
 13888  00006A  D003               	goto	i2l234
 13889                           
 13890                           ;interrupt_manager.c: 69: {
 13891                           ;interrupt_manager.c: 70: I2C_ISR();
 13892  00006C  EC88  F004         	call	_I2C_ISR	;wreg free
 13893                           
 13894                           ;interrupt_manager.c: 71: }
 13895  000070  D034               	goto	i2l250
 13896  000072                     i2l234:
 13897                           
 13898                           ;interrupt_manager.c: 72: else if(INTCON3bits.INT3IE == 1 && INTCON3bits.INT3IF == 1)
 13899  000072  BAF0               	btfsc	intcon3,5,c	;volatile
 13900  000074  A4F0               	btfss	intcon3,2,c	;volatile
 13901  000076  D003               	goto	i2l236
 13902                           
 13903                           ;interrupt_manager.c: 73: {
 13904                           ;interrupt_manager.c: 74: INT3_ISR();
 13905  000078  ECD2  F014         	call	_INT3_ISR	;wreg free
 13906                           
 13907                           ;interrupt_manager.c: 75: }
 13908  00007C  D02E               	goto	i2l250
 13909  00007E                     i2l236:
 13910                           
 13911                           ;interrupt_manager.c: 76: else if(INTCONbits.PEIE == 1 && PIE3bits.TX2IE == 1 && PIR3bit
      +                          s.TX2IF == 1)
 13912  00007E  BCF2               	btfsc	intcon,6,c	;volatile
 13913  000080  A8A3               	btfss	4003,4,c	;volatile
 13914  000082  D005               	goto	i2l238
 13915  000084  A8A4               	btfss	4004,4,c	;volatile
 13916  000086  D003               	goto	i2l238
 13917                           
 13918                           ;interrupt_manager.c: 77: {
 13919                           ;interrupt_manager.c: 78: EUSART2_Transmit_ISR();
 13920  000088  ECDD  F012         	call	_EUSART2_Transmit_ISR	;wreg free
 13921                           
 13922                           ;interrupt_manager.c: 79: }
 13923  00008C  D026               	goto	i2l250
 13924  00008E                     i2l238:
 13925                           
 13926                           ;interrupt_manager.c: 80: else if(INTCONbits.PEIE == 1 && PIE3bits.RC2IE == 1 && PIR3bit
      +                          s.RC2IF == 1)
 13927  00008E  BCF2               	btfsc	intcon,6,c	;volatile
 13928  000090  AAA3               	btfss	4003,5,c	;volatile
 13929  000092  D005               	goto	i2l240
 13930  000094  AAA4               	btfss	4004,5,c	;volatile
 13931  000096  D003               	goto	i2l240
 13932                           
 13933                           ;interrupt_manager.c: 81: {
 13934                           ;interrupt_manager.c: 82: EUSART2_Receive_ISR();
 13935  000098  EC9A  F013         	call	_EUSART2_Receive_ISR	;wreg free
 13936                           
 13937                           ;interrupt_manager.c: 83: }
 13938  00009C  D01E               	goto	i2l250
 13939  00009E                     i2l240:
 13940                           
 13941                           ;interrupt_manager.c: 84: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 13942  00009E  BCF2               	btfsc	intcon,6,c	;volatile
 13943  0000A0  A89D               	btfss	3997,4,c	;volatile
 13944  0000A2  D005               	goto	i2l242
 13945  0000A4  A89E               	btfss	3998,4,c	;volatile
 13946  0000A6  D003               	goto	i2l242
 13947                           
 13948                           ;interrupt_manager.c: 85: {
 13949                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 13950  0000A8  ECF6  F012         	call	_EUSART1_Transmit_ISR	;wreg free
 13951                           
 13952                           ;interrupt_manager.c: 87: }
 13953  0000AC  D016               	goto	i2l250
 13954  0000AE                     i2l242:
 13955                           
 13956                           ;interrupt_manager.c: 88: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 13957  0000AE  BCF2               	btfsc	intcon,6,c	;volatile
 13958  0000B0  AA9D               	btfss	3997,5,c	;volatile
 13959  0000B2  D005               	goto	i2l244
 13960  0000B4  AA9E               	btfss	3998,5,c	;volatile
 13961  0000B6  D003               	goto	i2l244
 13962                           
 13963                           ;interrupt_manager.c: 89: {
 13964                           ;interrupt_manager.c: 90: EUSART1_Receive_ISR();
 13965  0000B8  ECB0  F013         	call	_EUSART1_Receive_ISR	;wreg free
 13966                           
 13967                           ;interrupt_manager.c: 91: }
 13968  0000BC  D00E               	goto	i2l250
 13969  0000BE                     i2l244:
 13970                           
 13971                           ;interrupt_manager.c: 92: else if(INTCONbits.PEIE == 1 && PIE2bits.TMR3IE == 1 && PIR2bi
      +                          ts.TMR3IF == 1)
 13972  0000BE  BCF2               	btfsc	intcon,6,c	;volatile
 13973  0000C0  A2A0               	btfss	4000,1,c	;volatile
 13974  0000C2  D005               	goto	i2l246
 13975  0000C4  A2A1               	btfss	4001,1,c	;volatile
 13976  0000C6  D003               	goto	i2l246
 13977                           
 13978                           ;interrupt_manager.c: 93: {
 13979                           ;interrupt_manager.c: 94: TMR3_ISR();
 13980  0000C8  EC27  F013         	call	_TMR3_ISR	;wreg free
 13981                           
 13982                           ;interrupt_manager.c: 95: }
 13983  0000CC  D006               	goto	i2l250
 13984  0000CE                     i2l246:
 13985                           
 13986                           ;interrupt_manager.c: 96: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 13987  0000CE  BCF2               	btfsc	intcon,6,c	;volatile
 13988  0000D0  A09D               	btfss	3997,0,c	;volatile
 13989  0000D2  D003               	goto	i2l250
 13990  0000D4  B09E               	btfsc	3998,0,c	;volatile
 13991                           
 13992                           ;interrupt_manager.c: 97: {
 13993                           ;interrupt_manager.c: 98: TMR1_ISR();
 13994  0000D6  EC3F  F013         	call	_TMR1_ISR	;wreg free
 13995  0000DA                     i2l250:
 13996  0000DA  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 13997  0000DE  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 13998  0000E2  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 13999  0000E6  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14000  0000EA  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14001  0000EE  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14002  0000F2  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14003  0000F6  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14004  0000FA  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14005  0000FE  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14006  000102  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14007  000106  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14008  00010A  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14009  00010E  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14010  000112  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14011  000114  0011               	retfie		f
 14012  000116                     __end_of_INTERRUPT_InterruptManager:
 14013                           	opt stack 0
 14014                           pclatu	equ	0xFFB
 14015                           pclath	equ	0xFFA
 14016                           tblptru	equ	0xFF8
 14017                           tblptrh	equ	0xFF7
 14018                           tblptrl	equ	0xFF6
 14019                           tablat	equ	0xFF5
 14020                           prodh	equ	0xFF4
 14021                           prodl	equ	0xFF3
 14022                           intcon	equ	0xFF2
 14023                           intcon2	equ	0xFF1
 14024                           intcon3	equ	0xFF0
 14025                           indf0	equ	0xFEF
 14026                           postinc0	equ	0xFEE
 14027                           fsr0h	equ	0xFEA
 14028                           fsr0l	equ	0xFE9
 14029                           wreg	equ	0xFE8
 14030                           postdec1	equ	0xFE5
 14031                           fsr1h	equ	0xFE2
 14032                           fsr1l	equ	0xFE1
 14033                           indf2	equ	0xFDF
 14034                           postinc2	equ	0xFDE
 14035                           postdec2	equ	0xFDD
 14036                           plusw2	equ	0xFDB
 14037                           fsr2h	equ	0xFDA
 14038                           fsr2l	equ	0xFD9
 14039                           status	equ	0xFD8
 14040                           
 14041 ;; *************** function _TMR3_ISR *****************
 14042 ;; Defined at:
 14043 ;;		line 162 in file "mcc_generated_files/tmr3.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;		None
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;		None
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14061 ;;Total ram usage:        0 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; Hardware stack levels required when called:    1
 14064 ;; This function calls:
 14065 ;;		Absolute function
 14066 ;;		_TMR3_DefaultInterruptHandler
 14067 ;; This function is called by:
 14068 ;;		_INTERRUPT_InterruptManager
 14069 ;; This function uses a non-reentrant model
 14070 ;;
 14071                           
 14072                           	psect	text82
 14073  00264E                     __ptext82:
 14074                           	opt stack 0
 14075  00264E                     _TMR3_ISR:
 14076                           	opt stack 21
 14077                           
 14078                           ;tmr3.c: 166: PIR2bits.TMR3IF = 0;
 14079                           
 14080                           ;incstack = 0
 14081  00264E  92A1               	bcf	4001,1,c	;volatile
 14082                           
 14083                           ;tmr3.c: 168: TMR3H = (timer3ReloadVal >> 8);
 14084  002650  504B               	movf	_timer3ReloadVal+1,w,c	;volatile
 14085  002652  6EB3               	movwf	4019,c	;volatile
 14086                           
 14087                           ;tmr3.c: 169: TMR3L = timer3ReloadVal;
 14088  002654  C04A  FFB2         	movff	_timer3ReloadVal,4018	;volatile
 14089                           
 14090                           ;tmr3.c: 171: if(TMR3_InterruptHandler)
 14091  002658  0101               	movlb	1	; () banked
 14092  00265A  51F3               	movf	_TMR3_InterruptHandler& (0+255),w,b
 14093  00265C  0101               	movlb	1	; () banked
 14094  00265E  11F4               	iorwf	(_TMR3_InterruptHandler+1)& (0+255),w,b
 14095  002660  B4D8               	btfsc	status,2,c
 14096  002662  0012               	return	
 14097                           
 14098                           ; BSR set to: 1
 14099                           ;tmr3.c: 172: {
 14100                           ;tmr3.c: 173: TMR3_InterruptHandler();
 14101  002664  D801               	call	i2u415_48
 14102  002666  0012               	return	
 14103  002668                     i2u415_48:
 14104  002668  0005               	push	
 14105  00266A  0101               	movlb	1	; () banked
 14106  00266C  6EFA               	movwf	pclath,c
 14107  00266E  51F3               	movf	_TMR3_InterruptHandler& (0+255),w,b
 14108  002670  6EFD               	movwf	tosl,c
 14109  002672  51F4               	movf	(_TMR3_InterruptHandler+1)& (0+255),w,b
 14110  002674  6EFE               	movwf	tosh,c
 14111  002676  50F8               	movf	tblptru,w,c
 14112  002678  6EFF               	movwf	tosu,c
 14113  00267A  50FA               	movf	pclath,w,c
 14114  00267C  0012               	return		;indir
 14115  00267E                     __end_of_TMR3_ISR:
 14116                           	opt stack 0
 14117                           tosu	equ	0xFFF
 14118                           tosh	equ	0xFFE
 14119                           tosl	equ	0xFFD
 14120                           pclatu	equ	0xFFB
 14121                           pclath	equ	0xFFA
 14122                           tblptru	equ	0xFF8
 14123                           tblptrh	equ	0xFF7
 14124                           tblptrl	equ	0xFF6
 14125                           tablat	equ	0xFF5
 14126                           prodh	equ	0xFF4
 14127                           prodl	equ	0xFF3
 14128                           intcon	equ	0xFF2
 14129                           intcon2	equ	0xFF1
 14130                           intcon3	equ	0xFF0
 14131                           indf0	equ	0xFEF
 14132                           postinc0	equ	0xFEE
 14133                           fsr0h	equ	0xFEA
 14134                           fsr0l	equ	0xFE9
 14135                           wreg	equ	0xFE8
 14136                           postdec1	equ	0xFE5
 14137                           fsr1h	equ	0xFE2
 14138                           fsr1l	equ	0xFE1
 14139                           indf2	equ	0xFDF
 14140                           postinc2	equ	0xFDE
 14141                           postdec2	equ	0xFDD
 14142                           plusw2	equ	0xFDB
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 14148 ;; Defined at:
 14149 ;;		line 183 in file "mcc_generated_files/tmr3.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;		None
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;		None
 14154 ;; Return value:  Size  Location     Type
 14155 ;;                  1    wreg      void 
 14156 ;; Registers used:
 14157 ;;		wreg, status,2, status,0
 14158 ;; Tracked objects:
 14159 ;;		On entry : 0/0
 14160 ;;		On exit  : 0/0
 14161 ;;		Unchanged: 0/0
 14162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14167 ;;Total ram usage:        0 bytes
 14168 ;; Hardware stack levels used:    1
 14169 ;; This function calls:
 14170 ;;		Nothing
 14171 ;; This function is called by:
 14172 ;;		_TMR3_Initialize
 14173 ;;		_TMR3_ISR
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           	psect	text83
 14178  002970                     __ptext83:
 14179                           	opt stack 0
 14180  002970                     _TMR3_DefaultInterruptHandler:
 14181                           	opt stack 21
 14182                           
 14183                           ;tmr3.c: 185: Blue_Blink_Timer++;
 14184                           
 14185                           ;incstack = 0
 14186  002970  2A2B               	incf	_Blue_Blink_Timer,f,c	;volatile
 14187                           
 14188                           ;tmr3.c: 186: Red_Blink_Timer++;
 14189  002972  2A31               	incf	_Red_Blink_Timer,f,c	;volatile
 14190                           
 14191                           ;tmr3.c: 187: Battery_Timer++;
 14192  002974  2A2A               	incf	_Battery_Timer,f,c	;volatile
 14193                           
 14194                           ;tmr3.c: 190: if(Shutdown_Process == 1)
 14195  002976  0433               	decf	_Shutdown_Process,w,c
 14196  002978  A4D8               	btfss	status,2,c
 14197  00297A  0012               	return	
 14198                           
 14199                           ;tmr3.c: 191: {
 14200                           ;tmr3.c: 192: Shutdown_Counter++;
 14201  00297C  0100               	movlb	0	; () banked
 14202  00297E  2BBA               	incf	_Shutdown_Counter& (0+255),f,b
 14203  002980  0012               	return	
 14204  002982                     __end_of_TMR3_DefaultInterruptHandler:
 14205                           	opt stack 0
 14206                           tosu	equ	0xFFF
 14207                           tosh	equ	0xFFE
 14208                           tosl	equ	0xFFD
 14209                           pclatu	equ	0xFFB
 14210                           pclath	equ	0xFFA
 14211                           tblptru	equ	0xFF8
 14212                           tblptrh	equ	0xFF7
 14213                           tblptrl	equ	0xFF6
 14214                           tablat	equ	0xFF5
 14215                           prodh	equ	0xFF4
 14216                           prodl	equ	0xFF3
 14217                           intcon	equ	0xFF2
 14218                           intcon2	equ	0xFF1
 14219                           intcon3	equ	0xFF0
 14220                           indf0	equ	0xFEF
 14221                           postinc0	equ	0xFEE
 14222                           fsr0h	equ	0xFEA
 14223                           fsr0l	equ	0xFE9
 14224                           wreg	equ	0xFE8
 14225                           postdec1	equ	0xFE5
 14226                           fsr1h	equ	0xFE2
 14227                           fsr1l	equ	0xFE1
 14228                           indf2	equ	0xFDF
 14229                           postinc2	equ	0xFDE
 14230                           postdec2	equ	0xFDD
 14231                           plusw2	equ	0xFDB
 14232                           fsr2h	equ	0xFDA
 14233                           fsr2l	equ	0xFD9
 14234                           status	equ	0xFD8
 14235                           
 14236 ;; *************** function _TMR1_ISR *****************
 14237 ;; Defined at:
 14238 ;;		line 163 in file "mcc_generated_files/tmr1.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;		None
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;		None
 14243 ;; Return value:  Size  Location     Type
 14244 ;;                  1    wreg      void 
 14245 ;; Registers used:
 14246 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 14247 ;; Tracked objects:
 14248 ;;		On entry : 0/0
 14249 ;;		On exit  : 0/0
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14256 ;;Total ram usage:        0 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; Hardware stack levels required when called:    1
 14259 ;; This function calls:
 14260 ;;		Absolute function
 14261 ;;		_TMR1_DefaultInterruptHandler
 14262 ;; This function is called by:
 14263 ;;		_INTERRUPT_InterruptManager
 14264 ;; This function uses a non-reentrant model
 14265 ;;
 14266                           
 14267                           	psect	text84
 14268  00267E                     __ptext84:
 14269                           	opt stack 0
 14270  00267E                     _TMR1_ISR:
 14271                           	opt stack 21
 14272                           
 14273                           ;tmr1.c: 167: PIR1bits.TMR1IF = 0;
 14274                           
 14275                           ;incstack = 0
 14276  00267E  909E               	bcf	3998,0,c	;volatile
 14277                           
 14278                           ;tmr1.c: 169: TMR1H = (timer1ReloadVal >> 8);
 14279  002680  5049               	movf	_timer1ReloadVal+1,w,c	;volatile
 14280  002682  6ECF               	movwf	4047,c	;volatile
 14281                           
 14282                           ;tmr1.c: 170: TMR1L = timer1ReloadVal;
 14283  002684  C048  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 14284                           
 14285                           ;tmr1.c: 172: if(TMR1_InterruptHandler)
 14286  002688  0101               	movlb	1	; () banked
 14287  00268A  51F1               	movf	_TMR1_InterruptHandler& (0+255),w,b
 14288  00268C  0101               	movlb	1	; () banked
 14289  00268E  11F2               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 14290  002690  B4D8               	btfsc	status,2,c
 14291  002692  0012               	return	
 14292                           
 14293                           ; BSR set to: 1
 14294                           ;tmr1.c: 173: {
 14295                           ;tmr1.c: 174: TMR1_InterruptHandler();
 14296  002694  D801               	call	i2u390_48
 14297  002696  0012               	return	
 14298  002698                     i2u390_48:
 14299  002698  0005               	push	
 14300  00269A  0101               	movlb	1	; () banked
 14301  00269C  6EFA               	movwf	pclath,c
 14302  00269E  51F1               	movf	_TMR1_InterruptHandler& (0+255),w,b
 14303  0026A0  6EFD               	movwf	tosl,c
 14304  0026A2  51F2               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 14305  0026A4  6EFE               	movwf	tosh,c
 14306  0026A6  50F8               	movf	tblptru,w,c
 14307  0026A8  6EFF               	movwf	tosu,c
 14308  0026AA  50FA               	movf	pclath,w,c
 14309  0026AC  0012               	return		;indir
 14310  0026AE                     __end_of_TMR1_ISR:
 14311                           	opt stack 0
 14312                           tosu	equ	0xFFF
 14313                           tosh	equ	0xFFE
 14314                           tosl	equ	0xFFD
 14315                           pclatu	equ	0xFFB
 14316                           pclath	equ	0xFFA
 14317                           tblptru	equ	0xFF8
 14318                           tblptrh	equ	0xFF7
 14319                           tblptrl	equ	0xFF6
 14320                           tablat	equ	0xFF5
 14321                           prodh	equ	0xFF4
 14322                           prodl	equ	0xFF3
 14323                           intcon	equ	0xFF2
 14324                           intcon2	equ	0xFF1
 14325                           intcon3	equ	0xFF0
 14326                           indf0	equ	0xFEF
 14327                           postinc0	equ	0xFEE
 14328                           fsr0h	equ	0xFEA
 14329                           fsr0l	equ	0xFE9
 14330                           wreg	equ	0xFE8
 14331                           postdec1	equ	0xFE5
 14332                           fsr1h	equ	0xFE2
 14333                           fsr1l	equ	0xFE1
 14334                           indf2	equ	0xFDF
 14335                           postinc2	equ	0xFDE
 14336                           postdec2	equ	0xFDD
 14337                           plusw2	equ	0xFDB
 14338                           fsr2h	equ	0xFDA
 14339                           fsr2l	equ	0xFD9
 14340                           status	equ	0xFD8
 14341                           
 14342 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 14343 ;; Defined at:
 14344 ;;		line 185 in file "mcc_generated_files/tmr1.c"
 14345 ;; Parameters:    Size  Location     Type
 14346 ;;		None
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;		None
 14349 ;; Return value:  Size  Location     Type
 14350 ;;                  1    wreg      void 
 14351 ;; Registers used:
 14352 ;;		wreg, status,2, status,0
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14362 ;;Total ram usage:        0 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; This function calls:
 14365 ;;		Nothing
 14366 ;; This function is called by:
 14367 ;;		_TMR1_Initialize
 14368 ;;		_TMR1_ISR
 14369 ;; This function uses a non-reentrant model
 14370 ;;
 14371                           
 14372                           	psect	text85
 14373  002982                     __ptext85:
 14374                           	opt stack 0
 14375  002982                     _TMR1_DefaultInterruptHandler:
 14376                           	opt stack 21
 14377                           
 14378                           ;tmr1.c: 191: if(Brightness_Count_Enable == 1)
 14379                           
 14380                           ;incstack = 0
 14381  002982  042C               	decf	_Brightness_Count_Enable,w,c	;volatile
 14382  002984  B4D8               	btfsc	status,2,c
 14383                           
 14384                           ;tmr1.c: 192: {
 14385                           ;tmr1.c: 193: Brightness_Counter++;
 14386  002986  2A2D               	incf	_Brightness_Counter,f,c	;volatile
 14387                           
 14388                           ;tmr1.c: 194: }
 14389                           ;tmr1.c: 195: if(Startup_Count_Enable == 1)
 14390  002988  0101               	movlb	1	; () banked
 14391  00298A  05F5               	decf	_Startup_Count_Enable& (0+255),w,b	;volatile
 14392  00298C  A4D8               	btfss	status,2,c
 14393  00298E  0012               	return	
 14394                           
 14395                           ; BSR set to: 1
 14396                           ;tmr1.c: 196: {
 14397                           ;tmr1.c: 197: Startup_Counter++;
 14398  002990  2A34               	incf	_Startup_Counter,f,c	;volatile
 14399  002992  0012               	return	
 14400  002994                     __end_of_TMR1_DefaultInterruptHandler:
 14401                           	opt stack 0
 14402                           tosu	equ	0xFFF
 14403                           tosh	equ	0xFFE
 14404                           tosl	equ	0xFFD
 14405                           pclatu	equ	0xFFB
 14406                           pclath	equ	0xFFA
 14407                           tblptru	equ	0xFF8
 14408                           tblptrh	equ	0xFF7
 14409                           tblptrl	equ	0xFF6
 14410                           tablat	equ	0xFF5
 14411                           prodh	equ	0xFF4
 14412                           prodl	equ	0xFF3
 14413                           intcon	equ	0xFF2
 14414                           intcon2	equ	0xFF1
 14415                           intcon3	equ	0xFF0
 14416                           indf0	equ	0xFEF
 14417                           postinc0	equ	0xFEE
 14418                           fsr0h	equ	0xFEA
 14419                           fsr0l	equ	0xFE9
 14420                           wreg	equ	0xFE8
 14421                           postdec1	equ	0xFE5
 14422                           fsr1h	equ	0xFE2
 14423                           fsr1l	equ	0xFE1
 14424                           indf2	equ	0xFDF
 14425                           postinc2	equ	0xFDE
 14426                           postdec2	equ	0xFDD
 14427                           plusw2	equ	0xFDB
 14428                           fsr2h	equ	0xFDA
 14429                           fsr2l	equ	0xFD9
 14430                           status	equ	0xFD8
 14431                           
 14432 ;; *************** function _INT3_ISR *****************
 14433 ;; Defined at:
 14434 ;;		line 169 in file "mcc_generated_files/ext_int.c"
 14435 ;; Parameters:    Size  Location     Type
 14436 ;;		None
 14437 ;; Auto vars:     Size  Location     Type
 14438 ;;		None
 14439 ;; Return value:  Size  Location     Type
 14440 ;;                  1    wreg      void 
 14441 ;; Registers used:
 14442 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 14443 ;; Tracked objects:
 14444 ;;		On entry : 0/0
 14445 ;;		On exit  : 0/0
 14446 ;;		Unchanged: 0/0
 14447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14452 ;;Total ram usage:        0 bytes
 14453 ;; Hardware stack levels used:    1
 14454 ;; Hardware stack levels required when called:    2
 14455 ;; This function calls:
 14456 ;;		_INT3_CallBack
 14457 ;;		i2_PWR_SW_Check
 14458 ;; This function is called by:
 14459 ;;		_INTERRUPT_InterruptManager
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           	psect	text86
 14464  0029A4                     __ptext86:
 14465                           	opt stack 0
 14466  0029A4                     _INT3_ISR:
 14467                           	opt stack 20
 14468                           
 14469                           ;ext_int.c: 175: (INTCON3bits.INT3IF = 0);
 14470                           
 14471                           ; BSR set to: 1
 14472                           ;incstack = 0
 14473  0029A4  94F0               	bcf	intcon3,2,c	;volatile
 14474                           
 14475                           ;ext_int.c: 177: (INTCON3bits.INT3IE = 0);
 14476  0029A6  9AF0               	bcf	intcon3,5,c	;volatile
 14477                           
 14478                           ;ext_int.c: 179: PWR_SW_Check();
 14479  0029A8  ECC1  F00D         	call	i2_PWR_SW_Check	;wreg free
 14480                           
 14481                           ;ext_int.c: 181: (INTCON3bits.INT3IE = 1);
 14482  0029AC  8AF0               	bsf	intcon3,5,c	;volatile
 14483                           
 14484                           ;ext_int.c: 184: INT3_CallBack();
 14485  0029AE  ECD9  F013         	call	_INT3_CallBack	;wreg free
 14486  0029B2  0012               	return		;funcret
 14487  0029B4                     __end_of_INT3_ISR:
 14488                           	opt stack 0
 14489                           tosu	equ	0xFFF
 14490                           tosh	equ	0xFFE
 14491                           tosl	equ	0xFFD
 14492                           pclatu	equ	0xFFB
 14493                           pclath	equ	0xFFA
 14494                           tblptru	equ	0xFF8
 14495                           tblptrh	equ	0xFF7
 14496                           tblptrl	equ	0xFF6
 14497                           tablat	equ	0xFF5
 14498                           prodh	equ	0xFF4
 14499                           prodl	equ	0xFF3
 14500                           intcon	equ	0xFF2
 14501                           intcon2	equ	0xFF1
 14502                           intcon3	equ	0xFF0
 14503                           indf0	equ	0xFEF
 14504                           postinc0	equ	0xFEE
 14505                           fsr0h	equ	0xFEA
 14506                           fsr0l	equ	0xFE9
 14507                           wreg	equ	0xFE8
 14508                           postdec1	equ	0xFE5
 14509                           fsr1h	equ	0xFE2
 14510                           fsr1l	equ	0xFE1
 14511                           indf2	equ	0xFDF
 14512                           postinc2	equ	0xFDE
 14513                           postdec2	equ	0xFDD
 14514                           plusw2	equ	0xFDB
 14515                           fsr2h	equ	0xFDA
 14516                           fsr2l	equ	0xFD9
 14517                           status	equ	0xFD8
 14518                           
 14519 ;; *************** function i2_PWR_SW_Check *****************
 14520 ;; Defined at:
 14521 ;;		line 465 in file "main.c"
 14522 ;; Parameters:    Size  Location     Type
 14523 ;;		None
 14524 ;; Auto vars:     Size  Location     Type
 14525 ;;		None
 14526 ;; Return value:  Size  Location     Type
 14527 ;;                  2    0[None  ] int 
 14528 ;; Registers used:
 14529 ;;		wreg, status,2, status,0
 14530 ;; Tracked objects:
 14531 ;;		On entry : 0/0
 14532 ;;		On exit  : 0/0
 14533 ;;		Unchanged: 0/0
 14534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14538 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14539 ;;Total ram usage:        1 bytes
 14540 ;; Hardware stack levels used:    1
 14541 ;; This function calls:
 14542 ;;		Nothing
 14543 ;; This function is called by:
 14544 ;;		_INT3_ISR
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548                           	psect	text87
 14549  001B82                     __ptext87:
 14550                           	opt stack 0
 14551  001B82                     i2_PWR_SW_Check:
 14552                           	opt stack 21
 14553                           
 14554                           ;main.c: 469: if(PORTBbits.RB3 == 0)
 14555                           
 14556                           ;incstack = 0
 14557  001B82  B681               	btfsc	3969,3,c	;volatile
 14558  001B84  0012               	return	
 14559                           
 14560                           ;main.c: 470: {
 14561                           ;main.c: 472: counter = 10000;
 14562  001B86  0E27               	movlw	39
 14563  001B88  6E24               	movwf	_counter+1,c
 14564  001B8A  0E10               	movlw	16
 14565  001B8C  6E23               	movwf	_counter,c
 14566  001B8E                     i2l3545:
 14567  001B8E  0623               	decf	_counter,f,c
 14568  001B90  A0D8               	btfss	status,0,c
 14569  001B92  0624               	decf	_counter+1,f,c
 14570  001B94  2823               	incf	_counter,w,c
 14571  001B96  E1FB               	bnz	i2l3545
 14572  001B98  2824               	incf	_counter+1,w,c
 14573  001B9A  A4D8               	btfss	status,2,c
 14574  001B9C  D7F8               	goto	i2l3545
 14575                           
 14576                           ;main.c: 475: if(PORTBbits.RB3 == 0)
 14577  001B9E  B681               	btfsc	3969,3,c	;volatile
 14578  001BA0  0012               	return	
 14579                           
 14580                           ;main.c: 476: {
 14581                           ;main.c: 477: LATCbits.LATC0 = 1;
 14582  001BA2  808B               	bsf	3979,0,c	;volatile
 14583                           
 14584                           ;main.c: 478: do { LATAbits.LATA6 = 0; } while(0);
 14585  001BA4  9C89               	bcf	3977,6,c	;volatile
 14586                           
 14587                           ;main.c: 479: do { LATAbits.LATA3 = 1; } while(0);
 14588  001BA6  8689               	bsf	3977,3,c	;volatile
 14589                           
 14590                           ;main.c: 482: Shutdown_Process = 1;
 14591  001BA8  0E01               	movlw	1
 14592  001BAA  6E33               	movwf	_Shutdown_Process,c
 14593                           
 14594                           ;main.c: 489: do { TRISBbits.TRISB7 = 1; } while(0);
 14595  001BAC  8E93               	bsf	3987,7,c	;volatile
 14596                           
 14597                           ;main.c: 490: do { WPUBbits.WPUB7 = 0; } while(0);
 14598  001BAE  010F               	movlb	15	; () banked
 14599  001BB0  9F5B               	bcf	91,7,b	;volatile
 14600                           
 14601                           ; BSR set to: 15
 14602                           ;main.c: 498: counter = 0;
 14603  001BB2  0E00               	movlw	0
 14604  001BB4  6E24               	movwf	_counter+1,c
 14605  001BB6  0E00               	movlw	0
 14606  001BB8  D00E               	goto	L3
 14607  001BBA                     i2l3555:
 14608                           
 14609                           ;main.c: 500: {
 14610                           ;main.c: 501: counter++;
 14611  001BBA  4A23               	infsnz	_counter,f,c
 14612  001BBC  2A24               	incf	_counter+1,f,c
 14613                           
 14614                           ;main.c: 502: _delay((unsigned long)((10)*(1000000/4000.0)));
 14615  001BBE  0E04               	movlw	4
 14616  001BC0  6E01               	movwf	??i2_PWR_SW_Check& (0+255),c
 14617  001BC2  0E3E               	movlw	62
 14618  001BC4                     i2u723_47:
 14619  001BC4  2EE8               	decfsz	wreg,f,c
 14620  001BC6  D7FE               	goto	i2u723_47
 14621  001BC8  2E01               	decfsz	??i2_PWR_SW_Check& (0+255),f,c
 14622  001BCA  D7FC               	goto	i2u723_47
 14623                           
 14624                           ;main.c: 503: if(PORTBbits.RB7 == 0)
 14625  001BCC  BE81               	btfsc	3969,7,c	;volatile
 14626  001BCE  D004               	goto	i2l3563
 14627                           
 14628                           ;main.c: 504: {
 14629                           ;main.c: 505: counter = 5001;
 14630  001BD0  0E13               	movlw	19
 14631  001BD2  6E24               	movwf	_counter+1,c
 14632  001BD4  0E89               	movlw	137
 14633  001BD6                     L3:
 14634  001BD6  6E23               	movwf	_counter,c
 14635  001BD8                     i2l3563:
 14636  001BD8  0ED0               	movlw	208
 14637  001BDA  5C23               	subwf	_counter,w,c
 14638  001BDC  0E07               	movlw	7
 14639  001BDE  5824               	subwfb	_counter+1,w,c
 14640  001BE0  A0D8               	btfss	status,0,c
 14641  001BE2  D7EB               	goto	i2l3555
 14642                           
 14643                           ;main.c: 506: }
 14644                           ;main.c: 508: }
 14645                           ;main.c: 511: counter = 100;
 14646  001BE4  0E00               	movlw	0
 14647  001BE6  6E24               	movwf	_counter+1,c
 14648  001BE8  0E64               	movlw	100
 14649  001BEA  6E23               	movwf	_counter,c
 14650                           
 14651                           ;main.c: 512: while(counter--)
 14652  001BEC  D007               	goto	i2l3569
 14653  001BEE                     i2l3567:
 14654                           
 14655                           ;main.c: 513: {
 14656                           ;main.c: 514: _delay((unsigned long)((10)*(1000000/4000.0)));
 14657  001BEE  0E04               	movlw	4
 14658  001BF0  6E01               	movwf	??i2_PWR_SW_Check& (0+255),c
 14659  001BF2  0E3E               	movlw	62
 14660  001BF4                     i2u724_47:
 14661  001BF4  2EE8               	decfsz	wreg,f,c
 14662  001BF6  D7FE               	goto	i2u724_47
 14663  001BF8  2E01               	decfsz	??i2_PWR_SW_Check& (0+255),f,c
 14664  001BFA  D7FC               	goto	i2u724_47
 14665  001BFC                     i2l3569:
 14666  001BFC  0623               	decf	_counter,f,c
 14667  001BFE  A0D8               	btfss	status,0,c
 14668  001C00  0624               	decf	_counter+1,f,c
 14669  001C02  2823               	incf	_counter,w,c
 14670  001C04  E1F4               	bnz	i2l3567
 14671  001C06  2824               	incf	_counter+1,w,c
 14672  001C08  A4D8               	btfss	status,2,c
 14673  001C0A  D7F1               	goto	i2l3567
 14674                           
 14675                           ;main.c: 515: }
 14676                           ;main.c: 519: do { LATAbits.LATA2 = 0; } while(0);
 14677  001C0C  9489               	bcf	3977,2,c	;volatile
 14678  001C0E  0003               	sleep		;# 
 14679  001C10  0012               	return	
 14680  001C12                     __end_ofi2_PWR_SW_Check:
 14681                           	opt stack 0
 14682                           tosu	equ	0xFFF
 14683                           tosh	equ	0xFFE
 14684                           tosl	equ	0xFFD
 14685                           pclatu	equ	0xFFB
 14686                           pclath	equ	0xFFA
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           intcon2	equ	0xFF1
 14695                           intcon3	equ	0xFF0
 14696                           indf0	equ	0xFEF
 14697                           postinc0	equ	0xFEE
 14698                           fsr0h	equ	0xFEA
 14699                           fsr0l	equ	0xFE9
 14700                           wreg	equ	0xFE8
 14701                           postdec1	equ	0xFE5
 14702                           fsr1h	equ	0xFE2
 14703                           fsr1l	equ	0xFE1
 14704                           indf2	equ	0xFDF
 14705                           postinc2	equ	0xFDE
 14706                           postdec2	equ	0xFDD
 14707                           plusw2	equ	0xFDB
 14708                           fsr2h	equ	0xFDA
 14709                           fsr2l	equ	0xFD9
 14710                           status	equ	0xFD8
 14711                           
 14712 ;; *************** function _INT3_CallBack *****************
 14713 ;; Defined at:
 14714 ;;		line 190 in file "mcc_generated_files/ext_int.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;		None
 14717 ;; Auto vars:     Size  Location     Type
 14718 ;;		None
 14719 ;; Return value:  Size  Location     Type
 14720 ;;                  1    wreg      void 
 14721 ;; Registers used:
 14722 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 14723 ;; Tracked objects:
 14724 ;;		On entry : 0/0
 14725 ;;		On exit  : 0/0
 14726 ;;		Unchanged: 0/0
 14727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14732 ;;Total ram usage:        0 bytes
 14733 ;; Hardware stack levels used:    1
 14734 ;; Hardware stack levels required when called:    1
 14735 ;; This function calls:
 14736 ;;		Absolute function
 14737 ;;		_INT3_DefaultInterruptHandler
 14738 ;; This function is called by:
 14739 ;;		_INT3_ISR
 14740 ;; This function uses a non-reentrant model
 14741 ;;
 14742                           
 14743                           	psect	text88
 14744  0027B2                     __ptext88:
 14745                           	opt stack 0
 14746  0027B2                     _INT3_CallBack:
 14747                           	opt stack 20
 14748                           
 14749                           ;ext_int.c: 193: if(INT3_InterruptHandler)
 14750                           
 14751                           ;incstack = 0
 14752  0027B2  0101               	movlb	1	; () banked
 14753  0027B4  51EF               	movf	_INT3_InterruptHandler& (0+255),w,b
 14754  0027B6  0101               	movlb	1	; () banked
 14755  0027B8  11F0               	iorwf	(_INT3_InterruptHandler+1)& (0+255),w,b
 14756  0027BA  B4D8               	btfsc	status,2,c
 14757  0027BC  0012               	return	
 14758                           
 14759                           ; BSR set to: 1
 14760                           ;ext_int.c: 194: {
 14761                           ;ext_int.c: 195: INT3_InterruptHandler();
 14762  0027BE  D801               	call	i2u384_48
 14763  0027C0  0012               	return	
 14764  0027C2                     i2u384_48:
 14765  0027C2  0005               	push	
 14766  0027C4  0101               	movlb	1	; () banked
 14767  0027C6  6EFA               	movwf	pclath,c
 14768  0027C8  51EF               	movf	_INT3_InterruptHandler& (0+255),w,b
 14769  0027CA  6EFD               	movwf	tosl,c
 14770  0027CC  51F0               	movf	(_INT3_InterruptHandler+1)& (0+255),w,b
 14771  0027CE  6EFE               	movwf	tosh,c
 14772  0027D0  50F8               	movf	tblptru,w,c
 14773  0027D2  6EFF               	movwf	tosu,c
 14774  0027D4  50FA               	movf	pclath,w,c
 14775  0027D6  0012               	return		;indir
 14776  0027D8                     __end_of_INT3_CallBack:
 14777                           	opt stack 0
 14778                           tosu	equ	0xFFF
 14779                           tosh	equ	0xFFE
 14780                           tosl	equ	0xFFD
 14781                           pclatu	equ	0xFFB
 14782                           pclath	equ	0xFFA
 14783                           tblptru	equ	0xFF8
 14784                           tblptrh	equ	0xFF7
 14785                           tblptrl	equ	0xFF6
 14786                           tablat	equ	0xFF5
 14787                           prodh	equ	0xFF4
 14788                           prodl	equ	0xFF3
 14789                           intcon	equ	0xFF2
 14790                           intcon2	equ	0xFF1
 14791                           intcon3	equ	0xFF0
 14792                           indf0	equ	0xFEF
 14793                           postinc0	equ	0xFEE
 14794                           fsr0h	equ	0xFEA
 14795                           fsr0l	equ	0xFE9
 14796                           wreg	equ	0xFE8
 14797                           postdec1	equ	0xFE5
 14798                           fsr1h	equ	0xFE2
 14799                           fsr1l	equ	0xFE1
 14800                           indf2	equ	0xFDF
 14801                           postinc2	equ	0xFDE
 14802                           postdec2	equ	0xFDD
 14803                           plusw2	equ	0xFDB
 14804                           fsr2h	equ	0xFDA
 14805                           fsr2l	equ	0xFD9
 14806                           status	equ	0xFD8
 14807                           
 14808 ;; *************** function _INT3_DefaultInterruptHandler *****************
 14809 ;; Defined at:
 14810 ;;		line 209 in file "mcc_generated_files/ext_int.c"
 14811 ;; Parameters:    Size  Location     Type
 14812 ;;		None
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;		None
 14815 ;; Return value:  Size  Location     Type
 14816 ;;                  1    wreg      void 
 14817 ;; Registers used:
 14818 ;;		None
 14819 ;; Tracked objects:
 14820 ;;		On entry : 0/0
 14821 ;;		On exit  : 0/0
 14822 ;;		Unchanged: 0/0
 14823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14828 ;;Total ram usage:        0 bytes
 14829 ;; Hardware stack levels used:    1
 14830 ;; This function calls:
 14831 ;;		Nothing
 14832 ;; This function is called by:
 14833 ;;		_EXT_INT_Initialize
 14834 ;;		_INT3_CallBack
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837                           
 14838                           	psect	text89
 14839  002A2E                     __ptext89:
 14840                           	opt stack 0
 14841  002A2E                     _INT3_DefaultInterruptHandler:
 14842                           	opt stack 20
 14843                           
 14844                           ;incstack = 0
 14845  002A2E  0012               	return		;funcret
 14846  002A30                     __end_of_INT3_DefaultInterruptHandler:
 14847                           	opt stack 0
 14848                           tosu	equ	0xFFF
 14849                           tosh	equ	0xFFE
 14850                           tosl	equ	0xFFD
 14851                           pclatu	equ	0xFFB
 14852                           pclath	equ	0xFFA
 14853                           tblptru	equ	0xFF8
 14854                           tblptrh	equ	0xFF7
 14855                           tblptrl	equ	0xFF6
 14856                           tablat	equ	0xFF5
 14857                           prodh	equ	0xFF4
 14858                           prodl	equ	0xFF3
 14859                           intcon	equ	0xFF2
 14860                           intcon2	equ	0xFF1
 14861                           intcon3	equ	0xFF0
 14862                           indf0	equ	0xFEF
 14863                           postinc0	equ	0xFEE
 14864                           fsr0h	equ	0xFEA
 14865                           fsr0l	equ	0xFE9
 14866                           wreg	equ	0xFE8
 14867                           postdec1	equ	0xFE5
 14868                           fsr1h	equ	0xFE2
 14869                           fsr1l	equ	0xFE1
 14870                           indf2	equ	0xFDF
 14871                           postinc2	equ	0xFDE
 14872                           postdec2	equ	0xFDD
 14873                           plusw2	equ	0xFDB
 14874                           fsr2h	equ	0xFDA
 14875                           fsr2l	equ	0xFD9
 14876                           status	equ	0xFD8
 14877                           
 14878 ;; *************** function _I2C_ISR *****************
 14879 ;; Defined at:
 14880 ;;		line 231 in file "mcc_generated_files/i2c.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;		None
 14883 ;; Auto vars:     Size  Location     Type
 14884 ;;		None
 14885 ;; Return value:  Size  Location     Type
 14886 ;;                  1    wreg      void 
 14887 ;; Registers used:
 14888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14889 ;; Tracked objects:
 14890 ;;		On entry : 0/0
 14891 ;;		On exit  : 0/0
 14892 ;;		Unchanged: 0/0
 14893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14897 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14898 ;;Total ram usage:        2 bytes
 14899 ;; Hardware stack levels used:    1
 14900 ;; Hardware stack levels required when called:    1
 14901 ;; This function calls:
 14902 ;;		_I2C_FunctionComplete
 14903 ;;		_I2C_Stop
 14904 ;; This function is called by:
 14905 ;;		_INTERRUPT_InterruptManager
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           	psect	text90
 14910  000910                     __ptext90:
 14911                           	opt stack 0
 14912  000910                     _I2C_ISR:
 14913                           	opt stack 21
 14914                           
 14915                           ;i2c.c: 234: static uint8_t *pi2c_buf_ptr;
 14916                           ;i2c.c: 235: static uint16_t i2c_address = 0;
 14917                           ;i2c.c: 236: static uint8_t i2c_bytes_left = 0;
 14918                           ;i2c.c: 237: static uint8_t i2c_10bit_address_restart = 0;
 14919                           ;i2c.c: 239: PIR1bits.SSPIF = 0;
 14920                           
 14921                           ;incstack = 0
 14922  000910  969E               	bcf	3998,3,c	;volatile
 14923                           
 14924                           ;i2c.c: 243: if(SSPCON1bits.WCOL)
 14925  000912  AEC6               	btfss	4038,7,c	;volatile
 14926  000914  D114               	goto	i2l7213
 14927                           
 14928                           ;i2c.c: 244: {
 14929                           ;i2c.c: 246: SSPCON1bits.WCOL = 0;
 14930  000916  9EC6               	bcf	4038,7,c	;volatile
 14931                           
 14932                           ;i2c.c: 247: i2c_state = S_MASTER_IDLE;
 14933  000918  0E00               	movlw	0
 14934  00091A  6E3F               	movwf	_i2c_state,c
 14935                           
 14936                           ;i2c.c: 248: *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 14937  00091C  0100               	movlb	0	; () banked
 14938  00091E  EE20 F003          	lfsr	2,3
 14939  000922  51B2               	movf	_p_i2c_current& (0+255),w,b
 14940  000924  26D9               	addwf	fsr2l,f,c
 14941  000926  51B3               	movf	(_p_i2c_current+1)& (0+255),w,b
 14942  000928  22DA               	addwfc	fsr2h,f,c
 14943  00092A  CFDE F004          	movff	postinc2,??_I2C_ISR
 14944  00092E  CFDD F005          	movff	postdec2,??_I2C_ISR+1
 14945  000932  C004  FFD9         	movff	??_I2C_ISR,fsr2l
 14946  000936  C005  FFDA         	movff	??_I2C_ISR+1,fsr2h
 14947  00093A  0E01               	movlw	1
 14948  00093C  6EDF               	movwf	indf2,c
 14949                           
 14950                           ; BSR set to: 0
 14951                           ;i2c.c: 251: p_i2c_current = (0);
 14952  00093E  0E00               	movlw	0
 14953  000940  0100               	movlb	0	; () banked
 14954  000942  6FB2               	movwf	_p_i2c_current& (0+255),b
 14955  000944  0E00               	movlw	0
 14956  000946  0100               	movlb	0	; () banked
 14957  000948  6FB3               	movwf	(_p_i2c_current+1)& (0+255),b
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;i2c.c: 253: return;
 14961  00094A  0012               	return	
 14962  00094C                     i2l310:
 14963                           
 14964                           ;i2c.c: 261: if(i2c_object.trStatus.s.empty != 1)
 14965  00094C  0100               	movlb	0	; () banked
 14966  00094E  B3AF               	btfsc	(_i2c_object+4)& (0+255),1,b
 14967  000950  0012               	return	
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;i2c.c: 262: {
 14971                           ;i2c.c: 264: p_i2c_current = i2c_object.pTrHead;
 14972  000952  C0AD  F0B2         	movff	_i2c_object+2,_p_i2c_current
 14973  000956  C0AE  F0B3         	movff	_i2c_object+3,_p_i2c_current+1
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;i2c.c: 265: i2c_trb_count = i2c_object.pTrHead->count;
 14977  00095A  C0AD  FFD9         	movff	_i2c_object+2,fsr2l
 14978  00095E  C0AE  FFDA         	movff	_i2c_object+3,fsr2h
 14979  000962  50DF               	movf	indf2,w,c
 14980  000964  6E40               	movwf	_i2c_trb_count,c
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;i2c.c: 266: p_i2c_trb_current = i2c_object.pTrHead->ptrb_list;
 14984  000966  0100               	movlb	0	; () banked
 14985  000968  EE20 F001          	lfsr	2,1
 14986  00096C  51AD               	movf	(_i2c_object+2)& (0+255),w,b
 14987  00096E  26D9               	addwf	fsr2l,f,c
 14988  000970  51AE               	movf	(_i2c_object+3)& (0+255),w,b
 14989  000972  22DA               	addwfc	fsr2h,f,c
 14990  000974  CFDE F0B4          	movff	postinc2,_p_i2c_trb_current
 14991  000978  CFDD F0B5          	movff	postdec2,_p_i2c_trb_current+1
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;i2c.c: 268: i2c_object.pTrHead++;
 14995  00097C  0E05               	movlw	5
 14996  00097E  0100               	movlb	0	; () banked
 14997  000980  27AD               	addwf	(_i2c_object+2)& (0+255),f,b
 14998  000982  0E00               	movlw	0
 14999  000984  23AE               	addwfc	(_i2c_object+3)& (0+255),f,b
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;i2c.c: 271: if(i2c_object.pTrHead == (i2c_tr_queue + 1))
 15003  000986  0ED1               	movlw	low (_i2c_tr_queue+5)
 15004  000988  0100               	movlb	0	; () banked
 15005  00098A  19AD               	xorwf	(_i2c_object+2)& (0+255),w,b
 15006  00098C  E10B               	bnz	i2l7105
 15007  00098E  0E01               	movlw	high (_i2c_tr_queue+5)
 15008  000990  0100               	movlb	0	; () banked
 15009  000992  19AE               	xorwf	(_i2c_object+3)& (0+255),w,b
 15010  000994  A4D8               	btfss	status,2,c
 15011  000996  D006               	goto	i2l7105
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;i2c.c: 272: {
 15015                           ;i2c.c: 274: i2c_object.pTrHead = i2c_tr_queue;
 15016  000998  0ECC               	movlw	low _i2c_tr_queue
 15017  00099A  0100               	movlb	0	; () banked
 15018  00099C  6FAD               	movwf	(_i2c_object+2)& (0+255),b
 15019  00099E  0E01               	movlw	high _i2c_tr_queue
 15020  0009A0  0100               	movlb	0	; () banked
 15021  0009A2  6FAE               	movwf	(_i2c_object+3)& (0+255),b
 15022  0009A4                     i2l7105:
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;i2c.c: 275: }
 15026                           ;i2c.c: 279: i2c_object.trStatus.s.full = 0;
 15027  0009A4  0100               	movlb	0	; () banked
 15028  0009A6  91AF               	bcf	(_i2c_object+4)& (0+255),0,b
 15029                           
 15030                           ;i2c.c: 282: if(i2c_object.pTrHead == i2c_object.pTrTail)
 15031  0009A8  0100               	movlb	0	; () banked
 15032  0009AA  51AB               	movf	_i2c_object& (0+255),w,b
 15033  0009AC  0100               	movlb	0	; () banked
 15034  0009AE  19AD               	xorwf	(_i2c_object+2)& (0+255),w,b
 15035  0009B0  E108               	bnz	i2l313
 15036  0009B2  0100               	movlb	0	; () banked
 15037  0009B4  51AC               	movf	(_i2c_object+1)& (0+255),w,b
 15038  0009B6  0100               	movlb	0	; () banked
 15039  0009B8  19AE               	xorwf	(_i2c_object+3)& (0+255),w,b
 15040  0009BA  A4D8               	btfss	status,2,c
 15041  0009BC  D002               	goto	i2l313
 15042                           
 15043                           ; BSR set to: 0
 15044                           ;i2c.c: 283: {
 15045                           ;i2c.c: 285: i2c_object.trStatus.s.empty = 1;
 15046  0009BE  0100               	movlb	0	; () banked
 15047  0009C0  83AF               	bsf	(_i2c_object+4)& (0+255),1,b
 15048  0009C2                     i2l313:
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;i2c.c: 286: }
 15052                           ;i2c.c: 289: SSPCON2bits.SEN = 1;
 15053  0009C2  80C5               	bsf	4037,0,c	;volatile
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;i2c.c: 292: i2c_state = S_MASTER_SEND_ADDR;
 15057  0009C4  0E02               	movlw	2
 15058  0009C6  6E3F               	movwf	_i2c_state,c
 15059                           
 15060                           ; BSR set to: 0
 15061                           ;i2c.c: 293: }
 15062                           ;i2c.c: 295: break;
 15063  0009C8  0012               	return	
 15064  0009CA                     i2l315:
 15065                           
 15066                           ;i2c.c: 302: SSPCON2bits.RSEN = 1;
 15067  0009CA  82C5               	bsf	4037,1,c	;volatile
 15068                           
 15069                           ;i2c.c: 305: i2c_state = S_MASTER_SEND_ADDR;
 15070  0009CC  0E02               	movlw	2
 15071  0009CE  6E3F               	movwf	_i2c_state,c
 15072                           
 15073                           ;i2c.c: 307: break;
 15074  0009D0  0012               	return	
 15075  0009D2                     i2l316:
 15076                           
 15077                           ;i2c.c: 311: if(SSPCON2bits.ACKSTAT)
 15078  0009D2  ACC5               	btfss	4037,6,c	;volatile
 15079  0009D4  D006               	goto	i2l7117
 15080                           
 15081                           ;i2c.c: 312: {
 15082                           ;i2c.c: 313: i2c_object.i2cErrors++;
 15083  0009D6  0100               	movlb	0	; () banked
 15084  0009D8  2BB1               	incf	(_i2c_object+6)& (0+255),f,b
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;i2c.c: 314: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 15088  0009DA  0E04               	movlw	4
 15089  0009DC  EC2F  F011         	call	_I2C_Stop
 15090                           
 15091                           ;i2c.c: 315: }
 15092  0009E0  0012               	return	
 15093  0009E2                     i2l7117:
 15094                           
 15095                           ;i2c.c: 316: else
 15096                           ;i2c.c: 317: {
 15097                           ;i2c.c: 319: SSPBUF = (i2c_address >> 1) & 0x00FF;
 15098  0009E2  90D8               	bcf	status,0,c
 15099  0009E4  3042               	rrcf	I2C_ISR@i2c_address+1,w,c
 15100  0009E6  6E05               	movwf	(??_I2C_ISR+1)& (0+255),c
 15101  0009E8  3041               	rrcf	I2C_ISR@i2c_address,w,c
 15102  0009EA  6E04               	movwf	??_I2C_ISR& (0+255),c
 15103  0009EC  5004               	movf	??_I2C_ISR,w,c
 15104  0009EE  6EC9               	movwf	4041,c	;volatile
 15105                           
 15106                           ;i2c.c: 322: if(i2c_address & 0x01)
 15107  0009F0  A041               	btfss	I2C_ISR@i2c_address,0,c
 15108  0009F2  D003               	goto	i2l7123
 15109                           
 15110                           ;i2c.c: 323: {
 15111                           ;i2c.c: 326: i2c_state = S_MASTER_10BIT_RESTART;
 15112  0009F4  0E0B               	movlw	11
 15113  0009F6  6E3F               	movwf	_i2c_state,c
 15114                           
 15115                           ;i2c.c: 327: }
 15116  0009F8  0012               	return	
 15117  0009FA                     i2l7123:
 15118                           
 15119                           ;i2c.c: 328: else
 15120                           ;i2c.c: 329: {
 15121                           ;i2c.c: 331: i2c_state = S_MASTER_SEND_DATA;
 15122  0009FA  0E03               	movlw	3
 15123  0009FC  6E3F               	movwf	_i2c_state,c
 15124                           
 15125                           ;i2c.c: 332: }
 15126                           ;i2c.c: 333: }
 15127                           ;i2c.c: 335: break;
 15128  0009FE  0012               	return	
 15129  000A00                     i2l321:
 15130                           
 15131                           ;i2c.c: 339: if(SSPCON2bits.ACKSTAT)
 15132  000A00  ACC5               	btfss	4037,6,c	;volatile
 15133  000A02  D006               	goto	i2l322
 15134                           
 15135                           ;i2c.c: 340: {
 15136                           ;i2c.c: 341: i2c_object.i2cErrors++;
 15137  000A04  0100               	movlb	0	; () banked
 15138  000A06  2BB1               	incf	(_i2c_object+6)& (0+255),f,b
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;i2c.c: 342: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 15142  000A08  0E04               	movlw	4
 15143  000A0A  EC2F  F011         	call	_I2C_Stop
 15144                           
 15145                           ;i2c.c: 343: }
 15146  000A0E  0012               	return	
 15147  000A10                     i2l322:
 15148                           
 15149                           ;i2c.c: 344: else
 15150                           ;i2c.c: 345: {
 15151                           ;i2c.c: 348: SSPCON2bits.RSEN = 1;
 15152  000A10  82C5               	bsf	4037,1,c	;volatile
 15153                           
 15154                           ;i2c.c: 352: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 15155  000A12  C041  F004         	movff	I2C_ISR@i2c_address,??_I2C_ISR
 15156  000A16  C042  F005         	movff	I2C_ISR@i2c_address+1,??_I2C_ISR+1
 15157  000A1A  C005  F004         	movff	??_I2C_ISR+1,??_I2C_ISR
 15158  000A1E  6A05               	clrf	??_I2C_ISR+1,c
 15159  000A20  0E06               	movlw	6
 15160  000A22  1604               	andwf	??_I2C_ISR,f,c
 15161  000A24  0E00               	movlw	0
 15162  000A26  1605               	andwf	??_I2C_ISR+1,f,c
 15163  000A28  0EF0               	movlw	240
 15164  000A2A  1004               	iorwf	??_I2C_ISR,w,c
 15165  000A2C  6E41               	movwf	I2C_ISR@i2c_address,c
 15166  000A2E  5005               	movf	??_I2C_ISR+1,w,c
 15167  000A30  6E42               	movwf	I2C_ISR@i2c_address+1,c
 15168                           
 15169                           ;i2c.c: 355: i2c_address |= 0x0001;
 15170  000A32  8041               	bsf	I2C_ISR@i2c_address,0,c
 15171                           
 15172                           ;i2c.c: 358: i2c_10bit_address_restart = 1;
 15173  000A34  0E01               	movlw	1
 15174  000A36  6E25               	movwf	I2C_ISR@i2c_10bit_address_restart,c
 15175                           
 15176                           ;i2c.c: 361: i2c_state = S_MASTER_SEND_ADDR;
 15177  000A38  0E02               	movlw	2
 15178  000A3A  6E3F               	movwf	_i2c_state,c
 15179                           
 15180                           ;i2c.c: 362: }
 15181                           ;i2c.c: 364: break;
 15182  000A3C  0012               	return	
 15183  000A3E                     i2l7137:
 15184                           
 15185                           ;i2c.c: 379: if(i2c_10bit_address_restart != 1)
 15186  000A3E  0425               	decf	I2C_ISR@i2c_10bit_address_restart,w,c
 15187  000A40  B4D8               	btfsc	status,2,c
 15188  000A42  D01C               	goto	i2l326
 15189                           
 15190                           ;i2c.c: 380: {
 15191                           ;i2c.c: 382: i2c_address = p_i2c_trb_current->address;
 15192  000A44  C0B4  FFD9         	movff	_p_i2c_trb_current,fsr2l
 15193  000A48  C0B5  FFDA         	movff	_p_i2c_trb_current+1,fsr2h
 15194  000A4C  CFDE F041          	movff	postinc2,I2C_ISR@i2c_address
 15195  000A50  CFDD F042          	movff	postdec2,I2C_ISR@i2c_address+1
 15196                           
 15197                           ;i2c.c: 383: pi2c_buf_ptr = p_i2c_trb_current->pbuffer;
 15198  000A54  0100               	movlb	0	; () banked
 15199  000A56  EE20 F003          	lfsr	2,3
 15200  000A5A  51B4               	movf	_p_i2c_trb_current& (0+255),w,b
 15201  000A5C  26D9               	addwf	fsr2l,f,c
 15202  000A5E  51B5               	movf	(_p_i2c_trb_current+1)& (0+255),w,b
 15203  000A60  22DA               	addwfc	fsr2h,f,c
 15204  000A62  CFDE F140          	movff	postinc2,I2C_ISR@pi2c_buf_ptr
 15205  000A66  CFDD F141          	movff	postdec2,I2C_ISR@pi2c_buf_ptr+1
 15206                           
 15207                           ; BSR set to: 0
 15208                           ;i2c.c: 384: i2c_bytes_left = p_i2c_trb_current->length;
 15209  000A6A  0100               	movlb	0	; () banked
 15210  000A6C  EE20 F002          	lfsr	2,2
 15211  000A70  51B4               	movf	_p_i2c_trb_current& (0+255),w,b
 15212  000A72  26D9               	addwf	fsr2l,f,c
 15213  000A74  51B5               	movf	(_p_i2c_trb_current+1)& (0+255),w,b
 15214  000A76  22DA               	addwfc	fsr2h,f,c
 15215  000A78  50DF               	movf	indf2,w,c
 15216  000A7A  6E26               	movwf	I2C_ISR@i2c_bytes_left,c
 15217  000A7C                     i2l326:
 15218                           
 15219                           ;i2c.c: 407: else
 15220                           ;i2c.c: 408: {
 15221                           ;i2c.c: 410: SSPBUF = i2c_address;
 15222  000A7C  C041  FFC9         	movff	I2C_ISR@i2c_address,4041	;volatile
 15223                           
 15224                           ;i2c.c: 411: if(i2c_address & 0x01)
 15225  000A80  A041               	btfss	I2C_ISR@i2c_address,0,c
 15226  000A82  D003               	goto	i2l7157
 15227                           
 15228                           ;i2c.c: 412: {
 15229                           ;i2c.c: 414: i2c_state = S_MASTER_ACK_ADDR;
 15230  000A84  0E05               	movlw	5
 15231  000A86  6E3F               	movwf	_i2c_state,c
 15232                           
 15233                           ;i2c.c: 415: }
 15234  000A88  0012               	return	
 15235  000A8A                     i2l7157:
 15236                           
 15237                           ;i2c.c: 416: else
 15238                           ;i2c.c: 417: {
 15239                           ;i2c.c: 419: i2c_state = S_MASTER_SEND_DATA;
 15240  000A8A  0E03               	movlw	3
 15241  000A8C  6E3F               	movwf	_i2c_state,c
 15242                           
 15243                           ;i2c.c: 420: }
 15244                           ;i2c.c: 421: }
 15245                           ;i2c.c: 422: break;
 15246  000A8E  0012               	return	
 15247  000A90                     i2l332:
 15248                           
 15249                           ;i2c.c: 427: if(SSPCON2bits.ACKSTAT)
 15250  000A90  ACC5               	btfss	4037,6,c	;volatile
 15251  000A92  D007               	goto	i2l7165
 15252                           
 15253                           ;i2c.c: 428: {
 15254                           ;i2c.c: 430: i2c_object.i2cErrors++;
 15255  000A94  0100               	movlb	0	; () banked
 15256  000A96  2BB1               	incf	(_i2c_object+6)& (0+255),f,b
 15257                           
 15258                           ; BSR set to: 0
 15259                           ;i2c.c: 433: SSPCON2bits.ACKSTAT = 0;
 15260  000A98  9CC5               	bcf	4037,6,c	;volatile
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;i2c.c: 436: I2C_Stop(I2C_DATA_NO_ACK);
 15264  000A9A  0E05               	movlw	5
 15265  000A9C  EC2F  F011         	call	_I2C_Stop
 15266                           
 15267                           ;i2c.c: 438: }
 15268  000AA0  0012               	return	
 15269  000AA2                     i2l7165:
 15270                           
 15271                           ;i2c.c: 439: else
 15272                           ;i2c.c: 440: {
 15273                           ;i2c.c: 442: if(i2c_bytes_left-- == 0U)
 15274  000AA2  0626               	decf	I2C_ISR@i2c_bytes_left,f,c
 15275  000AA4  2826               	incf	I2C_ISR@i2c_bytes_left,w,c
 15276  000AA6  A4D8               	btfss	status,2,c
 15277  000AA8  D00F               	goto	i2l7175
 15278                           
 15279                           ;i2c.c: 443: {
 15280                           ;i2c.c: 447: p_i2c_trb_current++;
 15281  000AAA  0E05               	movlw	5
 15282  000AAC  0100               	movlb	0	; () banked
 15283  000AAE  27B4               	addwf	_p_i2c_trb_current& (0+255),f,b
 15284  000AB0  0E00               	movlw	0
 15285  000AB2  23B5               	addwfc	(_p_i2c_trb_current+1)& (0+255),f,b
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;i2c.c: 450: if(--i2c_trb_count == 0)
 15289  000AB4  2E40               	decfsz	_i2c_trb_count,f,c
 15290  000AB6  D004               	goto	i2l336
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;i2c.c: 451: {
 15294                           ;i2c.c: 452: I2C_Stop(I2C_MESSAGE_COMPLETE);
 15295  000AB8  0E00               	movlw	0
 15296  000ABA  EC2F  F011         	call	_I2C_Stop
 15297                           
 15298                           ;i2c.c: 453: }
 15299  000ABE  0012               	return	
 15300  000AC0                     i2l336:
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;i2c.c: 454: else
 15304                           ;i2c.c: 455: {
 15305                           ;i2c.c: 462: SSPCON2bits.RSEN = 1;
 15306  000AC0  82C5               	bsf	4037,1,c	;volatile
 15307                           
 15308                           ; BSR set to: 0
 15309                           ;i2c.c: 465: i2c_state = S_MASTER_SEND_ADDR;
 15310  000AC2  0E02               	movlw	2
 15311  000AC4  6E3F               	movwf	_i2c_state,c
 15312                           
 15313                           ; BSR set to: 0
 15314                           ;i2c.c: 467: }
 15315                           ;i2c.c: 468: }
 15316  000AC6  0012               	return	
 15317  000AC8                     i2l7175:
 15318                           
 15319                           ;i2c.c: 469: else
 15320                           ;i2c.c: 470: {
 15321                           ;i2c.c: 472: SSPBUF = *pi2c_buf_ptr++;
 15322  000AC8  C140  FFD9         	movff	I2C_ISR@pi2c_buf_ptr,fsr2l
 15323  000ACC  C141  FFDA         	movff	I2C_ISR@pi2c_buf_ptr+1,fsr2h
 15324  000AD0  50DF               	movf	indf2,w,c
 15325  000AD2  6EC9               	movwf	4041,c	;volatile
 15326  000AD4  0101               	movlb	1	; () banked
 15327  000AD6  4B40               	infsnz	I2C_ISR@pi2c_buf_ptr& (0+255),f,b
 15328  000AD8  2B41               	incf	(I2C_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 15329                           
 15330                           ; BSR set to: 1
 15331                           ;i2c.c: 473: }
 15332                           ;i2c.c: 474: }
 15333                           ;i2c.c: 475: break;
 15334                           
 15335                           ; BSR set to: 1
 15336  000ADA  0012               	return	
 15337  000ADC                     i2l339:
 15338                           
 15339                           ;i2c.c: 480: if(SSPCON2bits.ACKSTAT)
 15340  000ADC  ACC5               	btfss	4037,6,c	;volatile
 15341  000ADE  D007               	goto	i2l340
 15342                           
 15343                           ;i2c.c: 481: {
 15344                           ;i2c.c: 484: i2c_object.i2cErrors++;
 15345  000AE0  0100               	movlb	0	; () banked
 15346  000AE2  2BB1               	incf	(_i2c_object+6)& (0+255),f,b
 15347                           
 15348                           ; BSR set to: 0
 15349                           ;i2c.c: 487: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 15350  000AE4  0E04               	movlw	4
 15351  000AE6  EC2F  F011         	call	_I2C_Stop
 15352                           
 15353                           ;i2c.c: 490: SSPCON2bits.ACKSTAT = 0;
 15354  000AEA  9CC5               	bcf	4037,6,c	;volatile
 15355                           
 15356                           ;i2c.c: 491: }
 15357  000AEC  0012               	return	
 15358  000AEE                     i2l340:
 15359                           
 15360                           ;i2c.c: 492: else
 15361                           ;i2c.c: 493: {
 15362                           ;i2c.c: 494: SSPCON2bits.RCEN = 1;
 15363  000AEE  86C5               	bsf	4037,3,c	;volatile
 15364                           
 15365                           ;i2c.c: 495: i2c_state = S_MASTER_ACK_RCV_DATA;
 15366  000AF0  0E08               	movlw	8
 15367  000AF2  6E3F               	movwf	_i2c_state,c
 15368                           
 15369                           ;i2c.c: 496: }
 15370                           ;i2c.c: 497: break;
 15371  000AF4  0012               	return	
 15372  000AF6                     i2l7187:
 15373                           
 15374                           ;i2c.c: 504: i2c_state = S_MASTER_ACK_RCV_DATA;
 15375  000AF6  0E08               	movlw	8
 15376  000AF8  6E3F               	movwf	_i2c_state,c
 15377                           
 15378                           ;i2c.c: 507: SSPCON2bits.RCEN = 1;
 15379  000AFA  86C5               	bsf	4037,3,c	;volatile
 15380                           
 15381                           ;i2c.c: 509: break;
 15382  000AFC  0012               	return	
 15383  000AFE                     i2l7191:
 15384                           
 15385                           ;i2c.c: 514: *pi2c_buf_ptr++ = SSPBUF;
 15386  000AFE  C140  FFD9         	movff	I2C_ISR@pi2c_buf_ptr,fsr2l
 15387  000B02  C141  FFDA         	movff	I2C_ISR@pi2c_buf_ptr+1,fsr2h
 15388  000B06  CFC9 FFDF          	movff	4041,indf2	;volatile
 15389  000B0A  0101               	movlb	1	; () banked
 15390  000B0C  4B40               	infsnz	I2C_ISR@pi2c_buf_ptr& (0+255),f,b
 15391  000B0E  2B41               	incf	(I2C_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 15392                           
 15393                           ; BSR set to: 1
 15394                           ;i2c.c: 517: if(--i2c_bytes_left)
 15395  000B10  0E01               	movlw	1
 15396  000B12  5E26               	subwf	I2C_ISR@i2c_bytes_left,f,c
 15397  000B14  B4D8               	btfsc	status,2,c
 15398  000B16  D004               	goto	i2l344
 15399                           
 15400                           ; BSR set to: 1
 15401                           ;i2c.c: 518: {
 15402                           ;i2c.c: 524: SSPCON2bits.ACKDT = 0;
 15403  000B18  9AC5               	bcf	4037,5,c	;volatile
 15404                           
 15405                           ; BSR set to: 1
 15406                           ;i2c.c: 527: i2c_state = S_MASTER_RCV_DATA;
 15407  000B1A  0E06               	movlw	6
 15408  000B1C  6E3F               	movwf	_i2c_state,c
 15409                           
 15410                           ;i2c.c: 528: }
 15411  000B1E  D003               	goto	i2l7203
 15412  000B20                     i2l344:
 15413                           
 15414                           ; BSR set to: 1
 15415                           ;i2c.c: 529: else
 15416                           ;i2c.c: 530: {
 15417                           ;i2c.c: 534: SSPCON2bits.ACKDT = 1;
 15418  000B20  8AC5               	bsf	4037,5,c	;volatile
 15419                           
 15420                           ; BSR set to: 1
 15421                           ;i2c.c: 536: I2C_FunctionComplete();
 15422  000B22  EC81  F014         	call	_I2C_FunctionComplete	;wreg free
 15423  000B26                     i2l7203:
 15424                           
 15425                           ;i2c.c: 537: }
 15426                           ;i2c.c: 540: SSPCON2bits.ACKEN = 1;
 15427  000B26  88C5               	bsf	4037,4,c	;volatile
 15428                           
 15429                           ;i2c.c: 541: break;
 15430  000B28  0012               	return	
 15431  000B2A                     i2l7205:
 15432                           
 15433                           ;i2c.c: 544: case S_MASTER_SEND_STOP:
 15434                           ;i2c.c: 547: I2C_Stop(I2C_MESSAGE_COMPLETE);
 15435  000B2A  0E00               	movlw	0
 15436  000B2C  EC2F  F011         	call	_I2C_Stop
 15437                           
 15438                           ;i2c.c: 548: break;
 15439  000B30  0012               	return	
 15440  000B32                     i2l7207:
 15441                           
 15442                           ;i2c.c: 554: i2c_object.i2cErrors++;
 15443  000B32  0100               	movlb	0	; () banked
 15444  000B34  2BB1               	incf	(_i2c_object+6)& (0+255),f,b
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;i2c.c: 555: I2C_Stop(I2C_LOST_STATE);
 15448  000B36  0E06               	movlw	6
 15449  000B38  EC2F  F011         	call	_I2C_Stop
 15450                           
 15451                           ;i2c.c: 558: }
 15452                           
 15453                           ;i2c.c: 556: break;
 15454  000B3C  0012               	return	
 15455  000B3E                     i2l7213:
 15456  000B3E  503F               	movf	_i2c_state,w,c
 15457                           
 15458                           ; Switch size 1, requested type "space"
 15459                           ; Number of cases is 11, Range of values is 0 to 11
 15460                           ; switch strategies available:
 15461                           ; Name         Instructions Cycles
 15462                           ; simple_byte           34    18 (average)
 15463                           ;	Chosen strategy is simple_byte
 15464  000B40  0A00               	xorlw	0	; case 0
 15465  000B42  B4D8               	btfsc	status,2,c
 15466  000B44  D703               	goto	i2l310
 15467  000B46  0A01               	xorlw	1	; case 1
 15468  000B48  B4D8               	btfsc	status,2,c
 15469  000B4A  D73F               	goto	i2l315
 15470  000B4C  0A03               	xorlw	3	; case 2
 15471  000B4E  B4D8               	btfsc	status,2,c
 15472  000B50  D776               	goto	i2l7137
 15473  000B52  0A01               	xorlw	1	; case 3
 15474  000B54  B4D8               	btfsc	status,2,c
 15475  000B56  D79C               	goto	i2l332
 15476  000B58  0A07               	xorlw	7	; case 4
 15477  000B5A  B4D8               	btfsc	status,2,c
 15478  000B5C  D7E6               	goto	i2l7205
 15479  000B5E  0A01               	xorlw	1	; case 5
 15480  000B60  B4D8               	btfsc	status,2,c
 15481  000B62  D7BC               	goto	i2l339
 15482  000B64  0A03               	xorlw	3	; case 6
 15483  000B66  B4D8               	btfsc	status,2,c
 15484  000B68  D7C6               	goto	i2l7187
 15485  000B6A  0A01               	xorlw	1	; case 7
 15486  000B6C  B4D8               	btfsc	status,2,c
 15487  000B6E  D7DD               	goto	i2l7205
 15488  000B70  0A0F               	xorlw	15	; case 8
 15489  000B72  B4D8               	btfsc	status,2,c
 15490  000B74  D7C4               	goto	i2l7191
 15491  000B76  0A02               	xorlw	2	; case 10
 15492  000B78  B4D8               	btfsc	status,2,c
 15493  000B7A  D72B               	goto	i2l316
 15494  000B7C  0A01               	xorlw	1	; case 11
 15495  000B7E  B4D8               	btfsc	status,2,c
 15496  000B80  D73F               	goto	i2l321
 15497  000B82  D7D7               	goto	i2l7207
 15498  000B84                     __end_of_I2C_ISR:
 15499                           	opt stack 0
 15500                           tosu	equ	0xFFF
 15501                           tosh	equ	0xFFE
 15502                           tosl	equ	0xFFD
 15503                           pclatu	equ	0xFFB
 15504                           pclath	equ	0xFFA
 15505                           tblptru	equ	0xFF8
 15506                           tblptrh	equ	0xFF7
 15507                           tblptrl	equ	0xFF6
 15508                           tablat	equ	0xFF5
 15509                           prodh	equ	0xFF4
 15510                           prodl	equ	0xFF3
 15511                           intcon	equ	0xFF2
 15512                           intcon2	equ	0xFF1
 15513                           intcon3	equ	0xFF0
 15514                           indf0	equ	0xFEF
 15515                           postinc0	equ	0xFEE
 15516                           fsr0h	equ	0xFEA
 15517                           fsr0l	equ	0xFE9
 15518                           wreg	equ	0xFE8
 15519                           postdec1	equ	0xFE5
 15520                           fsr1h	equ	0xFE2
 15521                           fsr1l	equ	0xFE1
 15522                           indf2	equ	0xFDF
 15523                           postinc2	equ	0xFDE
 15524                           postdec2	equ	0xFDD
 15525                           plusw2	equ	0xFDB
 15526                           fsr2h	equ	0xFDA
 15527                           fsr2l	equ	0xFD9
 15528                           status	equ	0xFD8
 15529                           
 15530 ;; *************** function _I2C_Stop *****************
 15531 ;; Defined at:
 15532 ;;		line 579 in file "mcc_generated_files/i2c.c"
 15533 ;; Parameters:    Size  Location     Type
 15534 ;;  completion_c    1    wreg     enum E17875
 15535 ;; Auto vars:     Size  Location     Type
 15536 ;;  completion_c    1    2[COMRAM] enum E17875
 15537 ;; Return value:  Size  Location     Type
 15538 ;;                  1    wreg      void 
 15539 ;; Registers used:
 15540 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15541 ;; Tracked objects:
 15542 ;;		On entry : 0/0
 15543 ;;		On exit  : 0/0
 15544 ;;		Unchanged: 0/0
 15545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15548 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15549 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15550 ;;Total ram usage:        3 bytes
 15551 ;; Hardware stack levels used:    1
 15552 ;; This function calls:
 15553 ;;		Nothing
 15554 ;; This function is called by:
 15555 ;;		_I2C_ISR
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           	psect	text91
 15560  00225E                     __ptext91:
 15561                           	opt stack 0
 15562  00225E                     _I2C_Stop:
 15563                           	opt stack 21
 15564                           
 15565                           ;incstack = 0
 15566                           ;I2C_Stop@completion_code stored from wreg
 15567  00225E  6E03               	movwf	I2C_Stop@completion_code,c
 15568                           
 15569                           ;i2c.c: 582: SSPCON2bits.PEN = 1;
 15570  002260  84C5               	bsf	4037,2,c	;volatile
 15571                           
 15572                           ;i2c.c: 585: if (p_i2c_current->pTrFlag != (0))
 15573  002262  0100               	movlb	0	; () banked
 15574  002264  EE20 F003          	lfsr	2,3
 15575  002268  51B2               	movf	_p_i2c_current& (0+255),w,b
 15576  00226A  26D9               	addwf	fsr2l,f,c
 15577  00226C  51B3               	movf	(_p_i2c_current+1)& (0+255),w,b
 15578  00226E  22DA               	addwfc	fsr2h,f,c
 15579  002270  50DE               	movf	postinc2,w,c
 15580  002272  10DE               	iorwf	postinc2,w,c
 15581  002274  B4D8               	btfsc	status,2,c
 15582  002276  D011               	goto	i2l6997
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;i2c.c: 586: {
 15586                           ;i2c.c: 588: *(p_i2c_current->pTrFlag) = completion_code;
 15587  002278  0100               	movlb	0	; () banked
 15588  00227A  EE20 F003          	lfsr	2,3
 15589  00227E  51B2               	movf	_p_i2c_current& (0+255),w,b
 15590  002280  26D9               	addwf	fsr2l,f,c
 15591  002282  51B3               	movf	(_p_i2c_current+1)& (0+255),w,b
 15592  002284  22DA               	addwfc	fsr2h,f,c
 15593  002286  CFDE F001          	movff	postinc2,??_I2C_Stop
 15594  00228A  CFDD F002          	movff	postdec2,??_I2C_Stop+1
 15595  00228E  C001  FFD9         	movff	??_I2C_Stop,fsr2l
 15596  002292  C002  FFDA         	movff	??_I2C_Stop+1,fsr2h
 15597  002296  C003  FFDF         	movff	I2C_Stop@completion_code,indf2
 15598  00229A                     i2l6997:
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;i2c.c: 589: }
 15602                           ;i2c.c: 592: i2c_state = S_MASTER_IDLE;
 15603  00229A  0E00               	movlw	0
 15604  00229C  6E3F               	movwf	_i2c_state,c
 15605                           
 15606                           ; BSR set to: 0
 15607  00229E  0012               	return		;funcret
 15608  0022A0                     __end_of_I2C_Stop:
 15609                           	opt stack 0
 15610                           tosu	equ	0xFFF
 15611                           tosh	equ	0xFFE
 15612                           tosl	equ	0xFFD
 15613                           pclatu	equ	0xFFB
 15614                           pclath	equ	0xFFA
 15615                           tblptru	equ	0xFF8
 15616                           tblptrh	equ	0xFF7
 15617                           tblptrl	equ	0xFF6
 15618                           tablat	equ	0xFF5
 15619                           prodh	equ	0xFF4
 15620                           prodl	equ	0xFF3
 15621                           intcon	equ	0xFF2
 15622                           intcon2	equ	0xFF1
 15623                           intcon3	equ	0xFF0
 15624                           indf0	equ	0xFEF
 15625                           postinc0	equ	0xFEE
 15626                           fsr0h	equ	0xFEA
 15627                           fsr0l	equ	0xFE9
 15628                           wreg	equ	0xFE8
 15629                           postdec1	equ	0xFE5
 15630                           fsr1h	equ	0xFE2
 15631                           fsr1l	equ	0xFE1
 15632                           indf2	equ	0xFDF
 15633                           postinc2	equ	0xFDE
 15634                           postdec2	equ	0xFDD
 15635                           plusw2	equ	0xFDB
 15636                           fsr2h	equ	0xFDA
 15637                           fsr2l	equ	0xFD9
 15638                           status	equ	0xFD8
 15639                           
 15640 ;; *************** function _I2C_FunctionComplete *****************
 15641 ;; Defined at:
 15642 ;;		line 561 in file "mcc_generated_files/i2c.c"
 15643 ;; Parameters:    Size  Location     Type
 15644 ;;		None
 15645 ;; Auto vars:     Size  Location     Type
 15646 ;;		None
 15647 ;; Return value:  Size  Location     Type
 15648 ;;                  1    wreg      void 
 15649 ;; Registers used:
 15650 ;;		wreg, status,2, status,0
 15651 ;; Tracked objects:
 15652 ;;		On entry : 0/0
 15653 ;;		On exit  : 0/0
 15654 ;;		Unchanged: 0/0
 15655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15660 ;;Total ram usage:        0 bytes
 15661 ;; Hardware stack levels used:    1
 15662 ;; This function calls:
 15663 ;;		Nothing
 15664 ;; This function is called by:
 15665 ;;		_I2C_ISR
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           	psect	text92
 15670  002902                     __ptext92:
 15671                           	opt stack 0
 15672  002902                     _I2C_FunctionComplete:
 15673                           	opt stack 21
 15674                           
 15675                           ;i2c.c: 565: p_i2c_trb_current++;
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;incstack = 0
 15679  002902  0E05               	movlw	5
 15680  002904  0100               	movlb	0	; () banked
 15681  002906  27B4               	addwf	_p_i2c_trb_current& (0+255),f,b
 15682  002908  0E00               	movlw	0
 15683  00290A  23B5               	addwfc	(_p_i2c_trb_current+1)& (0+255),f,b
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;i2c.c: 568: if(--i2c_trb_count == 0)
 15687  00290C  2E40               	decfsz	_i2c_trb_count,f,c
 15688  00290E  D003               	goto	i2l7005
 15689                           
 15690                           ; BSR set to: 0
 15691                           ;i2c.c: 569: {
 15692                           ;i2c.c: 570: i2c_state = S_MASTER_SEND_STOP;
 15693  002910  0E04               	movlw	4
 15694  002912  6E3F               	movwf	_i2c_state,c
 15695                           
 15696                           ;i2c.c: 571: }
 15697  002914  0012               	return	
 15698  002916                     i2l7005:
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;i2c.c: 572: else
 15702                           ;i2c.c: 573: {
 15703                           ;i2c.c: 574: i2c_state = S_MASTER_RESTART;
 15704  002916  0E01               	movlw	1
 15705  002918  6E3F               	movwf	_i2c_state,c
 15706  00291A  0012               	return	
 15707  00291C                     __end_of_I2C_FunctionComplete:
 15708                           	opt stack 0
 15709                           tosu	equ	0xFFF
 15710                           tosh	equ	0xFFE
 15711                           tosl	equ	0xFFD
 15712                           pclatu	equ	0xFFB
 15713                           pclath	equ	0xFFA
 15714                           tblptru	equ	0xFF8
 15715                           tblptrh	equ	0xFF7
 15716                           tblptrl	equ	0xFF6
 15717                           tablat	equ	0xFF5
 15718                           prodh	equ	0xFF4
 15719                           prodl	equ	0xFF3
 15720                           intcon	equ	0xFF2
 15721                           intcon2	equ	0xFF1
 15722                           intcon3	equ	0xFF0
 15723                           indf0	equ	0xFEF
 15724                           postinc0	equ	0xFEE
 15725                           fsr0h	equ	0xFEA
 15726                           fsr0l	equ	0xFE9
 15727                           wreg	equ	0xFE8
 15728                           postdec1	equ	0xFE5
 15729                           fsr1h	equ	0xFE2
 15730                           fsr1l	equ	0xFE1
 15731                           indf2	equ	0xFDF
 15732                           postinc2	equ	0xFDE
 15733                           postdec2	equ	0xFDD
 15734                           plusw2	equ	0xFDB
 15735                           fsr2h	equ	0xFDA
 15736                           fsr2l	equ	0xFD9
 15737                           status	equ	0xFD8
 15738                           
 15739 ;; *************** function _I2C_BusCollisionISR *****************
 15740 ;; Defined at:
 15741 ;;		line 726 in file "mcc_generated_files/i2c.c"
 15742 ;; Parameters:    Size  Location     Type
 15743 ;;		None
 15744 ;; Auto vars:     Size  Location     Type
 15745 ;;		None
 15746 ;; Return value:  Size  Location     Type
 15747 ;;                  1    wreg      void 
 15748 ;; Registers used:
 15749 ;;		None
 15750 ;; Tracked objects:
 15751 ;;		On entry : 0/0
 15752 ;;		On exit  : 0/0
 15753 ;;		Unchanged: 0/0
 15754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15759 ;;Total ram usage:        0 bytes
 15760 ;; Hardware stack levels used:    1
 15761 ;; This function calls:
 15762 ;;		Nothing
 15763 ;; This function is called by:
 15764 ;;		_INTERRUPT_InterruptManager
 15765 ;; This function uses a non-reentrant model
 15766 ;;
 15767                           
 15768                           	psect	text93
 15769  002A30                     __ptext93:
 15770                           	opt stack 0
 15771  002A30                     _I2C_BusCollisionISR:
 15772                           	opt stack 22
 15773                           
 15774                           ; BSR set to: 0
 15775                           ;incstack = 0
 15776  002A30  0012               	return		;funcret
 15777  002A32                     __end_of_I2C_BusCollisionISR:
 15778                           	opt stack 0
 15779                           tosu	equ	0xFFF
 15780                           tosh	equ	0xFFE
 15781                           tosl	equ	0xFFD
 15782                           pclatu	equ	0xFFB
 15783                           pclath	equ	0xFFA
 15784                           tblptru	equ	0xFF8
 15785                           tblptrh	equ	0xFF7
 15786                           tblptrl	equ	0xFF6
 15787                           tablat	equ	0xFF5
 15788                           prodh	equ	0xFF4
 15789                           prodl	equ	0xFF3
 15790                           intcon	equ	0xFF2
 15791                           intcon2	equ	0xFF1
 15792                           intcon3	equ	0xFF0
 15793                           indf0	equ	0xFEF
 15794                           postinc0	equ	0xFEE
 15795                           fsr0h	equ	0xFEA
 15796                           fsr0l	equ	0xFE9
 15797                           wreg	equ	0xFE8
 15798                           postdec1	equ	0xFE5
 15799                           fsr1h	equ	0xFE2
 15800                           fsr1l	equ	0xFE1
 15801                           indf2	equ	0xFDF
 15802                           postinc2	equ	0xFDE
 15803                           postdec2	equ	0xFDD
 15804                           plusw2	equ	0xFDB
 15805                           fsr2h	equ	0xFDA
 15806                           fsr2l	equ	0xFD9
 15807                           status	equ	0xFD8
 15808                           
 15809 ;; *************** function _EUSART2_Transmit_ISR *****************
 15810 ;; Defined at:
 15811 ;;		line 158 in file "mcc_generated_files/eusart2.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;		None
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;		None
 15816 ;; Return value:  Size  Location     Type
 15817 ;;                  1    wreg      void 
 15818 ;; Registers used:
 15819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15820 ;; Tracked objects:
 15821 ;;		On entry : 0/0
 15822 ;;		On exit  : 0/0
 15823 ;;		Unchanged: 0/0
 15824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15829 ;;Total ram usage:        0 bytes
 15830 ;; Hardware stack levels used:    1
 15831 ;; This function calls:
 15832 ;;		Nothing
 15833 ;; This function is called by:
 15834 ;;		_INTERRUPT_InterruptManager
 15835 ;; This function uses a non-reentrant model
 15836 ;;
 15837                           
 15838                           	psect	text94
 15839  0025BA                     __ptext94:
 15840                           	opt stack 0
 15841  0025BA                     _EUSART2_Transmit_ISR:
 15842                           	opt stack 22
 15843                           
 15844                           ;eusart2.c: 162: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 15845                           
 15846                           ;incstack = 0
 15847  0025BA  0E08               	movlw	8
 15848  0025BC  0101               	movlb	1	; () banked
 15849  0025BE  61F7               	cpfslt	_eusart2TxBufferRemaining& (0+255),b	;volatile
 15850  0025C0  D013               	goto	i2l830
 15851                           
 15852                           ; BSR set to: 1
 15853                           ;eusart2.c: 163: {
 15854                           ;eusart2.c: 164: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
 15855  0025C2  503E               	movf	_eusart2TxTail,w,c	;volatile
 15856  0025C4  0D01               	mullw	1
 15857  0025C6  0E38               	movlw	low _eusart2TxBuffer
 15858  0025C8  24F3               	addwf	prodl,w,c
 15859  0025CA  6ED9               	movwf	fsr2l,c
 15860  0025CC  0E01               	movlw	high _eusart2TxBuffer
 15861  0025CE  20F4               	addwfc	prodh,w,c
 15862  0025D0  6EDA               	movwf	fsr2h,c
 15863  0025D2  50DF               	movf	indf2,w,c
 15864  0025D4  6E79               	movwf	3961,c	;volatile
 15865                           
 15866                           ; BSR set to: 1
 15867  0025D6  2A3E               	incf	_eusart2TxTail,f,c	;volatile
 15868                           
 15869                           ; BSR set to: 1
 15870                           ;eusart2.c: 165: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 15871  0025D8  0E07               	movlw	7
 15872  0025DA  643E               	cpfsgt	_eusart2TxTail,c	;volatile
 15873  0025DC  D002               	goto	i2l5687
 15874                           
 15875                           ; BSR set to: 1
 15876                           ;eusart2.c: 166: {
 15877                           ;eusart2.c: 167: eusart2TxTail = 0;
 15878  0025DE  0E00               	movlw	0
 15879  0025E0  6E3E               	movwf	_eusart2TxTail,c	;volatile
 15880  0025E2                     i2l5687:
 15881                           
 15882                           ; BSR set to: 1
 15883                           ;eusart2.c: 168: }
 15884                           ;eusart2.c: 169: eusart2TxBufferRemaining++;
 15885  0025E2  0101               	movlb	1	; () banked
 15886  0025E4  2BF7               	incf	_eusart2TxBufferRemaining& (0+255),f,b	;volatile
 15887                           
 15888                           ;eusart2.c: 170: }
 15889  0025E6  0012               	return	
 15890  0025E8                     i2l830:
 15891                           
 15892                           ; BSR set to: 1
 15893                           ;eusart2.c: 171: else
 15894                           ;eusart2.c: 172: {
 15895                           ;eusart2.c: 173: PIE3bits.TX2IE = 0;
 15896  0025E8  98A3               	bcf	4003,4,c	;volatile
 15897  0025EA  0012               	return	
 15898  0025EC                     __end_of_EUSART2_Transmit_ISR:
 15899                           	opt stack 0
 15900                           tosu	equ	0xFFF
 15901                           tosh	equ	0xFFE
 15902                           tosl	equ	0xFFD
 15903                           pclatu	equ	0xFFB
 15904                           pclath	equ	0xFFA
 15905                           tblptru	equ	0xFF8
 15906                           tblptrh	equ	0xFF7
 15907                           tblptrl	equ	0xFF6
 15908                           tablat	equ	0xFF5
 15909                           prodh	equ	0xFF4
 15910                           prodl	equ	0xFF3
 15911                           intcon	equ	0xFF2
 15912                           intcon2	equ	0xFF1
 15913                           intcon3	equ	0xFF0
 15914                           indf0	equ	0xFEF
 15915                           postinc0	equ	0xFEE
 15916                           fsr0h	equ	0xFEA
 15917                           fsr0l	equ	0xFE9
 15918                           wreg	equ	0xFE8
 15919                           postdec1	equ	0xFE5
 15920                           fsr1h	equ	0xFE2
 15921                           fsr1l	equ	0xFE1
 15922                           indf2	equ	0xFDF
 15923                           postinc2	equ	0xFDE
 15924                           postdec2	equ	0xFDD
 15925                           plusw2	equ	0xFDB
 15926                           fsr2h	equ	0xFDA
 15927                           fsr2l	equ	0xFD9
 15928                           status	equ	0xFD8
 15929                           
 15930 ;; *************** function _EUSART2_Receive_ISR *****************
 15931 ;; Defined at:
 15932 ;;		line 177 in file "mcc_generated_files/eusart2.c"
 15933 ;; Parameters:    Size  Location     Type
 15934 ;;		None
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;		None
 15937 ;; Return value:  Size  Location     Type
 15938 ;;                  1    wreg      void 
 15939 ;; Registers used:
 15940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15941 ;; Tracked objects:
 15942 ;;		On entry : 0/0
 15943 ;;		On exit  : 0/0
 15944 ;;		Unchanged: 0/0
 15945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15950 ;;Total ram usage:        0 bytes
 15951 ;; Hardware stack levels used:    1
 15952 ;; This function calls:
 15953 ;;		Nothing
 15954 ;; This function is called by:
 15955 ;;		_INTERRUPT_InterruptManager
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           	psect	text95
 15960  002734                     __ptext95:
 15961                           	opt stack 0
 15962  002734                     _EUSART2_Receive_ISR:
 15963                           	opt stack 22
 15964                           
 15965                           ;eusart2.c: 180: if(1 == RCSTA2bits.OERR)
 15966                           
 15967                           ; BSR set to: 1
 15968                           ;incstack = 0
 15969  002734  A2A6               	btfss	4006,1,c	;volatile
 15970  002736  D002               	goto	i2l5693
 15971                           
 15972                           ;eusart2.c: 181: {
 15973                           ;eusart2.c: 184: RCSTA2bits.CREN = 0;
 15974  002738  98A6               	bcf	4006,4,c	;volatile
 15975                           
 15976                           ;eusart2.c: 185: RCSTA2bits.CREN = 1;
 15977  00273A  88A6               	bsf	4006,4,c	;volatile
 15978  00273C                     i2l5693:
 15979                           
 15980                           ;eusart2.c: 186: }
 15981                           ;eusart2.c: 189: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
 15982  00273C  503B               	movf	_eusart2RxHead,w,c	;volatile
 15983  00273E  0D01               	mullw	1
 15984  002740  0E30               	movlw	low _eusart2RxBuffer
 15985  002742  24F3               	addwf	prodl,w,c
 15986  002744  6ED9               	movwf	fsr2l,c
 15987  002746  0E01               	movlw	high _eusart2RxBuffer
 15988  002748  20F4               	addwfc	prodh,w,c
 15989  00274A  6EDA               	movwf	fsr2h,c
 15990  00274C  CF7A FFDF          	movff	3962,indf2	;volatile
 15991  002750  2A3B               	incf	_eusart2RxHead,f,c	;volatile
 15992                           
 15993                           ;eusart2.c: 190: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 15994  002752  0E07               	movlw	7
 15995  002754  643B               	cpfsgt	_eusart2RxHead,c	;volatile
 15996  002756  D002               	goto	i2l5701
 15997                           
 15998                           ;eusart2.c: 191: {
 15999                           ;eusart2.c: 192: eusart2RxHead = 0;
 16000  002758  0E00               	movlw	0
 16001  00275A  6E3B               	movwf	_eusart2RxHead,c	;volatile
 16002  00275C                     i2l5701:
 16003                           
 16004                           ;eusart2.c: 193: }
 16005                           ;eusart2.c: 194: eusart2RxCount++;
 16006  00275C  2A3A               	incf	_eusart2RxCount,f,c	;volatile
 16007  00275E  0012               	return		;funcret
 16008  002760                     __end_of_EUSART2_Receive_ISR:
 16009                           	opt stack 0
 16010                           tosu	equ	0xFFF
 16011                           tosh	equ	0xFFE
 16012                           tosl	equ	0xFFD
 16013                           pclatu	equ	0xFFB
 16014                           pclath	equ	0xFFA
 16015                           tblptru	equ	0xFF8
 16016                           tblptrh	equ	0xFF7
 16017                           tblptrl	equ	0xFF6
 16018                           tablat	equ	0xFF5
 16019                           prodh	equ	0xFF4
 16020                           prodl	equ	0xFF3
 16021                           intcon	equ	0xFF2
 16022                           intcon2	equ	0xFF1
 16023                           intcon3	equ	0xFF0
 16024                           indf0	equ	0xFEF
 16025                           postinc0	equ	0xFEE
 16026                           fsr0h	equ	0xFEA
 16027                           fsr0l	equ	0xFE9
 16028                           wreg	equ	0xFE8
 16029                           postdec1	equ	0xFE5
 16030                           fsr1h	equ	0xFE2
 16031                           fsr1l	equ	0xFE1
 16032                           indf2	equ	0xFDF
 16033                           postinc2	equ	0xFDE
 16034                           postdec2	equ	0xFDD
 16035                           plusw2	equ	0xFDB
 16036                           fsr2h	equ	0xFDA
 16037                           fsr2l	equ	0xFD9
 16038                           status	equ	0xFD8
 16039                           
 16040 ;; *************** function _EUSART1_Transmit_ISR *****************
 16041 ;; Defined at:
 16042 ;;		line 168 in file "mcc_generated_files/eusart1.c"
 16043 ;; Parameters:    Size  Location     Type
 16044 ;;		None
 16045 ;; Auto vars:     Size  Location     Type
 16046 ;;		None
 16047 ;; Return value:  Size  Location     Type
 16048 ;;                  1    wreg      void 
 16049 ;; Registers used:
 16050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16051 ;; Tracked objects:
 16052 ;;		On entry : 0/0
 16053 ;;		On exit  : 0/0
 16054 ;;		Unchanged: 0/0
 16055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16060 ;;Total ram usage:        0 bytes
 16061 ;; Hardware stack levels used:    1
 16062 ;; This function calls:
 16063 ;;		Nothing
 16064 ;; This function is called by:
 16065 ;;		_INTERRUPT_InterruptManager
 16066 ;; This function uses a non-reentrant model
 16067 ;;
 16068                           
 16069                           	psect	text96
 16070  0025EC                     __ptext96:
 16071                           	opt stack 0
 16072  0025EC                     _EUSART1_Transmit_ISR:
 16073                           	opt stack 22
 16074                           
 16075                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16076                           
 16077                           ;incstack = 0
 16078  0025EC  0E08               	movlw	8
 16079  0025EE  0101               	movlb	1	; () banked
 16080  0025F0  61F6               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16081  0025F2  D013               	goto	i2l605
 16082                           
 16083                           ; BSR set to: 1
 16084                           ;eusart1.c: 173: {
 16085                           ;eusart1.c: 174: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16086  0025F4  5039               	movf	_eusart1TxTail,w,c	;volatile
 16087  0025F6  0D01               	mullw	1
 16088  0025F8  0E28               	movlw	low _eusart1TxBuffer
 16089  0025FA  24F3               	addwf	prodl,w,c
 16090  0025FC  6ED9               	movwf	fsr2l,c
 16091  0025FE  0E01               	movlw	high _eusart1TxBuffer
 16092  002600  20F4               	addwfc	prodh,w,c
 16093  002602  6EDA               	movwf	fsr2h,c
 16094  002604  50DF               	movf	indf2,w,c
 16095  002606  6EAD               	movwf	4013,c	;volatile
 16096                           
 16097                           ; BSR set to: 1
 16098  002608  2A39               	incf	_eusart1TxTail,f,c	;volatile
 16099                           
 16100                           ; BSR set to: 1
 16101                           ;eusart1.c: 175: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16102  00260A  0E07               	movlw	7
 16103  00260C  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 16104  00260E  D002               	goto	i2l5713
 16105                           
 16106                           ; BSR set to: 1
 16107                           ;eusart1.c: 176: {
 16108                           ;eusart1.c: 177: eusart1TxTail = 0;
 16109  002610  0E00               	movlw	0
 16110  002612  6E39               	movwf	_eusart1TxTail,c	;volatile
 16111  002614                     i2l5713:
 16112                           
 16113                           ; BSR set to: 1
 16114                           ;eusart1.c: 178: }
 16115                           ;eusart1.c: 179: eusart1TxBufferRemaining++;
 16116  002614  0101               	movlb	1	; () banked
 16117  002616  2BF6               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16118                           
 16119                           ;eusart1.c: 180: }
 16120  002618  0012               	return	
 16121  00261A                     i2l605:
 16122                           
 16123                           ; BSR set to: 1
 16124                           ;eusart1.c: 181: else
 16125                           ;eusart1.c: 182: {
 16126                           ;eusart1.c: 183: PIE1bits.TX1IE = 0;
 16127  00261A  989D               	bcf	3997,4,c	;volatile
 16128  00261C  0012               	return	
 16129  00261E                     __end_of_EUSART1_Transmit_ISR:
 16130                           	opt stack 0
 16131                           tosu	equ	0xFFF
 16132                           tosh	equ	0xFFE
 16133                           tosl	equ	0xFFD
 16134                           pclatu	equ	0xFFB
 16135                           pclath	equ	0xFFA
 16136                           tblptru	equ	0xFF8
 16137                           tblptrh	equ	0xFF7
 16138                           tblptrl	equ	0xFF6
 16139                           tablat	equ	0xFF5
 16140                           prodh	equ	0xFF4
 16141                           prodl	equ	0xFF3
 16142                           intcon	equ	0xFF2
 16143                           intcon2	equ	0xFF1
 16144                           intcon3	equ	0xFF0
 16145                           indf0	equ	0xFEF
 16146                           postinc0	equ	0xFEE
 16147                           fsr0h	equ	0xFEA
 16148                           fsr0l	equ	0xFE9
 16149                           wreg	equ	0xFE8
 16150                           postdec1	equ	0xFE5
 16151                           fsr1h	equ	0xFE2
 16152                           fsr1l	equ	0xFE1
 16153                           indf2	equ	0xFDF
 16154                           postinc2	equ	0xFDE
 16155                           postdec2	equ	0xFDD
 16156                           plusw2	equ	0xFDB
 16157                           fsr2h	equ	0xFDA
 16158                           fsr2l	equ	0xFD9
 16159                           status	equ	0xFD8
 16160                           
 16161 ;; *************** function _EUSART1_Receive_ISR *****************
 16162 ;; Defined at:
 16163 ;;		line 187 in file "mcc_generated_files/eusart1.c"
 16164 ;; Parameters:    Size  Location     Type
 16165 ;;		None
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;		None
 16168 ;; Return value:  Size  Location     Type
 16169 ;;                  1    wreg      void 
 16170 ;; Registers used:
 16171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16172 ;; Tracked objects:
 16173 ;;		On entry : 0/0
 16174 ;;		On exit  : 0/0
 16175 ;;		Unchanged: 0/0
 16176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16181 ;;Total ram usage:        0 bytes
 16182 ;; Hardware stack levels used:    1
 16183 ;; This function calls:
 16184 ;;		Nothing
 16185 ;; This function is called by:
 16186 ;;		_INTERRUPT_InterruptManager
 16187 ;; This function uses a non-reentrant model
 16188 ;;
 16189                           
 16190                           	psect	text97
 16191  002760                     __ptext97:
 16192                           	opt stack 0
 16193  002760                     _EUSART1_Receive_ISR:
 16194                           	opt stack 22
 16195                           
 16196                           ;eusart1.c: 190: if(1 == RCSTA1bits.OERR)
 16197                           
 16198                           ; BSR set to: 1
 16199                           ;incstack = 0
 16200  002760  A2AB               	btfss	4011,1,c	;volatile
 16201  002762  D002               	goto	i2l5719
 16202                           
 16203                           ;eusart1.c: 191: {
 16204                           ;eusart1.c: 194: RCSTA1bits.CREN = 0;
 16205  002764  98AB               	bcf	4011,4,c	;volatile
 16206                           
 16207                           ;eusart1.c: 195: RCSTA1bits.CREN = 1;
 16208  002766  88AB               	bsf	4011,4,c	;volatile
 16209  002768                     i2l5719:
 16210                           
 16211                           ;eusart1.c: 196: }
 16212                           ;eusart1.c: 199: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 16213  002768  5036               	movf	_eusart1RxHead,w,c	;volatile
 16214  00276A  0D01               	mullw	1
 16215  00276C  0E20               	movlw	low _eusart1RxBuffer
 16216  00276E  24F3               	addwf	prodl,w,c
 16217  002770  6ED9               	movwf	fsr2l,c
 16218  002772  0E01               	movlw	high _eusart1RxBuffer
 16219  002774  20F4               	addwfc	prodh,w,c
 16220  002776  6EDA               	movwf	fsr2h,c
 16221  002778  CFAE FFDF          	movff	4014,indf2	;volatile
 16222  00277C  2A36               	incf	_eusart1RxHead,f,c	;volatile
 16223                           
 16224                           ;eusart1.c: 200: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 16225  00277E  0E07               	movlw	7
 16226  002780  6436               	cpfsgt	_eusart1RxHead,c	;volatile
 16227  002782  D002               	goto	i2l5727
 16228                           
 16229                           ;eusart1.c: 201: {
 16230                           ;eusart1.c: 202: eusart1RxHead = 0;
 16231  002784  0E00               	movlw	0
 16232  002786  6E36               	movwf	_eusart1RxHead,c	;volatile
 16233  002788                     i2l5727:
 16234                           
 16235                           ;eusart1.c: 203: }
 16236                           ;eusart1.c: 204: eusart1RxCount++;
 16237  002788  2A35               	incf	_eusart1RxCount,f,c	;volatile
 16238  00278A  0012               	return		;funcret
 16239  00278C                     __end_of_EUSART1_Receive_ISR:
 16240                           	opt stack 0
 16241                           tosu	equ	0xFFF
 16242                           tosh	equ	0xFFE
 16243                           tosl	equ	0xFFD
 16244                           pclatu	equ	0xFFB
 16245                           pclath	equ	0xFFA
 16246                           tblptru	equ	0xFF8
 16247                           tblptrh	equ	0xFF7
 16248                           tblptrl	equ	0xFF6
 16249                           tablat	equ	0xFF5
 16250                           prodh	equ	0xFF4
 16251                           prodl	equ	0xFF3
 16252                           intcon	equ	0xFF2
 16253                           intcon2	equ	0xFF1
 16254                           intcon3	equ	0xFF0
 16255                           indf0	equ	0xFEF
 16256                           postinc0	equ	0xFEE
 16257                           fsr0h	equ	0xFEA
 16258                           fsr0l	equ	0xFE9
 16259                           wreg	equ	0xFE8
 16260                           postdec1	equ	0xFE5
 16261                           fsr1h	equ	0xFE2
 16262                           fsr1l	equ	0xFE1
 16263                           indf2	equ	0xFDF
 16264                           postinc2	equ	0xFDE
 16265                           postdec2	equ	0xFDD
 16266                           plusw2	equ	0xFDB
 16267                           fsr2h	equ	0xFDA
 16268                           fsr2l	equ	0xFD9
 16269                           status	equ	0xFD8
 16270                           
 16271 ;; *************** function _ADC_ISR *****************
 16272 ;; Defined at:
 16273 ;;		line 137 in file "mcc_generated_files/adc.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;		None
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;		None
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  1    wreg      void 
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0, cstack
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16290 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16291 ;;Total ram usage:        1 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    1
 16294 ;; This function calls:
 16295 ;;		_ADC_GetConversionResult_8bit
 16296 ;; This function is called by:
 16297 ;;		_INTERRUPT_InterruptManager
 16298 ;; This function uses a non-reentrant model
 16299 ;;
 16300                           
 16301                           	psect	text98
 16302  002934                     __ptext98:
 16303                           	opt stack 0
 16304  002934                     _ADC_ISR:
 16305                           	opt stack 21
 16306                           
 16307                           ;adc.c: 140: PIR1bits.ADIF = 0;
 16308                           
 16309                           ;incstack = 0
 16310  002934  9C9E               	bcf	3998,6,c	;volatile
 16311                           
 16312                           ;adc.c: 143: ADC_Data = 255 - ADC_GetConversionResult_8bit();
 16313  002936  EC04  F015         	call	_ADC_GetConversionResult_8bit	;wreg free
 16314  00293A  5001               	movf	?_ADC_GetConversionResult_8bit,w,c
 16315  00293C  0800               	sublw	0
 16316  00293E  6E03               	movwf	??_ADC_ISR& (0+255),c
 16317  002940  0403               	decf	??_ADC_ISR,w,c
 16318  002942  6E27               	movwf	_ADC_Data,c
 16319                           
 16320                           ;adc.c: 144: ADC_Data_Ready = 1;
 16321  002944  0E01               	movlw	1
 16322  002946  6E28               	movwf	_ADC_Data_Ready,c	;volatile
 16323  002948  0012               	return		;funcret
 16324  00294A                     __end_of_ADC_ISR:
 16325                           	opt stack 0
 16326                           tosu	equ	0xFFF
 16327                           tosh	equ	0xFFE
 16328                           tosl	equ	0xFFD
 16329                           pclatu	equ	0xFFB
 16330                           pclath	equ	0xFFA
 16331                           tblptru	equ	0xFF8
 16332                           tblptrh	equ	0xFF7
 16333                           tblptrl	equ	0xFF6
 16334                           tablat	equ	0xFF5
 16335                           prodh	equ	0xFF4
 16336                           prodl	equ	0xFF3
 16337                           intcon	equ	0xFF2
 16338                           intcon2	equ	0xFF1
 16339                           intcon3	equ	0xFF0
 16340                           indf0	equ	0xFEF
 16341                           postinc0	equ	0xFEE
 16342                           fsr0h	equ	0xFEA
 16343                           fsr0l	equ	0xFE9
 16344                           wreg	equ	0xFE8
 16345                           postdec1	equ	0xFE5
 16346                           fsr1h	equ	0xFE2
 16347                           fsr1l	equ	0xFE1
 16348                           indf2	equ	0xFDF
 16349                           postinc2	equ	0xFDE
 16350                           postdec2	equ	0xFDD
 16351                           plusw2	equ	0xFDB
 16352                           fsr2h	equ	0xFDA
 16353                           fsr2l	equ	0xFD9
 16354                           status	equ	0xFD8
 16355                           
 16356 ;; *************** function _ADC_GetConversionResult_8bit *****************
 16357 ;; Defined at:
 16358 ;;		line 108 in file "mcc_generated_files/adc.c"
 16359 ;; Parameters:    Size  Location     Type
 16360 ;;		None
 16361 ;; Auto vars:     Size  Location     Type
 16362 ;;		None
 16363 ;; Return value:  Size  Location     Type
 16364 ;;                  2    0[COMRAM] unsigned int 
 16365 ;; Registers used:
 16366 ;;		None
 16367 ;; Tracked objects:
 16368 ;;		On entry : 0/0
 16369 ;;		On exit  : 0/0
 16370 ;;		Unchanged: 0/0
 16371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16376 ;;Total ram usage:        2 bytes
 16377 ;; Hardware stack levels used:    1
 16378 ;; This function calls:
 16379 ;;		Nothing
 16380 ;; This function is called by:
 16381 ;;		_ADC_ISR
 16382 ;; This function uses a non-reentrant model
 16383 ;;
 16384                           
 16385                           	psect	text99
 16386  002A08                     __ptext99:
 16387                           	opt stack 0
 16388  002A08                     _ADC_GetConversionResult_8bit:
 16389                           	opt stack 21
 16390                           
 16391                           ;adc.c: 111: return (adc_result_t)(ADRESH);
 16392                           
 16393                           ;incstack = 0
 16394  002A08  CFC4 F001          	movff	4036,?_ADC_GetConversionResult_8bit	;volatile
 16395  002A0C  6A02               	clrf	?_ADC_GetConversionResult_8bit+1,c
 16396  002A0E  0012               	return		;funcret
 16397  002A10                     __end_of_ADC_GetConversionResult_8bit:
 16398                           	opt stack 0
 16399                           tosu	equ	0xFFF
 16400                           tosh	equ	0xFFE
 16401                           tosl	equ	0xFFD
 16402                           pclatu	equ	0xFFB
 16403                           pclath	equ	0xFFA
 16404                           tblptru	equ	0xFF8
 16405                           tblptrh	equ	0xFF7
 16406                           tblptrl	equ	0xFF6
 16407                           tablat	equ	0xFF5
 16408                           prodh	equ	0xFF4
 16409                           prodl	equ	0xFF3
 16410                           intcon	equ	0xFF2
 16411                           intcon2	equ	0xFF1
 16412                           intcon3	equ	0xFF0
 16413                           indf0	equ	0xFEF
 16414                           postinc0	equ	0xFEE
 16415                           fsr0h	equ	0xFEA
 16416                           fsr0l	equ	0xFE9
 16417                           wreg	equ	0xFE8
 16418                           postdec1	equ	0xFE5
 16419                           fsr1h	equ	0xFE2
 16420                           fsr1l	equ	0xFE1
 16421                           indf2	equ	0xFDF
 16422                           postinc2	equ	0xFDE
 16423                           postdec2	equ	0xFDD
 16424                           plusw2	equ	0xFDB
 16425                           fsr2h	equ	0xFDA
 16426                           fsr2l	equ	0xFD9
 16427                           status	equ	0xFD8
 16428                           tosu	equ	0xFFF
 16429                           tosh	equ	0xFFE
 16430                           tosl	equ	0xFFD
 16431                           pclatu	equ	0xFFB
 16432                           pclath	equ	0xFFA
 16433                           tblptru	equ	0xFF8
 16434                           tblptrh	equ	0xFF7
 16435                           tblptrl	equ	0xFF6
 16436                           tablat	equ	0xFF5
 16437                           prodh	equ	0xFF4
 16438                           prodl	equ	0xFF3
 16439                           intcon	equ	0xFF2
 16440                           intcon2	equ	0xFF1
 16441                           intcon3	equ	0xFF0
 16442                           indf0	equ	0xFEF
 16443                           postinc0	equ	0xFEE
 16444                           fsr0h	equ	0xFEA
 16445                           fsr0l	equ	0xFE9
 16446                           wreg	equ	0xFE8
 16447                           postdec1	equ	0xFE5
 16448                           fsr1h	equ	0xFE2
 16449                           fsr1l	equ	0xFE1
 16450                           indf2	equ	0xFDF
 16451                           postinc2	equ	0xFDE
 16452                           postdec2	equ	0xFDD
 16453                           plusw2	equ	0xFDB
 16454                           fsr2h	equ	0xFDA
 16455                           fsr2l	equ	0xFD9
 16456                           status	equ	0xFD8
 16457                           
 16458                           	psect	text100
 16459  000000                     __ptext100:
 16460                           	opt stack 0
 16461                           tosu	equ	0xFFF
 16462                           tosh	equ	0xFFE
 16463                           tosl	equ	0xFFD
 16464                           pclatu	equ	0xFFB
 16465                           pclath	equ	0xFFA
 16466                           tblptru	equ	0xFF8
 16467                           tblptrh	equ	0xFF7
 16468                           tblptrl	equ	0xFF6
 16469                           tablat	equ	0xFF5
 16470                           prodh	equ	0xFF4
 16471                           prodl	equ	0xFF3
 16472                           intcon	equ	0xFF2
 16473                           intcon2	equ	0xFF1
 16474                           intcon3	equ	0xFF0
 16475                           indf0	equ	0xFEF
 16476                           postinc0	equ	0xFEE
 16477                           fsr0h	equ	0xFEA
 16478                           fsr0l	equ	0xFE9
 16479                           wreg	equ	0xFE8
 16480                           postdec1	equ	0xFE5
 16481                           fsr1h	equ	0xFE2
 16482                           fsr1l	equ	0xFE1
 16483                           indf2	equ	0xFDF
 16484                           postinc2	equ	0xFDE
 16485                           postdec2	equ	0xFDD
 16486                           plusw2	equ	0xFDB
 16487                           fsr2h	equ	0xFDA
 16488                           fsr2l	equ	0xFD9
 16489                           status	equ	0xFD8
 16490                           
 16491                           	psect	rparam
 16492  0000                     tosu	equ	0xFFF
 16493                           tosh	equ	0xFFE
 16494                           tosl	equ	0xFFD
 16495                           pclatu	equ	0xFFB
 16496                           pclath	equ	0xFFA
 16497                           tblptru	equ	0xFF8
 16498                           tblptrh	equ	0xFF7
 16499                           tblptrl	equ	0xFF6
 16500                           tablat	equ	0xFF5
 16501                           prodh	equ	0xFF4
 16502                           prodl	equ	0xFF3
 16503                           intcon	equ	0xFF2
 16504                           intcon2	equ	0xFF1
 16505                           intcon3	equ	0xFF0
 16506                           indf0	equ	0xFEF
 16507                           postinc0	equ	0xFEE
 16508                           fsr0h	equ	0xFEA
 16509                           fsr0l	equ	0xFE9
 16510                           wreg	equ	0xFE8
 16511                           postdec1	equ	0xFE5
 16512                           fsr1h	equ	0xFE2
 16513                           fsr1l	equ	0xFE1
 16514                           indf2	equ	0xFDF
 16515                           postinc2	equ	0xFDE
 16516                           postdec2	equ	0xFDD
 16517                           plusw2	equ	0xFDB
 16518                           fsr2h	equ	0xFDA
 16519                           fsr2l	equ	0xFD9
 16520                           status	equ	0xFD8
 16521                           
 16522                           	psect	temp
 16523  00004C                     btemp:
 16524                           	opt stack 0
 16525  00004C                     	ds	1
 16526  0000                     int$flags	set	btemp
 16527                           tosu	equ	0xFFF
 16528                           tosh	equ	0xFFE
 16529                           tosl	equ	0xFFD
 16530                           pclatu	equ	0xFFB
 16531                           pclath	equ	0xFFA
 16532                           tblptru	equ	0xFF8
 16533                           tblptrh	equ	0xFF7
 16534                           tblptrl	equ	0xFF6
 16535                           tablat	equ	0xFF5
 16536                           prodh	equ	0xFF4
 16537                           prodl	equ	0xFF3
 16538                           intcon	equ	0xFF2
 16539                           intcon2	equ	0xFF1
 16540                           intcon3	equ	0xFF0
 16541                           indf0	equ	0xFEF
 16542                           postinc0	equ	0xFEE
 16543                           fsr0h	equ	0xFEA
 16544                           fsr0l	equ	0xFE9
 16545                           wreg	equ	0xFE8
 16546                           postdec1	equ	0xFE5
 16547                           fsr1h	equ	0xFE2
 16548                           fsr1l	equ	0xFE1
 16549                           indf2	equ	0xFDF
 16550                           postinc2	equ	0xFDE
 16551                           postdec2	equ	0xFDD
 16552                           plusw2	equ	0xFDB
 16553                           fsr2h	equ	0xFDA
 16554                           fsr2l	equ	0xFD9
 16555                           status	equ	0xFD8


Data Sizes:
    Strings     1161
    Constant    274
    Data        35
    BSS         258
    Persistent  19
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      75
    BANK0           160     75      98
    BANK1           256      0     248
    BANK2           256    137     137
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    i2c_tr_queue.pTrFlag	PTR enum E17875 size(2) Largest target is 0
		 -> status(COMRAM[1]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 4
		 -> Read_Commands@delim(BANK2[4]), LED_Control@delim(BANK0[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> Read_Commands@delim(BANK2[4]), LED_Control@delim(BANK0[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 4
		 -> Read_Commands@delim(BANK2[4]), LED_Control@delim(BANK0[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> Read_Commands@delim(BANK2[4]), LED_Control@delim(BANK0[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> Read_Commands@delim(BANK2[4]), LED_Control@delim(BANK0[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), STR_85(CODE[1]), STR_76(CODE[1]), STR_60(CODE[1]), 
		 -> STR_45(CODE[1]), STR_29(CODE[1]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 128
		 -> commands(BANK1[128]), LED_Control@second_command(BANK0[16]), LED_Control@first_command(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 128
		 -> commands(BANK1[128]), LED_Control@second_command(BANK0[16]), LED_Control@first_command(BANK0[16]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_86(CODE[5]), STR_89(CODE[5]), STR_77(CODE[5]), STR_84(CODE[5]), 
		 -> STR_83(CODE[2]), STR_82(CODE[2]), STR_81(CODE[2]), STR_80(CODE[2]), 
		 -> STR_79(CODE[5]), STR_61(CODE[5]), STR_66(CODE[7]), STR_64(CODE[5]), 
		 -> STR_63(CODE[5]), STR_46(CODE[5]), STR_53(CODE[8]), STR_51(CODE[8]), 
		 -> STR_50(CODE[5]), STR_49(CODE[6]), STR_48(CODE[5]), STR_30(CODE[5]), 
		 -> STR_37(CODE[8]), STR_36(CODE[7]), STR_35(CODE[5]), STR_34(CODE[6]), 
		 -> STR_33(CODE[11]), STR_32(CODE[5]), STR_21(CODE[3]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), STR_18(CODE[5]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 128
		 -> commands(BANK1[128]), LED_Control@second_command(BANK0[16]), LED_Control@first_command(BANK0[16]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 128
		 -> commands(BANK1[128]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 63
		 -> STR_90(CODE[13]), STR_88(CODE[14]), STR_87(CODE[41]), STR_78(CODE[12]), 
		 -> STR_75(CODE[6]), STR_74(CODE[6]), STR_73(CODE[20]), STR_72(CODE[20]), 
		 -> STR_71(CODE[10]), STR_70(CODE[21]), STR_69(CODE[21]), STR_68(CODE[24]), 
		 -> STR_67(CODE[17]), STR_65(CODE[17]), STR_62(CODE[12]), STR_59(CODE[30]), 
		 -> STR_58(CODE[19]), STR_57(CODE[20]), STR_56(CODE[23]), STR_55(CODE[48]), 
		 -> STR_54(CODE[21]), STR_52(CODE[22]), STR_47(CODE[12]), STR_44(CODE[36]), 
		 -> STR_43(CODE[40]), STR_42(CODE[29]), STR_41(CODE[29]), STR_40(CODE[19]), 
		 -> STR_39(CODE[63]), STR_38(CODE[32]), STR_31(CODE[12]), STR_28(CODE[36]), 
		 -> STR_27(CODE[40]), STR_26(CODE[58]), STR_25(CODE[19]), STR_24(CODE[63]), 
		 -> STR_23(CODE[32]), STR_22(CODE[23]), STR_17(CODE[11]), STR_16(CODE[10]), 
		 -> STR_15(CODE[10]), STR_14(CODE[50]), STR_13(CODE[45]), STR_12(CODE[4]), 
		 -> STR_11(CODE[23]), STR_10(CODE[26]), STR_9(CODE[13]), STR_8(CODE[11]), 
		 -> STR_7(CODE[22]), STR_6(CODE[20]), STR_5(CODE[8]), STR_4(CODE[27]), 
		 -> STR_3(CODE[26]), STR_2(CODE[16]), STR_1(CODE[46]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_91(CODE[7]), Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Read_Commands@cmds	PTR unsigned char [16] size(2) Largest target is 128
		 -> commands(BANK1[128]), 

    Read_Commands@token	PTR unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 128
		 -> commands(BANK1[128]), LED_Control@second_command(BANK0[16]), LED_Control@first_command(BANK0[16]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    LED_Control@token	PTR unsigned char  size(2) Largest target is 128
		 -> Read_Commands@str(BANK2[128]), LED_Control@command_input(BANK0[16]), NULL(NULL[0]), 

    INT3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), 

    INT3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 

    EUSART2_Write_Array@data	PTR unsigned char  size(2) Largest target is 4
		 -> Update_Y_Offset@data(BANK0[4]), Update_X_Offset@data(BANK0[4]), Update_Battery_Display@data(COMRAM[3]), Update_Battery_Icon@data(COMRAM[3]), 
		 -> Battery_Display@data(BANK0[2]), PI_UART_SYNC@data(COMRAM[2]), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Write@writeBuffer(COMRAM[2]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterWrite@trBlock(BANK1[5]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 1
		 -> I2C_Read@ReadData(COMRAM[1]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    I2C_MasterTRBInsert@pflag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    I2C_MasterRead@pflag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    I2C_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 1
		 -> I2C_Read@ReadData(COMRAM[1]), 

    F17995.pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    I2C_MasterWrite@pflag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Write@writeBuffer(COMRAM[2]), 

    F17990.pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), I2C_ISR@i2c_address(COMRAM[2]), NULL(NULL[0]), 

    S858$pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 2
		 -> MAX17048_Communication@i2c_data(BANK0[2]), TAS2521_Communication@i2c_data(BANK0[2]), I2C_Read@writeBuffer(COMRAM[1]), I2C_Read@ReadData(COMRAM[1]), 
		 -> I2C_Write@writeBuffer(COMRAM[2]), 

    p_i2c_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    S862$pTrFlag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    p_i2c_current.pTrFlag	PTR enum E17875 size(2) Largest target is 1
		 -> status(COMRAM[1]), 

    S862$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    p_i2c_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    p_i2c_current	PTR struct . size(2) Largest target is 7
		 -> i2c_tr_queue(BANK1[5]), NULL(NULL[0]), 

    S873$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c_tr_queue(BANK1[5]), 

    i2c_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c_tr_queue(BANK1[5]), 

    S873$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c_tr_queue(BANK1[5]), 

    i2c_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c_tr_queue(BANK1[5]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_EPWM1_LoadDutyValue
    _Set_Volume->_I2C_Write
    _SYSTEM_Initialize->_TMR1_Initialize
    _SYSTEM_Initialize->_TMR3_Initialize
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EXT_INT_Initialize->_INT3_SetInterruptHandler
    _PI_UART_SYNC->_EUSART2_Write_Array
    _Headphones->_I2C_Write
    _TAS2521_Initialize->_I2C_Write
    _Screen_Brightness_Debug->_EPWM1_LoadDutyValue
    _Read_Battery_Voltage->_I2C_Read
    _Read_Battery_Register->_I2C_Read
    _LED_Control->_printf
    _Battery_Display->_Update_X_Offset
    _Battery_Display->_Update_Y_Offset
    _atoi->___wmul
    _Update_Y_Offset->_atoi
    _Update_X_Offset->_atoi
    _ADC_Debug->_Read_Commands
    _printf->___lwmod
    ___lwmod->___lwdiv
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _getch->_putch
    _putch->_EUSART1_Write
    _Button_Check->_EPWM1_LoadDutyValue
    _EPWM1_LoadDutyValue->_atoi
    _Brightness_SW_Check->_Update_Battery_Display
    _Brightness_SW_Check->_Update_Battery_Icon
    _Update_Battery_Display->_EUSART2_Write_Array
    _Update_Battery_Icon->_EUSART2_Write_Array
    _EUSART2_Write_Array->_EUSART2_Write
    _Read_Battery_Percent->_I2C_Read
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterReadTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C_ISR
    _INT3_ISR->i2_PWR_SW_Check
    _I2C_ISR->_I2C_Stop
    _ADC_ISR->_ADC_GetConversionResult_8bit

Critical Paths under _main in BANK0

    _main->_Debug_Mode
    _Volume_Update->_Set_Volume
    _Set_Volume->_printf
    _Headphone_Check->_Headphones
    _Debug_Mode->_DebugMenu
    _DebugMenu->_LED_Control
    _TAS2521_Communication->_printf
    _I2C_Write->_I2C_MasterWrite
    _Screen_Brightness_Debug->_printf
    _MAX17048_Communication->_printf
    _LED_Control->_printf
    _Battery_Display->_printf
    _ADC_Debug->_printf
    _Read_Commands->_strtok
    _Button_Check->_EPWM1_LoadDutyValue
    _Battery_Check->_Read_Battery_Percent
    _I2C_Read->_I2C_MasterRead
    _I2C_Read->_I2C_MasterWrite

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _TAS2521_Communication->_Read_Commands
    _Screen_Brightness_Debug->_Read_Commands
    _MAX17048_Communication->_Read_Commands
    _Battery_Display->_Read_Commands
    _ADC_Debug->_Read_Commands

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  376022
                _ADC_StartConversion
                      _Battery_Check
                _Brightness_SW_Check
                 _Build_Volume_Array
                       _Button_Check
                          _DebugMenu
                         _Debug_Mode
                _EPWM1_LoadDutyValue
                       _EUSART1_Read
                    _Headphone_Check
                         _Headphones
                     _I2C_Initialize
                          _LED_Check
                       _PI_UART_SYNC
                       _PWR_SW_Check
               _Read_Battery_Percent
                  _SYSTEM_Initialize
                         _Set_Volume
                 _TAS2521_Initialize
                      _Volume_Update
 ---------------------------------------------------------------------------------
 (1) _Volume_Update                                        2     2      0   16339
                                             17 BANK0      2     2      0
                         _Set_Volume
                              _abval
 ---------------------------------------------------------------------------------
 (2) _abval                                                5     5      0     130
                                             19 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Set_Volume                                           3     3      0   16135
                                             14 BANK0      3     3      0
                          _I2C_Write
                             _printf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     516
                     _ADC_Initialize
                   _EPWM1_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      2     2      0      86
                                             21 COMRAM     2     2      0
           _TMR3_SetInterruptHandler
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0      86
                                             21 COMRAM     2     2      0
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     344
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
           _INT3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT3_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWR_SW_Check                                         1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PI_UART_SYNC                                         3     3      0    1180
                                             24 COMRAM     3     3      0
                       _EUSART2_Read
                _EUSART2_Write_Array
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      24
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LED_Check                                            1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Headphone_Check                                      0     0      0    9703
                         _Headphones
 ---------------------------------------------------------------------------------
 (1) _Headphones                                           1     1      0    9703
                                              7 BANK0      1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Debug_Mode                                           1     1      0  149764
                                             74 BANK0      1     1      0
                          _DebugMenu
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _DebugMenu                                            1     1      0  149727
                                             73 BANK0      1     1      0
                          _ADC_Debug
                    _Battery_Display
                       _EUSART1_Read
                      _EUSART1_Write
                        _LED_Control
             _MAX17048_Communication
            _Screen_Brightness_Debug
              _TAS2521_Communication
                             _printf
 ---------------------------------------------------------------------------------
 (3) _TAS2521_Communication                                2     2      0   31014
                                             14 BANK0      2     2      0
             _I2C_MasterQueueIsEmpty
                    _I2C_MasterWrite
                      _Read_Commands
                 _TAS2521_Initialize
                               _atoi
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _TAS2521_Initialize                                   1     1      0    9672
                                              7 BANK0      1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            6     4      2    9672
                                             28 COMRAM     6     4      2
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _Screen_Brightness_Debug                              0     0      0   19257
                _EPWM1_LoadDutyValue
                      _Read_Commands
                               _atoi
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _MAX17048_Communication                               3     3      0   34696
                                             14 BANK0      3     3      0
             _I2C_MasterQueueIsEmpty
                    _I2C_MasterWrite
               _Read_Battery_Percent
              _Read_Battery_Register
               _Read_Battery_Voltage
                      _Read_Commands
                               _atoi
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Read_Battery_Voltage                                 1     1      0    4406
                                              7 BANK0      1     1      0
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _Read_Battery_Register                                2     2      0    4437
                                              7 BANK0      2     2      0
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterQueueIsEmpty                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LED_Control                                         59    59      0   15677
                                             14 BANK0     59    59      0
                       _EUSART1_Read
                      _EUSART1_Write
                             _printf
                             _strcmp
                             _strcpy
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _Battery_Display                                      2     2      0   25229
                                             14 BANK0      2     2      0
                _EUSART2_Write_Array
                      _Read_Commands
             _Update_Battery_Display
                _Update_Battery_Icon
                    _Update_X_Offset
                    _Update_Y_Offset
                               _atoi
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    1589
                                             25 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     386
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Update_Y_Offset                                      6     4      2    1369
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                _EUSART2_Write_Array
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (4) _Update_X_Offset                                      6     4      2    1369
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                _EUSART2_Write_Array
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) _ADC_Debug                                            0     0      0   17298
                      _Read_Commands
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               6     2      4    4753
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    6327
                                             31 COMRAM     1     1      0
                                              0 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _Read_Commands                                      144   142      2    4877
                                             31 COMRAM     2     0      2
                                              4 BANK0      5     5      0
                                              0 BANK2    137   137      0
                       _EUSART1_Read
                              _getch
                             _strcpy
                             _strtok
 ---------------------------------------------------------------------------------
 (5) _strtok                                               4     0      4    2339
                                              0 BANK0      4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (6) _strspn                                               7     3      4     719
                                             24 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (6) _strcspn                                              7     3      4     719
                                             24 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (7) _strchr                                               5     1      4     432
                                             19 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1341
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _getch                                                1     1      0     195
                                             21 COMRAM     1     1      0
                       _EUSART1_Read
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             20 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Write                                        1     1      0      62
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Read                                         1     1      0      37
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Button_Check                                         1     1      0     370
                                              2 BANK0      1     1      0
                _EPWM1_LoadDutyValue
 ---------------------------------------------------------------------------------
 (1) _EPWM1_LoadDutyValue                                  4     2      2     370
                                             32 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (1) _Build_Volume_Array                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Brightness_SW_Check                                  0     0      0    2448
             _Update_Battery_Display
                _Update_Battery_Icon
 ---------------------------------------------------------------------------------
 (4) _Update_Battery_Display                               4     4      0    1224
                                             24 COMRAM     4     4      0
                _EUSART2_Write_Array
 ---------------------------------------------------------------------------------
 (1) _Battery_Check                                        0     0      0    5630
               _Read_Battery_Percent
                _Update_Battery_Icon
 ---------------------------------------------------------------------------------
 (4) _Update_Battery_Icon                                  4     4      0    1224
                                             24 COMRAM     4     4      0
                _EUSART2_Write_Array
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Write_Array                                  4     1      3    1119
                                             20 COMRAM     4     1      3
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      62
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Read_Battery_Percent                                 1     1      0    4406
                                              7 BANK0      1     1      0
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             6     5      1    4369
                                             28 COMRAM     6     5      1
                     _I2C_MasterRead
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWrite                                      7     0      7    2375
                                              0 BANK0      7     0      7
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWriteTRBBuild                              9     2      7     494
                                             19 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterRead                                       7     0      7    1482
                                              0 BANK0      7     0      7
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterTRBInsert                                  6     2      4     494
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterReadTRBBuild                               9     2      7     525
                                             19 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  2     2      0      22
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0      31
                                              5 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                _I2C_BusCollisionISR
                            _I2C_ISR
                           _INT3_ISR
                           _TMR1_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _INT3_ISR                                             0     0      0       0
                      _INT3_CallBack
                     i2_PWR_SW_Check
 ---------------------------------------------------------------------------------
 (10) i2_PWR_SW_Check                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _INT3_CallBack                                       0     0      0       0
                   Absolute function *
       _INT3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _INT3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_ISR                                              2     2      0      31
                                              3 COMRAM     2     2      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C_Stop                                            3     3      0      31
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              1     1      0       0
                                              2 COMRAM     1     1      0
       _ADC_GetConversionResult_8bit
 ---------------------------------------------------------------------------------
 (10) _ADC_GetConversionResult_8bit                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion
   _Battery_Check
     _Read_Battery_Percent
       _I2C_Read
         _I2C_MasterRead
           _I2C_MasterReadTRBBuild
           _I2C_MasterTRBInsert
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
           _I2C_MasterWriteTRBBuild
     _Update_Battery_Icon
       _EUSART2_Write_Array
         _EUSART2_Write
   _Brightness_SW_Check
     _Update_Battery_Display
       _EUSART2_Write_Array
         _EUSART2_Write
     _Update_Battery_Icon
       _EUSART2_Write_Array
         _EUSART2_Write
   _Build_Volume_Array
   _Button_Check
     _EPWM1_LoadDutyValue
       _atoi (ARG)
         ___wmul
         _isdigit
   _DebugMenu
     _ADC_Debug
       _Read_Commands
         _EUSART1_Read
         _getch
           _EUSART1_Read
           _putch
             _EUSART1_Write
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
       _strcmp
       _strcpy
     _Battery_Display
       _EUSART2_Write_Array
         _EUSART2_Write
       _Read_Commands
         _EUSART1_Read
         _getch
           _EUSART1_Read
           _putch
             _EUSART1_Write
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _Update_Battery_Display
         _EUSART2_Write_Array
           _EUSART2_Write
       _Update_Battery_Icon
         _EUSART2_Write_Array
           _EUSART2_Write
       _Update_X_Offset
         _EUSART2_Write_Array
           _EUSART2_Write
         _atoi (ARG)
           ___wmul
           _isdigit
       _Update_Y_Offset
         _EUSART2_Write_Array
           _EUSART2_Write
         _atoi (ARG)
           ___wmul
           _isdigit
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
       _strcmp
       _strcpy
     _EUSART1_Read
     _EUSART1_Write
     _LED_Control
       _EUSART1_Read
       _EUSART1_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
       _strcmp
       _strcpy
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _MAX17048_Communication
       _I2C_MasterQueueIsEmpty
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
       _Read_Battery_Percent
         _I2C_Read
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
             _I2C_MasterWriteTRBBuild
       _Read_Battery_Register
         _I2C_Read
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
             _I2C_MasterWriteTRBBuild
       _Read_Battery_Voltage
         _I2C_Read
           _I2C_MasterRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
             _I2C_MasterWriteTRBBuild
       _Read_Commands
         _EUSART1_Read
         _getch
           _EUSART1_Read
           _putch
             _EUSART1_Write
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
       _strcmp
       _strcpy
     _Screen_Brightness_Debug
       _EPWM1_LoadDutyValue
         _atoi (ARG)
           ___wmul
           _isdigit
       _Read_Commands
         _EUSART1_Read
         _getch
           _EUSART1_Read
           _putch
             _EUSART1_Write
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
       _strcmp
       _strcpy
     _TAS2521_Communication
       _I2C_MasterQueueIsEmpty
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
       _Read_Commands
         _EUSART1_Read
         _getch
           _EUSART1_Read
           _putch
             _EUSART1_Write
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _TAS2521_Initialize
         _I2C_Write
           _I2C_MasterWrite
             _I2C_MasterTRBInsert
             _I2C_MasterWriteTRBBuild
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
       _strcmp
       _strcpy
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _EUSART1_Write
   _Debug_Mode
     _DebugMenu
       _ADC_Debug
         _Read_Commands
           _EUSART1_Read
           _getch
             _EUSART1_Read
             _putch
               _EUSART1_Write
           _strcpy
           _strtok
             _strcspn
               _strchr
             _strspn
               _strchr
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _EUSART1_Write
         _strcmp
         _strcpy
       _Battery_Display
         _EUSART2_Write_Array
           _EUSART2_Write
         _Read_Commands
           _EUSART1_Read
           _getch
             _EUSART1_Read
             _putch
               _EUSART1_Write
           _strcpy
           _strtok
             _strcspn
               _strchr
             _strspn
               _strchr
         _Update_Battery_Display
           _EUSART2_Write_Array
             _EUSART2_Write
         _Update_Battery_Icon
           _EUSART2_Write_Array
             _EUSART2_Write
         _Update_X_Offset
           _EUSART2_Write_Array
             _EUSART2_Write
           _atoi (ARG)
             ___wmul
             _isdigit
         _Update_Y_Offset
           _EUSART2_Write_Array
             _EUSART2_Write
           _atoi (ARG)
             ___wmul
             _isdigit
         _atoi
           ___wmul
           _isdigit
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _EUSART1_Write
         _strcmp
         _strcpy
       _EUSART1_Read
       _EUSART1_Write
       _LED_Control
         _EUSART1_Read
         _EUSART1_Write
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _EUSART1_Write
         _strcmp
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _MAX17048_Communication
         _I2C_MasterQueueIsEmpty
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
           _I2C_MasterWriteTRBBuild
         _Read_Battery_Percent
           _I2C_Read
             _I2C_MasterRead
               _I2C_MasterReadTRBBuild
               _I2C_MasterTRBInsert
             _I2C_MasterWrite
               _I2C_MasterTRBInsert
               _I2C_MasterWriteTRBBuild
         _Read_Battery_Register
           _I2C_Read
             _I2C_MasterRead
               _I2C_MasterReadTRBBuild
               _I2C_MasterTRBInsert
             _I2C_MasterWrite
               _I2C_MasterTRBInsert
               _I2C_MasterWriteTRBBuild
         _Read_Battery_Voltage
           _I2C_Read
             _I2C_MasterRead
               _I2C_MasterReadTRBBuild
               _I2C_MasterTRBInsert
             _I2C_MasterWrite
               _I2C_MasterTRBInsert
               _I2C_MasterWriteTRBBuild
         _Read_Commands
           _EUSART1_Read
           _getch
             _EUSART1_Read
             _putch
               _EUSART1_Write
           _strcpy
           _strtok
             _strcspn
               _strchr
             _strspn
               _strchr
         _atoi
           ___wmul
           _isdigit
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _EUSART1_Write
         _strcmp
         _strcpy
       _Screen_Brightness_Debug
         _EPWM1_LoadDutyValue
           _atoi (ARG)
             ___wmul
             _isdigit
         _Read_Commands
           _EUSART1_Read
           _getch
             _EUSART1_Read
             _putch
               _EUSART1_Write
           _strcpy
           _strtok
             _strcspn
               _strchr
             _strspn
               _strchr
         _atoi
           ___wmul
           _isdigit
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _EUSART1_Write
         _strcmp
         _strcpy
       _TAS2521_Communication
         _I2C_MasterQueueIsEmpty
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
           _I2C_MasterWriteTRBBuild
         _Read_Commands
           _EUSART1_Read
           _getch
             _EUSART1_Read
             _putch
               _EUSART1_Write
           _strcpy
           _strtok
             _strcspn
               _strchr
             _strspn
               _strchr
         _TAS2521_Initialize
           _I2C_Write
             _I2C_MasterWrite
               _I2C_MasterTRBInsert
               _I2C_MasterWriteTRBBuild
         _atoi
           ___wmul
           _isdigit
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _EUSART1_Write
         _strcmp
         _strcpy
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
     _EUSART1_Read
   _EPWM1_LoadDutyValue
     _atoi (ARG)
       ___wmul
       _isdigit
   _EUSART1_Read
   _Headphone_Check
     _Headphones
       _I2C_Write
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
           _I2C_MasterWriteTRBBuild
   _Headphones
     _I2C_Write
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _I2C_Initialize
   _LED_Check
   _PI_UART_SYNC
     _EUSART2_Read
     _EUSART2_Write_Array
       _EUSART2_Write
   _PWR_SW_Check
   _Read_Battery_Percent
     _I2C_Read
       _I2C_MasterRead
         _I2C_MasterReadTRBBuild
         _I2C_MasterTRBInsert
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
       _INT3_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
       _TMR3_StartTimer
   _Set_Volume
     _I2C_Write
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _EUSART1_Write
   _TAS2521_Initialize
     _I2C_Write
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Volume_Update
     _Set_Volume
       _I2C_Write
         _I2C_MasterWrite
           _I2C_MasterTRBInsert
           _I2C_MasterWriteTRBBuild
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _EUSART1_Write
     _abval

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult_8bit
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _INT3_ISR
     _INT3_CallBack
       Absolute function(Fake) *
       _INT3_DefaultInterruptHandler *
     i2_PWR_SW_Check
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     89      89      10       53.5%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      F8       8       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4B      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      4B       1       79.8%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22E       6        0.0%
DATA                 0      0     22E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Nov 22 19:56:22 2017

                      Read_Commands@flush 0284                        Read_Commands@token 0285  
                _eusart1TxBufferRemaining 01F6                      Read_Commands@counter 0287  
                      __size_of_ADC_Debug 011C                     I2C_ISR@i2c_bytes_left 0026  
                      __size_of_I2C_Write 005E                       ___wmul@multiplicand 0016  
                             __CFG_BORV$3 000000                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                   ?_I2C_MasterReadTRBBuild 0014  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                    ??_TAS2521_Initialize 0067                                       l824 2330  
                                     l593 22F2                              __CFG_CPB$OFF 000000  
                                     _PR2 000FCB                     __size_of_PWR_SW_Check 0090  
                            __CFG_CPD$OFF 000000                ??_INT0_SetInterruptHandler 0016  
                         __end_of_I2C_ISR 0B84                           _timer1ReloadVal 0048  
              ??_INT3_SetInterruptHandler 0016                           __end_of_ADC_ISR 294A  
                       ??_Headphone_Check 0023                           _TMR2_Initialize 294A  
                                     prod 000FF3                                       tosl 000FFD  
                            ?_LED_Control 0001                                       wreg 000FE8  
                                    l1205 1C5A                                      l1213 2850  
                                    l1161 1D4A                                      l1172 1D82  
                                    l1421 08FA                                      l1413 08BA  
                  __size_of_Volume_Update 003E                                      l1190 1DE4  
                                    l1158 1D46                                      l1177 2096  
                         _timer3ReloadVal 004A                                      l1390 13B2  
                                    l2351 1552                                      l2186 1EEA  
                                    l1386 13A6                                      l1387 13AA  
                                    l2356 1606                                      l2196 2254  
                                    l1388 13AE                                      l2384 1F8A  
                                    l2394 1F3A                                      l1936 16D4  
                                    l6211 206E                                      l6205 2022  
                                    l6301 1946                                      l6151 1812  
                                    l6215 2556                                      l7023 1744  
                                    l5415 2522                                      l6161 184E  
                                    l6321 1978                                      l6225 257C  
                                    l5425 2548                                      l6155 1832  
                                    l6323 19A2                                      l6315 1962  
                                    l6251 2352                                      l6157 183E  
                                    l6317 1968                                      l6253 2356  
                                    l7301 20AE                                      l6173 22E0  
                                    l6421 1EC4                                      l7061 13C4  
                                    l7221 1CC6                                      l6239 231E  
                                    l6351 2590                                      l6407 2890  
                                    l7055 1396                                      l6337 19BE  
                                    l6185 2314                                      l6265 1F4E  
                                    l6257 1EFE                                      l6417 1EB8  
                                    l6441 2236                                      l7057 139C  
                                    l7065 13D6                                      l7049 12F4  
                                    l6339 19C4                                      l6187 2318  
                                    l6195 2502                                      l6267 1F56  
                                    l6259 1F06                                      l6419 1EC0  
                                    l6611 0276                                      l7059 13A2  
                                    l7067 140C                                      l5811 1B6C  
                                    l7075 2630                                      l6357 25B0  
                                    l7261 1DA6                                      l6189 24E8  
                                    l6429 1EE0                                      l6445 224A  
                                    l6437 222A                                      l6605 0254  
                                    l6277 1DFE                                      l6293 1E40  
                                    l5805 1B48                                      l7077 264A  
                                    l7271 1DC4                                      l7255 1D9A  
                                    l6391 2164                                      l6383 15FA  
                                    l6375 15B0                                      l6367 156C  
                                    l6439 2232                                      l6623 02AC  
                                    l6711 1616                                      l6279 1E28  
                                    l7431 1884                                      l7281 1DDE  
                                    l6625 02B2                                      l6641 0300  
                                    l6609 0270                                      l6721 1656  
                                    l5841 1D4C                                      l5809 1B5E  
                                    l7425 1870                                      l6299 191C  
                                    l7275 1DD0                                      l7347 1C7E  
                                    l7339 1C3C                                      l6571 0144  
                                    l6811 08FE                                      l6389 215C  
                                    l6645 0312                                      l6581 017E  
                                    l6573 014A                                      l6565 0128  
                                    l6661 03D8                                      l6725 1668  
                                    l6709 1612                                      l7445 18A4  
                                    l6647 0318                                      l6655 03AC  
                                    l6639 02E8                                      l6591 01D8  
                                    l6671 2102                                      l6727 169E  
                                    l6807 08BE                                      l6649 0360  
                                    l6657 03C4                                      l6585 01A8  
                                    l6593 0216                                      l6569 013C  
                                    l6665 20C8                                      l6729 16A2  
                                    l6905 0D6C                                      l6841 10F4  
                                    l6833 10A0                                      l6817 101E  
                                    l5849 1D78                                      l7473 18EE  
                                    l7449 18B0                                      l6691 1270  
                                    l6683 11B0                                      l6659 03CC  
                                    l6587 01D0                                      l6667 20D0  
                                    l6931 14F8                                      l6915 1468  
                                    l5787 1AFE                                      l7467 18DC  
                                    l6909 0D9A                                      l6837 10BC  
                                    l5797 1B2A                                      l6695 1294  
                                    l6687 122C                                      l6679 118E  
                                    l6927 14DA                                      l6791 07D8  
                                    l6783 0718                                      l6847 1130  
                                    l6689 1268                                      l6937 151A  
                                    l6961 0EEA                                      l6945 0E4E  
                                    l6849 114C                                      l6939 1520  
                                    l6787 0794                                      l6779 06DE  
                                    l6965 0F20                                      l6957 0EBA  
                                    l6789 07D0                                      l6885 0C8C  
                                    l6869 0C10                                      l6975 0F8A  
                                    l6969 0F56                                      l6897 0D1E  
                                    l6889 0CC4                                      l6979 19DE  
                                    l6989 1A42                                      STR_1 7C50  
                                    STR_2 7F34                                      STR_3 7DB3  
                                    STR_4 7D98                                      STR_5 7FA2  
                                    STR_6 7EAF                                      STR_7 7E5A  
                                    STR_8 7F78                                      STR_9 7F5F  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                    ??_I2C_FunctionComplete 0001  
                                    u4330 1D34                                      u4360 1D64  
                                    u4336 1D36                                      u5420 218C  
                                    u4366 1D66                                      u5520 29BE  
                                    u6400 1CD4                                      u5427 2182  
                                    u7107 05B6                                      u6420 1CF0  
                                    u7117 05C6                                      u5550 019E  
                                    u7207 1C50                                      u7127 05D6  
                                    u5560 01C8                                      u7217 1C92  
                                    u7137 05E6                                      u7057 1B34  
                                    u6418 1CD8                                      u7227 25A8  
                                    u7147 05F6                                      u7067 1B64  
                                    u5557 0194                                      u7157 0606  
                                    u7077 21FE                                      u6438 1CF4  
                                    u6390 1CAE                                      u5567 01BE  
                                    u7167 0616                                      u7087 0400  
                                    u7177 0626                                      u7097 0410  
                                    u7187 0636                                      u6396 1CB0  
                                    u7197 0646                                _Debug_Mode 1C9C  
                                    _TMR2 000FCC                                      _WPUB 000F5B  
                   ??_EUSART2_Receive_ISR 0001                             _EUSART1_Write 22DE  
                           _EUSART2_Write 231C                          LED_Control@delim 00A4  
                                    _atoi 1610                                      _main 1858  
                           ?_EUSART1_Read 0001                          LED_Control@flush 00A3  
                        __end_of_I2C_Read 19C8                             ?_EUSART2_Read 0001  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    indf2 000FDF                                      fsr2l 000FD9  
                                    btemp 004C                             _INT3_CallBack 27B2  
                        __end_of_I2C_Stop 22A0         __size_of_INT2_SetInterruptHandler 000A  
                                    pclat 000FFA                          LED_Control@token 00A6  
                      __size_of_LED_Check 0070                 ?_INT2_SetInterruptHandler 0014  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0116                         LED_Control@F18486 01E5  
                           __CFG_IESO$OFF 000000           __size_of_I2C_MasterQueueIsEmpty 000E  
            __end_of_EUSART2_Transmit_ISR 25EC                           _TMR3_Initialize 235A  
                   ??_EPWM1_LoadDutyValue 0060                         ??_Update_X_Offset 0023  
                 Update_Battery_Icon@data 0019                ??_TMR1_SetInterruptHandler 0016  
                       ??_Update_Y_Offset 0023                             __CFG_MCLRE$ON 000000  
                            _Volume_Array 0100                              ___param_bank 000010  
                              _Headphones 16DE                              _PWR_SW_Check 1AF2  
                 Volume_Update@Difference 0071            __end_of_I2C_MasterReadTRBBuild 1FE4  
                        ?_Battery_Display 0001                          __end_of_INT3_ISR 29B4  
              I2C_MasterReadTRBBuild@ptrb 0014            __size_of_OSCILLATOR_Initialize 0012  
                        ?_I2C_MasterWrite 0060             __end_of_OSCILLATOR_Initialize 2970  
                 __size_ofi2_PWR_SW_Check 0090                                     ?_atoi 001A  
                  Set_Volume@Volume_Index 006F                                     ?_main 0001  
                                   _EEADR 000F74                                     STR_10 7DCD  
                                   STR_11 7DFF                                     STR_20 7FEF  
                                   STR_12 7FEB                                     STR_21 7FF3  
                                   STR_13 7C7E                                     STR_30 7FDC  
                                   STR_22 7E16                                     STR_14 7BEE  
                                   STR_15 7F6E                                     STR_31 7F6C  
                                   STR_23 7D20                                     STR_40 7EFF  
                                   STR_32 7FDC                                     STR_16 7F98  
                                   STR_24 7B75                                     STR_33 7BE3  
                                   STR_17 7F83                                     STR_25 7EFF  
                                   STR_41 7D7B                                     STR_50 7FE1  
                                   STR_18 7FE6                                     STR_34 7FCF  
                                   STR_42 7D5E                                     STR_26 7BB4  
                                   STR_43 7CD4                                     STR_19 7FF3  
                                   STR_35 7FE1                                     STR_51 7FB2  
                                   STR_27 7CD4                                     STR_60 7FEE  
                                   STR_44 7CFC                                     STR_36 7FC1  
                                   STR_52 7E44                                     STR_28 7CFC  
                                   STR_45 7FEE                                     STR_29 7FEE  
                                   STR_53 7D73                                     STR_61 7FDC  
                                   STR_37 7FAA                                     STR_62 7F6C  
                                   STR_38 7D20                                     STR_46 7FDC  
                                   STR_70 7E9A                                     STR_54 7E70  
                                   STR_47 7F6C                                     STR_39 7B75  
                                   STR_63 7FDC                                     STR_71 7F8E  
                                   STR_55 7C20                                     STR_64 7FE1  
                                   STR_48 7FDC                                     STR_80 7FF8  
                                   STR_72 7EC3                                     STR_56 7E2D  
                                   STR_49 7FCF                                     STR_81 7FF6  
                                   STR_65 7F23                                     STR_57 7EEB  
                                   STR_73 7ED7                                     STR_58 7EFF  
                                   STR_82 7FFA                                     STR_74 7FD5  
                                   STR_66 7FC8                                     STR_90 7F52  
                                   STR_67 7F23                                     STR_83 7FFC  
                                   STR_75 7FDB                                     STR_91 7FBA  
                                   STR_59 7D40                                     STR_76 7FEE  
                                   STR_84 7FD6                                     STR_92 7F12  
                                   STR_68 7DE7                                     STR_85 7FEE  
                                   STR_77 7FDC                                     STR_69 7E85  
                                   STR_78 7F6C                                     STR_86 7FDC  
                                   STR_79 7FDC                                     STR_87 7CAB  
                                   STR_88 7F44                                     STR_89 7FDC  
                         _TMR1_StartTimer 2A24                                     _T1CON 000FCD  
                           _i2c_trb_count 0040                                     _T2CON 000FCA  
                                   _T3CON 000FB1                           __end_of___lwdiv 1EF4  
                         __end_of___lwmod 225E                                     i2l310 094C  
                                   i2l230 0052                                     i2l240 009E  
                                   i2l232 0062                                     i2l321 0A00  
                                   i2l313 09C2                                     i2l322 0A10  
                                   i2l242 00AE                                     i2l234 0072  
                                   i2l250 00DA                                     i2l315 09CA  
                                   i2l340 0AEE                                     i2l332 0A90  
                                   i2l316 09D2                                     i2l244 00BE  
                                   i2l236 007E                                     i2l326 0A7C  
                                   i2l246 00CE                                     i2l238 008E  
                                   i2l344 0B20                                     i2l336 0AC0  
                                   i2l339 0ADC                                     i2l605 261A  
                                   i2l830 25E8                                     _TMR1H 000FCF  
                                   _TMR3H 000FB3                                     _TMR1L 000FCE  
                                   _TMR3L 000FB2                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000         __size_of_TMR3_SetInterruptHandler 000A  
                           __CFG_WRT3$OFF 000000                             ?_Button_Check 0001  
                    _EUSART1_Transmit_ISR 25EC                 ?_TMR3_SetInterruptHandler 0014  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                           _Read_Commands 116A                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR1_ISR 26AE                             __CFG_WRTB$OFF 000000  
                        __end_of_TMR3_ISR 267E                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                                     _abval 261E  
                          __CFG_EBTRB$OFF 000000            ??_TMR3_DefaultInterruptHandler 0001  
                                   _getch 2994                           __end_of_dpowers 7B6D  
                         __end_of_isdigit 2898                                     atoi@a 001F  
                                   atoi@s 001A                                     _putch 29FE  
                       __end_of_ADC_Debug 153E                         _Previous_ADC_Data 0030  
                _INT1_SetInterruptHandler 29EA                            ?_EUSART1_Write 0001  
                 __end_of_TMR1_Initialize 23D2                       Update_X_Offset@data 0060  
                       __end_of_I2C_Write 1E48                            ?_EUSART2_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
            __size_of_Brightness_SW_Check 0064                            ??_EUSART1_Read 0014  
                                   plusw2 000FDB                            ??_EUSART2_Read 0014  
                          ?_INT3_CallBack 0001                                     status 000FD8  
                         _TMR2_StartTimer 2A20                           __end_of_strcspn 1F94  
                I2C_MasterTRBInsert@count 0019                  I2C_MasterTRBInsert@pflag 0016  
                              _i2c_object 00AB                   _Screen_Brightness_Debug 19C8  
                         __initialization 1A60                              __end_of_atoi 16DE  
              __end_of_EUSART1_Initialize 24E8                              __end_of_main 1910  
          __size_of_TAS2521_Communication 01C2             __end_of_TAS2521_Communication 116A  
                      __size_of_DebugMenu 0136                             _Volume_Update 22A0  
                ??_MAX17048_Communication 0023                                 ??_I2C_ISR 0004  
                 __end_of_TMR2_Initialize 295E                                 ??_ADC_ISR 0003  
             ?_INTERRUPT_InterruptManager 0001                                    ??_atoi 001C  
                                  ??_main 0023                           _TMR3_StartTimer 2A1C  
                           __activetblptr 000002                       _I2C_MasterTRBInsert 179E  
              ADC_StartConversion@channel 0015                     _TMR3_InterruptHandler 01F3  
                        Set_Volume@Volume 0070                    _I2C_MasterQueueIsEmpty 29B4  
                       __end_of_LED_Check 1D86               I2C_MasterReadTRBBuild@pdata 0016  
                          ??_Button_Check 0062                            __CFG_RETEN$OFF 000000  
                   ?_EUSART1_Transmit_ISR 0001                            ?_Read_Commands 0020  
                     I2C_Read@writeBuffer 001F                  ?_I2C_MasterWriteTRBBuild 0014  
                                  ?_abval 0001                __end_of_EUSART2_Initialize 24B2  
                                  ?_getch 0001                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                _eusart2TxBufferRemaining 01F7                        _Build_Volume_Array 2A2C  
                                  _ADRESH 000FC4                                    _EEADRH 000F75  
                                  _ADRESL 000FC3                                    _EEDATA 000F73  
                                  _CCPR1H 000FBD                                    _CCPR1L 000FBC  
                                  _EECON2 000F7E                                    _ANCON0 000F5D  
                                  _ANCON1 000F5C                                    ?_putch 0001  
                                  _T1GCON 000FAA                                    _T3GCON 000FB0  
                 Set_Volume@VolumeSetting 006E                               ?_Debug_Mode 0001  
                 __end_of_TMR3_Initialize 2396                           __CFG_BBSIZ$BB2K 000000  
         __end_of_Linearized_Volume_Array 7B63                       Update_Y_Offset@data 0060  
                          __CFG_WDTEN$OFF 000000                                    i2l3545 1B8E  
                                  i2l3555 1BBA                                    i2l3563 1BD8  
                                  i2l7005 2916                                    i2l3567 1BEE  
                                  i2l7105 09A4                                    i2l3569 1BFC  
                                  i2l7203 0B26                                    i2l7123 09FA  
                                  i2l5701 275C                                    i2l7205 0B2A  
                                  i2l7117 09E2                                    i2l7213 0B3E  
                                  i2l7207 0B32                                    i2l5713 2614  
                                  i2l7137 0A3E             Update_Battery_Display@display 001C  
                                  i2l7165 0AA2                                    i2l7157 0A8A  
                                  i2l5727 2788                                    i2l5719 2768  
                                  i2l7191 0AFE                                    i2l7175 0AC8  
                                  i2l7187 0AF6                                    i2l5693 273C  
                                  _TABLAT 000FF5                                    i2l5687 25E2  
                                  i2l6997 229A                                    _RCREG1 000FAE  
                                  _RCREG2 000F7A                        _Brightness_Counter 002D  
    __end_of_ADC_GetConversionResult_8bit 2A10     __size_of_ADC_GetConversionResult_8bit 0008  
                                  _RCSTA1 000FAB              _ADC_GetConversionResult_8bit 2A08  
                                  _RCSTA2 000FA6                                    _OSCCON 000FD3  
                     _EUSART2_Write_Array 2586                                    _SPBRG1 000FAF  
                                  _SPBRG2 000F7B                                    _SSPADD 000FC8  
                      PI_UART_SYNC@F18305 01E7                                    _SSPBUF 000FC9  
                              _Set_Volume 1E48                                    _TXREG1 000FAD  
                                  _TXREG2 000F79                      ?_I2C_MasterTRBInsert 0014  
                     ?_Build_Volume_Array 0001                                    _TXSTA1 000FAC  
                                  _TXSTA2 000FBA                            __CFG_XINST$OFF 000000  
    __end_of_TMR1_DefaultInterruptHandler 2994     __size_of_TMR1_DefaultInterruptHandler 0012  
            _TMR1_DefaultInterruptHandler 2982                            ?_Volume_Update 0001  
                             ?_Headphones 0001                   __end_of_TMR1_StartTimer 2A28  
                                  ___wmul 278C                            __CFG_STVREN$ON 000000  
                               ??___lwdiv 0018                                 ??___lwmod 001F  
           I2C_MasterReadTRBBuild@address 0019                                    clear_0 1AC6  
                                  clear_1 1AD2                        LED_Control@counter 00A8  
                                  clear_2 1ADE                      ?_EUSART2_Write_Array 0015  
                 __size_of_I2C_MasterRead 004C                   __size_of_I2C_Initialize 0038  
                                  _printf 011A                                    _status 0047  
                                  _strchr 24E8                      ??_Build_Volume_Array 0014  
                                  _strcmp 20C6                                    _strcpy 2152  
                                  _strtok 153E                                    _strspn 1EF4  
            _INT2_DefaultInterruptHandler 000000                              __pdataCOMRAM 0043  
                               ??_isdigit 0014                                 ?_I2C_Read 001D  
                               ?_I2C_Stop 0001                              __mediumconst 7A62  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                      _EUSART2_Transmit_ISR 25BA  
                         ??_EUSART1_Write 0014                   ??_Read_Battery_Register 0023  
                 __end_of_TMR2_StartTimer 2A24                           ??_EUSART2_Write 0014  
INT3_SetInterruptHandler@InterruptHandler 0014  INT0_SetInterruptHandler@InterruptHandler 0014  
INT2_SetInterruptHandler@InterruptHandler 0014  INT1_SetInterruptHandler@InterruptHandler 0014  
TMR3_SetInterruptHandler@InterruptHandler 0014  TMR1_SetInterruptHandler@InterruptHandler 0014  
                    __size_of_LED_Control 0288                                 ??_strcspn 001D  
                         _eusart1RxBuffer 0120                         __end_of_DebugMenu 1422  
           __size_of_INTERRUPT_Initialize 0004                           ??_INT3_CallBack 0001  
                         _eusart2RxBuffer 0130                           _eusart1TxBuffer 0128  
                        ?_TMR1_Initialize 0001                         _SYSTEM_Initialize 2446  
                         _eusart2TxBuffer 0138                                __accesstop 0060  
                 __end_of__initialization 1AE4                     ??_I2C_MasterTRBInsert 0018  
                               ?_INT3_ISR 0001              __end_of_Read_Battery_Percent 28E8  
                         _Red_Blink_Timer 0031             ?_ADC_GetConversionResult_8bit 0001  
                      ?_SYSTEM_Initialize 0001                 ??_Screen_Brightness_Debug 0023  
                           ___rparam_used 000001                     Volume_Update@Abs_diff 0072  
            __end_of_Read_Battery_Voltage 28CE                         ?_EPWM1_Initialize 0001  
            __size_of_ADC_StartConversion 001A                            __pcstackCOMRAM 0001  
                         _Headphone_Check 283E                              __pidataBANK0 2A10  
                            __pidataBANK1 291C                       ??_SYSTEM_Initialize 0018  
                 __end_of_TMR3_StartTimer 2A20                             __end_of_abval 264E  
                               ?_TMR1_ISR 0001             ?_TMR1_DefaultInterruptHandler 0001  
                               ?_TMR3_ISR 0001                             __end_of_getch 29A4  
                      ??_EPWM1_Initialize 0014                                _abval$3268 0016  
                           __end_of_putch 2A08                     ??_EUSART2_Write_Array 0018  
                        ?_TMR2_Initialize 0001           __size_of_MAX17048_Communication 0234  
                          i2_PWR_SW_Check 1B82                       __size_of_Debug_Mode 007A  
                    __end_of_EUSART1_Read 2586           __end_of_I2C_MasterWriteTRBBuild 21DA  
                    __end_of_EUSART2_Read 2552                           ??_Read_Commands 0064  
                  ??_EUSART1_Transmit_ISR 0001               __size_of_EXT_INT_Initialize 0044  
                        I2C_Read@ReadData 0022                                ??_I2C_Read 001E  
                              ??_I2C_Stop 0001                     ?_EUSART2_Transmit_ISR 0001  
        __end_of_INT2_SetInterruptHandler 29EA               __end_of_EUSART1_Receive_ISR 278C  
                                 ??_abval 0014                          I2C_Read@Register 001D  
                                 ??_getch 0016                      EUSART2_Write_Array@i 0018  
               __end_of_SYSTEM_Initialize 247C                           _Update_X_Offset 2708  
                       _Battery_Displayed 0029                       __size_of_Headphones 00C0  
                         _Update_Y_Offset 26DC                                   ??_putch 0015  
                           _eusart1RxHead 0036                             _eusart2RxHead 003B  
                           _eusart1TxHead 0038                             _eusart1RxTail 0037  
                           _eusart2TxHead 003D                                __pbssBANK0 00AB  
                              __pbssBANK1 0100                             _eusart2RxTail 003C  
                           _eusart1TxTail 0039                             _eusart2TxTail 003E  
                        ?_TMR3_Initialize 0001                           __CFG_PLLCFG$OFF 000000  
            I2C_MasterReadTRBBuild@length 0018                     _INT0_InterruptHandler 01E9  
                              ??_INT3_ISR 0002                               ?_Set_Volume 0001  
                              __pnvCOMRAM 0048              __size_of_I2C_BusCollisionISR 0002  
                   EUSART2_Read@readValue 0014                               _Low_Battery 00B8  
                         ??_Volume_Update 0023                      __end_of_Button_Check 1C9C  
      Read_Battery_Percent@BatteryPercent 0067          __end_of_TMR3_SetInterruptHandler 29CC  
                                 ?___wmul 0014                          ?_TMR1_StartTimer 0001  
                  __end_ofi2_PWR_SW_Check 1C12                                ??_TMR1_ISR 0001  
                              ??_TMR3_ISR 0001              __size_of_Update_Battery_Icon 0024  
                                 _CCP1CON 000FBB                                   _I2C_ISR 0910  
                                 _ECCP1AS 000FBF                                   _ADC_ISR 2934  
                     _Brightness_SW_Check 1D86                                   ?_printf 0060  
             I2C_MasterWriteTRBBuild@ptrb 0014                   __size_of_ADC_Initialize 001C  
                                 ?_strchr 0014                                   ?_strcmp 0014  
                                 ?_strcpy 0014                                   ?_strtok 0060  
                                 ?_strspn 0019               __size_of_TAS2521_Initialize 0292  
                  __size_of_Battery_Check 004A                ??_INT1_SetInterruptHandler 0016  
                        __CFG_CANMX$PORTB 000000                                   _MAX_ADC 00BC  
                                 _REFOCON 000F9A                                   _MIN_ADC 00BE  
                                 _OSCCON2 000FD2               __end_of_EUSART2_Receive_ISR 2760  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                 I2C_Stop@completion_code 0003                                   _SPBRGH1 000F7D  
                                 _SPBRGH2 000F7C                               _Screen_Type 00B9  
                                 _SSPCON1 000FC6                 EUSART2_Write_Array@length 0017  
                        ?_TMR2_StartTimer 0001                                   _SSPSTAT 000FC7  
                  _MAX17048_Communication 0B84                      ?_Brightness_SW_Check 0001  
             __end_of_EPWM1_LoadDutyValue 240E             __size_of_I2C_FunctionComplete 001A  
                           ?_PI_UART_SYNC 0001         __size_of_INT0_SetInterruptHandler 000A  
                 __end_of_Headphone_Check 285C                                 _ADC_Debug 1422  
       __size_of_INT3_SetInterruptHandler 000A                 ?_INT0_SetInterruptHandler 0014  
               ?_INT3_SetInterruptHandler 0014                                 _I2C_Write 1DEA  
                ??_Update_Battery_Display 0019                        DebugMenu@selection 00A9  
                         __CFG_PWRTEN$OFF 000000                                   __Hparam 0000  
                                 __Lparam 0000                          ?_TMR3_StartTimer 0001  
                         ?i2_PWR_SW_Check 0001                     Update_X_Offset@F18450 01D5  
                         __size_of___wmul 0026                                   ___lwdiv 1EA2  
                                 ___lwmod 221C                            _I2C_MasterRead 2030  
                 ?_I2C_MasterQueueIsEmpty 0001                                   __pcinit 1A60  
                          _I2C_Initialize 240E                                   __ramtop 0F00  
                                 __ptext0 1858                                   __ptext1 22A0  
                                 __ptext2 261E                                   __ptext3 1E48  
                                 __ptext4 2446                                   __ptext5 235A  
                                 __ptext6 2A1C                                   __ptext7 29C2  
                                 __ptext8 294A                                   __ptext9 2A20  
                         __size_of_printf 02DC            ??_TMR1_DefaultInterruptHandler 0001  
                         __size_of_strchr 0036                           __size_of_strcmp 0048  
                         __size_of_strcpy 0044                         __end_of_hexpowers 7B75  
                               _T1CONbits 000FCD                           __size_of_strtok 00D2  
                         __size_of_strspn 0050                   __end_of_Update_X_Offset 2734  
                                 _counter 0023                                   _dpowers 7B63  
                     __size_of_Set_Volume 005A                     _OSCILLATOR_Initialize 295E  
                  ??_EUSART2_Transmit_ISR 0001                                 _T2CONbits 000FCA  
                 __end_of_Update_Y_Offset 2708                      _Read_Battery_Percent 28CE  
                                 _isdigit 287A                                 _T3CONbits 000FB1  
       __size_of_TMR1_SetInterruptHandler 000A                          I2C_Write@Address 001F  
                      _EUSART1_Initialize 24B2                  ??_PIN_MANAGER_Initialize 0014  
               ?_TMR1_SetInterruptHandler 0014                         __CFG_MSSPMSK$MSK7 000000  
                __size_of_Battery_Display 01F0                  __size_of_I2C_MasterWrite 004C  
                    _Read_Battery_Voltage 28B4                                 _LED_Check 1D16  
              __size_of_SYSTEM_Initialize 0036                                   _strcspn 1F44  
                    end_of_initialization 1AE4                     ??_Brightness_SW_Check 001D  
                 EUSART2_Write_Array@data 0015                              ??_Debug_Mode 00AA  
                _INT2_SetInterruptHandler 29E0                            _ADC_Data_Ready 0028  
                     ?_EUSART1_Initialize 0001                            ??_PI_UART_SYNC 0019  
                           __Lmediumconst 7A62                             _Battery_Check 207C  
                              ?_ADC_Debug 0001                     Update_X_Offset@offset 0021  
                              ?_I2C_Write 001D                      I2C_MasterRead@length 0062  
                           _Battery_Timer 002A          __size_of_I2C_MasterWriteTRBBuild 0044  
                      _EUSART2_Initialize 247C                                   printf@c 006D  
                                 printf@f 0060                              ??_Headphones 0023  
                                 postdec1 000FE5                                   postdec2 000FDD  
                  __end_of_I2C_MasterRead 207C                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0034  
                   __size_of_EUSART2_Read 0034                    __end_of_I2C_Initialize 2446  
          __end_of_I2C_MasterQueueIsEmpty 29C2                     I2C_MasterWrite@length 0062  
                    ??_EUSART1_Initialize 0014                                   strcmp@r 0019  
                     ?_EUSART2_Initialize 0001                     _TAS2521_Communication 0FA8  
                                 strspn@i 001E                                 _PORTAbits 000F80  
                   _INT1_InterruptHandler 01EB                                 _PORTBbits 000F81  
                               _PORTCbits 000F82                        I2C_ISR@i2c_address 0041  
                        I2C_Write@timeOut 0022                  _TMR3_SetInterruptHandler 29C2  
                      __end_of_Debug_Mode 1D16                     ?_Read_Battery_Percent 0001  
                        __CFG_FOSC$INTIO2 000000                                 _TRISAbits 000F92  
                               _TRISBbits 000F93                                 _TRISCbits 000F94  
                       Read_Commands@cmds 0020                     ?_Read_Battery_Voltage 0001  
                     _ADC_StartConversion 28E8                         __size_of_I2C_Read 00B8  
                              ?_LED_Check 0001                         __size_of_I2C_Stop 0042  
                     EUSART1_Write@txData 0014                                 _PWM_Value 0043  
        I2C_ISR@i2c_10bit_address_restart 0025            __size_of_Read_Battery_Register 001E  
                    ??_EUSART2_Initialize 0014                        __end_of_Headphones 179E  
           __end_of_Read_Battery_Register 287A                  LED_Control@command_input 0093  
                   __size_of_Button_Check 008A                            ?_Battery_Check 0001  
                            _EUSART1_Read 2552                                 _DebugMenu 12EC  
                            _EUSART2_Read 251E                          ?_Headphone_Check 0001  
                ??_I2C_MasterReadTRBBuild 001B                         __size_of_INT3_ISR 0010  
         __size_of_Update_Battery_Display 0024                      ?_ADC_StartConversion 0001  
                       _p_i2c_trb_current 00B4                               _Volume_Step 00C1  
                         ?_I2C_MasterRead 0060              __end_of_INTERRUPT_Initialize 2A2C  
                         ?_I2C_Initialize 0001              _INT0_DefaultInterruptHandler 000000  
                          __end_of___wmul 27B2                             __pidataCOMRAM 2A16  
                 _Linearized_Volume_Array 7A63                              _i2c_tr_queue 01CC  
                       __size_of_TMR1_ISR 0030                         __size_of_TMR3_ISR 0030  
                          _ADC_Initialize 2898                    ?_OSCILLATOR_Initialize 0001  
             __size_of_Build_Volume_Array 0002                          PI_UART_SYNC@data 001A  
                          __end_of_printf 03F6                          ?_Update_X_Offset 0021  
                     _I2C_BusCollisionISR 2A30                            __end_of_strchr 251E  
                          __end_of_strcmp 210E                            __end_of_strcpy 2196  
                           ??_LED_Control 006E                          ?_Update_Y_Offset 0021  
                          __end_of_strtok 1610                            __end_of_strspn 1F44  
                     start_initialization 1A60                 __size_of_EPWM1_Initialize 001E  
                            _Button_Check 1C12           __size_of_PIN_MANAGER_Initialize 002E  
    __end_of_INT3_DefaultInterruptHandler 2A30     __size_of_INT3_DefaultInterruptHandler 0002  
            _INT3_DefaultInterruptHandler 2A2E                                 _i2c_state 003F  
             __end_of_I2C_MasterTRBInsert 1858                             _Headphones_In 002E  
                             putch@txData 0015              EPWM1_LoadDutyValue@dutyValue 0021  
                   __end_of_EUSART1_Write 231C                       _Update_Battery_Icon 27FC  
                   __end_of_EUSART2_Write 235A                         ??_Battery_Display 0023  
                   __end_of_INT3_CallBack 27D8                              ??_Set_Volume 0023  
                       ??_I2C_MasterWrite 001D                               ??_ADC_Debug 0022  
                              ?_DebugMenu 0001                      _Startup_Count_Enable 01F5  
                             ??_I2C_Write 001F                      ?_I2C_BusCollisionISR 0001  
                   ??_ADC_StartConversion 0014               __end_of_EUSART2_Write_Array 25BA  
                __size_of_TMR1_Initialize 003C                             ?_PWR_SW_Check 0001  
                                ??___wmul 0018                               _CCPTMRSbits 000F99  
                  __end_of_ADC_Initialize 28B4                      ?_Update_Battery_Icon 0001  
                  ?_TAS2521_Communication 0001                               __pdataBANK0 00BC  
                             __pdataBANK1 01D1                                  ?_I2C_ISR 0001  
                                ?_ADC_ISR 0001                __end_of_EXT_INT_Initialize 2152  
                                ??_printf 0020                    ??_Read_Battery_Percent 0023  
                                ??_strchr 0018                                  ??_strcmp 0018  
                                ??_strcpy 0018                      __end_of_PI_UART_SYNC 221C  
                                ??_strtok 0020                                  ??_strspn 001D  
                          _eusart1RxCount 0035                            _eusart2RxCount 003A  
                  _Update_Battery_Display 27D8                     __end_of_Read_Commands 12EC  
                      __end_of_Set_Volume 1EA2                               __pbssCOMRAM 0023  
                  ??_Read_Battery_Voltage 0023          __end_of_INT0_SetInterruptHandler 29FE  
           __size_of_EUSART1_Transmit_ISR 0032          __end_of_INT3_SetInterruptHandler 29E0  
                           __pcstackBANK0 0060                             __pcstackBANK2 0200  
                         I2C_Read@Address 001E                   ?_MAX17048_Communication 0001  
                __size_of_TMR2_Initialize 0014                               ??_LED_Check 0014  
                            _isdigit$3579 0015                           Headphones@State 0067  
           ?_INT3_DefaultInterruptHandler 0001                       EUSART2_Write@txData 0014  
                         ??_Battery_Check 0023                  ?_Screen_Brightness_Debug 0001  
                     __end_of_LED_Control 0910              __size_of_EUSART1_Receive_ISR 002C  
                   _INT2_InterruptHandler 01ED                   _I2C_MasterWriteTRBBuild 2196  
                   ??_I2C_BusCollisionISR 0001                                 __pnvBANK1 01E9  
                        ??i2_PWR_SW_Check 0001                          ___lwdiv@dividend 0014  
                  _PIN_MANAGER_Initialize 26AE           __size_of_I2C_MasterReadTRBBuild 0050  
                          ??_PWR_SW_Check 0014                  __size_of_TMR3_Initialize 003C  
                               __pintcode 0008                     __end_of_Volume_Update 22DE  
        __end_of_TMR1_SetInterruptHandler 29D6                             __pmediumconst 7A62  
                               __ptext100 0000                     ??_Update_Battery_Icon 0019  
                                ?___lwdiv 0014                                  ?___lwmod 001B  
                         ?_ADC_Initialize 0001                     Update_Y_Offset@F18455 01D9  
              __end_of_TAS2521_Initialize 0688              __end_of_I2C_FunctionComplete 291C  
            ??_INTERRUPT_InterruptManager 0006                           I2C_Read@timeOut 0020  
                                _ECCP1DEL 000FBE                ??_INT2_SetInterruptHandler 0016  
                                _BAUDCON1 000FA7                                  _BAUDCON2 000FB9  
                __size_of_TMR1_StartTimer 0004                                  ?_isdigit 0001  
                                _I2C_Read 1910            __end_of_MAX17048_Communication 0DB8  
                                _ADC_Data 0027                                  _I2C_Stop 225E  
                                _ADC_Step 0045                                 _hexpowers 7B6D  
            I2C_MasterWriteTRBBuild@pdata 0016                            __size_of_abval 0030  
                        ___lwdiv@quotient 0019                  LED_Control@first_command 0073  
                          __size_of_getch 0010                                  ?_strcspn 0019  
                          __size_of_putch 000A                             _p_i2c_current 00B2  
                    _INTERRUPT_Initialize 2A28              __size_of_EUSART2_Receive_ISR 002C  
           Read_Battery_Register@Register 0067                            ___wmul@product 0018  
                                _INT3_ISR 29A4                                  _LATAbits 000F89  
                                _LATCbits 000F8B                               ??_DebugMenu 0023  
       __size_of_INT1_SetInterruptHandler 000A                 ?_INT1_SetInterruptHandler 0014  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                                _PIE3bits 000FA3                  __size_of_TMR2_StartTimer 0004  
                   Update_Y_Offset@offset 0021                       I2C_MasterRead@pdata 0060  
                     I2C_MasterRead@pflag 0065       __size_of_INTERRUPT_InterruptManager 010E  
           TAS2521_Communication@i2c_data 006E                                  i2u415_48 2668  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                                _PIR3bits 000FA4                                  i2u390_48 2698  
                                _PIR4bits 000FB7                ??_TMR3_SetInterruptHandler 0016  
                                i2u384_48 27C2                                  i2u723_47 1BC4  
                                i2u724_47 1BF4              __size_of_EPWM1_LoadDutyValue 003C  
                                _RCONbits 000FD0                      I2C_MasterWrite@pdata 0060  
                    I2C_MasterWrite@pflag 0065                                  _TMR1_ISR 267E  
                                _TMR3_ISR 264E                       I2C_ISR@pi2c_buf_ptr 0140  
                                _PSTR1CON 000F9C                          _Blue_Blink_Timer 002B  
                     Battery_Display@data 006E                                 getch@data 0016  
            Update_Battery_Display@F18447 01DD                          __size_of_I2C_ISR 0274  
                       ??_TMR1_Initialize 0016                          __size_of_ADC_ISR 0016  
                        Read_Commands@str 0200                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0014                          __CFG_SOSCSEL$DIG 000000  
              Update_Battery_Display@data 0019                                printf@flag 006A  
                              printf@prec 0065                                  _WPUBbits 000F5B  
                __size_of_TMR3_StartTimer 0004                    _I2C_MasterReadTRBBuild 1F94  
             __end_of_Brightness_SW_Check 1DEA                          _EPWM1_Initialize 2820  
                             _LED_Control 0688           __end_of_Screen_Brightness_Debug 1A60  
           __size_of_EUSART2_Transmit_ISR 0032                               _INTCON2bits 000FF1  
                             _INTCON3bits 000FF0                                 copy_data0 1A74  
                               copy_data1 1A94                                 copy_data2 1AB4  
                   ?_INTERRUPT_Initialize 0001                  _INT0_SetInterruptHandler 29F4  
               ??_I2C_MasterWriteTRBBuild 001B                  _INT3_SetInterruptHandler 29D6  
                                _Pi_Syncd 002F                         ??_TMR2_Initialize 0014  
                   EUSART1_Read@readValue 0014            ??_INT3_DefaultInterruptHandler 0001  
                              _EECON1bits 000F7F                          ??_I2C_MasterRead 001D  
                        ??_I2C_Initialize 0014                                _ANCON0bits 000F5D  
                                __Hrparam 0000                                  __Lrparam 0000  
                      __CFG_BOREN$SBORDIS 000000                 Update_Battery_Icon@F18444 01E0  
                           I2C_Write@Data 001E                     __size_of_PI_UART_SYNC 0042  
                 _Brightness_Count_Enable 002C         Read_Battery_Register@RegisterData 0068  
                 ??_OSCILLATOR_Initialize 0014            ??_ADC_GetConversionResult_8bit 0003  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwdiv 0052  
                        __size_of___lwmod 0042                         ??_TMR3_Initialize 0016  
                   _INT3_InterruptHandler 01EF                  _TMR1_SetInterruptHandler 29CC  
                   _TMR1_InterruptHandler 01F1                           _Battery_Display 0DB8  
                         _I2C_MasterWrite 1FE4                          __size_of_isdigit 001E  
                         ___lwdiv@divisor 0016                           _Battery_Percent 0046  
                         ___lwdiv@counter 0018                      __end_of_PWR_SW_Check 1B82  
                                __ptext10 2396                                  __ptext11 2A24  
                                __ptext20 29F4                                  __ptext12 29CC  
                                __ptext21 247C                                  __ptext13 26AE  
                              _T1GCONbits 000FAA                                  __ptext30 283E  
                                __ptext22 24B2                                  __ptext14 295E  
                                __ptext31 16DE                                  __ptext23 2820  
                                __ptext15 2A28                                  __ptext40 285C  
                                __ptext32 1C9C                                  __ptext24 2898  
                                __ptext16 210E                                  __ptext41 29B4  
                                __ptext33 12EC                                  __ptext25 1AF2  
                                __ptext17 29D6                                  __ptext50 20C6  
                                __ptext42 0688                                  __ptext34 0FA8  
                                __ptext26 21DA                                  __ptext18 29E0  
                                __ptext51 011A                                  __ptext43 0DB8  
                                __ptext35 03F6                                  __ptext27 251E  
                                __ptext19 29EA                                  __ptext60 2994  
                                __ptext52 221C                                  __ptext44 1610  
                                __ptext36 1DEA                                  __ptext28 1D16  
                                __ptext61 29FE                                  __ptext53 1EA2  
                                __ptext45 287A                                  __ptext37 19C8  
                                __ptext29 240E                                  __ptext70 27FC  
                                __ptext62 22DE                                  __ptext54 116A  
                                __ptext46 278C                                  __ptext38 0B84  
                                __ptext71 2586                                  __ptext63 2552  
                                __ptext55 153E                                  __ptext47 26DC  
                                __ptext39 28B4                                  __ptext80 28E8  
                                __ptext72 231C                                  __ptext64 1C12  
                                __ptext56 1EF4                                  __ptext48 2708  
                                __ptext73 28CE                                  __ptext65 23D2  
                                __ptext57 1F44                                  __ptext49 1422  
                                __ptext90 0910                                  __ptext82 264E  
                                __ptext74 1910                                  __ptext66 2A2C  
                                __ptext58 24E8                                  __ptext91 225E  
                                __ptext83 2970                                  __ptext75 1FE4  
                                __ptext67 1D86                                  __ptext59 2152  
                                __ptext92 2902                                  __ptext84 267E  
                                __ptext76 2196                                  __ptext68 27D8  
                                __ptext93 2A30                                  __ptext85 2982  
                                __ptext77 2030                                  __ptext69 207C  
                                __ptext94 25BA                                  __ptext86 29A4  
                                __ptext78 179E                                  __ptext95 2734  
                                __ptext87 1B82                                  __ptext79 1F94  
                                __ptext96 25EC                                  __ptext88 27B2  
                                __ptext97 2760                                  __ptext89 2A2E  
                                __ptext98 2934                                  __ptext99 2A08  
                                _commands 0142                         ??_TMR1_StartTimer 0014  
                                abval@val 0018                 Update_Battery_Icon@charge 001C  
                              _T3GCONbits 000FB0              I2C_MasterTRBInsert@ptrb_list 0014  
                        __size_of_strcspn 0050               __size_of_EUSART2_Initialize 0036  
                              strcpy@from 0016                             __size_of_atoi 00CE  
                           __size_of_main 00B8                      _I2C_FunctionComplete 2902  
                   _Read_Battery_Register 285C                              _PI_UART_SYNC 21DA  
               LED_Control@second_command 0083                   ??_TAS2521_Communication 0023  
                            _PSTR1CONbits 000F9C                          _Shutdown_Counter 00BA  
                                int$flags 004C                               _SENSITIVITY 00C0  
                                atoi@sign 001E                  __size_of_Headphone_Check 001E  
                       ??_TMR2_StartTimer 0014        __end_of_INTERRUPT_InterruptManager 0116  
              _INTERRUPT_InterruptManager 0008                                 printf@idx 0064  
              __end_of_Build_Volume_Array 2A2E                                 printf@val 006B  
                 ?_Update_Battery_Display 0001      __end_of_TMR3_DefaultInterruptHandler 2982  
   __size_of_TMR3_DefaultInterruptHandler 0012              _TMR3_DefaultInterruptHandler 2970  
                     __CFG_INTOSCSEL$HIGH 000000                       _EUSART1_Receive_ISR 2760  
            _INT1_DefaultInterruptHandler 000000                          _Shutdown_Process 0033  
                         _Startup_Counter 0034                                _INTCONbits 000FF2  
                       I2C_Write@Register 001D                                  isdigit@c 0016  
                  ??_INTERRUPT_Initialize 0014                     I2C_MasterRead@address 0063  
                      _EXT_INT_Initialize 210E                                _MAX_VOLUME 00BD  
                       ??_TMR3_StartTimer 0014                                  intlevel2 0000  
                __size_of_Update_X_Offset 002C                  __size_of_Update_Y_Offset 002C  
                    ?_EUSART1_Receive_ISR 0001               __end_of_ADC_StartConversion 2902  
                               strchr@chr 0016                     ?_I2C_FunctionComplete 0001  
                        ___lwmod@dividend 001B                                 strchr@ptr 0014  
                 ?_PIN_MANAGER_Initialize 0001                     I2C_MasterRead@trBlock 01C2  
                              _MIN_VOLUME 00BF              __size_of_I2C_MasterTRBInsert 00BA  
                     ?_EXT_INT_Initialize 0001                      I2C_Write@writeBuffer 0020  
                              _RCSTA1bits 000FAB                                _RCSTA2bits 000FA6  
                ??_I2C_MasterQueueIsEmpty 0014                                 strcspn@s1 0019  
                               strcspn@s2 001B              __end_of_EUSART1_Transmit_ISR 261E  
                        ??_ADC_Initialize 0014                     Battery_Display@F18498 01E3  
                          Read_Commands@i 0288                    I2C_MasterWrite@address 0063  
        __size_of_Screen_Brightness_Debug 0098                                  printf@ap 0068  
                                printf@cp 0066                        __CFG_WDTPS$1048576 000000  
          __end_of_Update_Battery_Display 27FC                   __end_of_Battery_Display 0FA8  
                 __end_of_I2C_MasterWrite 2030                             _command_count 00BB  
                  __size_of_EUSART1_Write 003E              __size_of_EUSART2_Write_Array 0034  
                  __size_of_EUSART2_Write 003E                       _EUSART2_Receive_ISR 2734  
                          _Screen_Control 0032                      ??_EXT_INT_Initialize 0016  
                  I2C_MasterWrite@trBlock 01C7                       Read_Commands@F18504 01D1  
           ?_TMR3_DefaultInterruptHandler 0001                    __size_of_INT3_CallBack 0026  
                                strcmp@s1 0014                                  strcmp@s2 0016  
           __size_of_Read_Battery_Percent 001A                           ___lwmod@divisor 001D  
                                strcpy@cp 0018                                  strcpy@to 0014  
                         ___lwmod@counter 001F                                  strcspn@i 001E  
        __end_of_INT1_SetInterruptHandler 29F4            MAX17048_Communication@i2c_data 006E  
                     _EPWM1_LoadDutyValue 23D2                                  strtok@s1 0060  
                                strtok@s2 0062                                  strspn@s1 0019  
          MAX17048_Communication@ReadData 0070                                  strspn@s2 001B  
                             _SSPCON1bits 000FC6                                  strtok@sp 00B6  
                             _SSPCON2bits 000FC5             __size_of_Read_Battery_Voltage 001A  
                      _TAS2521_Initialize 03F6               __end_of_I2C_BusCollisionISR 2A32  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 26DC  
          I2C_MasterWriteTRBBuild@address 0019                    ?_Read_Battery_Register 0001  
      Read_Battery_Voltage@BatteryVoltage 0067                      ?_EUSART2_Receive_ISR 0001  
                   __end_of_Battery_Check 20C6                       __CFG_BORPWR$ZPBORMV 000000  
                     ?_TAS2521_Initialize 0001               __end_of_Update_Battery_Icon 2820  
                         _TMR1_Initialize 2396                  __end_of_EPWM1_Initialize 283E  
           I2C_MasterWriteTRBBuild@length 0018                      ?_EPWM1_LoadDutyValue 0021  
                      Read_Commands@delim 0280                    __size_of_Read_Commands 0182  
